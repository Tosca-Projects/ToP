// Generated from Tosca.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ToscaListener = require('./ToscaListener').ToscaListener;


  class UnorderedClauses {
  
    constructor(thisparser) {
    this.items = {};
    this.mandatory = [];
    this.label = "";
    this.thisparser = thisparser;
    
    return this;
    }

    add(clause) {
          let clauseToken = clause.start.text; 
          this.items[clauseToken] = this.items[clauseToken] + 1 || 1;
    };

    setLabel(label) {
          this.label = label; 
    };

    setMandatory(mandatory) {
          this.mandatory = mandatory; 
    };
	    
    check() {
          for (let item of this.mandatory) 
     	    if (!(item in this.items)) 
     	      this.thisparser.notifyErrorListeners("No '" + item + "' value provided for property '" + this.label + "'");
    	  for (let i in this.items) 
     	    if (this.items[i] > 1) 
     	      this.thisparser.notifyErrorListeners("The clause '" + i + "' is duplicated in entity '" + this.label + "'"); 
    };
    
  }
  

var grammarFileName = "Tosca.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00e8\u0d74\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0003",
    "\u0002\u0003\u0002\u0007\u0002\u018b\n\u0002\f\u0002\u000e\u0002\u018e",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u0197\n\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0006\u0004\u019d\n\u0004\r\u0004\u000e",
    "\u0004\u019e\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u01b1\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0006\u0006\u01bb\n\u0006",
    "\r\u0006\u000e\u0006\u01bc\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u01cb\n\u0007\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0006\b\u01d2\n\b\r\b\u000e\b\u01d3\u0003",
    "\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0006\t\u01e0\n\t\r\t\u000e\t\u01e1\u0003\t\u0003\t\u0003\t\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u01ec\n\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0006\u000b\u01f3\n\u000b",
    "\r\u000b\u000e\u000b\u01f4\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0005\f\u021a\n\f\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0237\n\r",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0006\u000e",
    "\u023e\n\u000e\r\u000e\u000e\u000e\u023f\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0265\n\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0282\n\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0006\u0011\u0289\n\u0011",
    "\r\u0011\u000e\u0011\u028a\u0003\u0011\u0003\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u029d\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0006\u0013",
    "\u02ad\n\u0013\r\u0013\u000e\u0013\u02ae\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0006",
    "\u0013\u02b9\n\u0013\r\u0013\u000e\u0013\u02ba\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u02bf\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0006\u0014\u02c6\n\u0014\r\u0014\u000e\u0014\u02c7",
    "\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u02da\n",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0006\u0016\u02ea\n\u0016\r\u0016\u000e",
    "\u0016\u02eb\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0006\u0016\u02f6\n\u0016\r\u0016",
    "\u000e\u0016\u02f7\u0003\u0016\u0003\u0016\u0005\u0016\u02fc\n\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0006\u0018\u030c\n\u0018\r\u0018\u000e\u0018",
    "\u030d\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0006\u0019\u0317\n\u0019\r\u0019\u000e\u0019\u0318",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0006\u001a\u0325\n",
    "\u001a\r\u001a\u000e\u001a\u0326\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b",
    "\u0337\n\u001b\f\u001b\u000e\u001b\u033a\u000b\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0006",
    "\u001b\u0349\n\u001b\r\u001b\u000e\u001b\u034a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u035b\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0006\u001c\u0362\n\u001c\r\u001c\u000e\u001c\u0363",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0006\u001d\u0370\n",
    "\u001d\r\u001d\u000e\u001d\u0371\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0005\u001e\u0384\n\u001e\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 ",
    "\u0003 \u0003 \u0006 \u0393\n \r \u000e \u0394\u0003 \u0003 \u0003 ",
    "\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0005!\u03a6\n!\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0006\"\u03ad\n\"\r\"\u000e\"\u03ae\u0003\"\u0003\"\u0003#\u0003",
    "#\u0005#\u03b5\n#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0006%\u03c4\n%\r%\u000e%\u03c5",
    "\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0005&\u03ce\n&\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0007(\u03db\n(\f(\u000e(\u03de\u000b(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0006(\u03eb\n(\r",
    "(\u000e(\u03ec\u0003(\u0003(\u0003(\u0005(\u03f2\n(\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0005)\u0404\n)\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0006*\u040b\n*\r*\u000e*\u040c\u0003*\u0003*\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0006+\u0429\n+\r+\u000e+\u042a\u0003+\u0003+\u0003+\u0003",
    "+\u0005+\u0431\n+\u0003,\u0003,\u0003,\u0003,\u0003,\u0006,\u0438\n",
    ",\r,\u000e,\u0439\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0006-\u044a\n-\r-\u000e",
    "-\u044b\u0003-\u0003-\u0003-\u0005-\u0451\n-\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0005.\u0463\n.\u0003/\u0003/\u0003/\u0003/\u0003/\u0006",
    "/\u046a\n/\r/\u000e/\u046b\u0003/\u0003/\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00060\u0481\n0\r0\u000e0\u0482\u00030\u0003",
    "0\u00030\u00030\u00050\u0489\n0\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00051\u049d\n1\u00032\u00032\u00032\u00032\u00032\u0006",
    "2\u04a4\n2\r2\u000e2\u04a5\u00032\u00032\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00063\u04b2\n3\r3\u000e3\u04b3\u0003",
    "3\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00054\u04cd\n4\u00035\u00035\u00035\u00035\u00065\u04d3",
    "\n5\r5\u000e5\u04d4\u00035\u00035\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00066\u04eb\n6\r6\u000e6\u04ec\u00036\u0003",
    "6\u00036\u00056\u04f2\n6\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00057\u04fb\n7\u00038\u00038\u00038\u00038\u00038\u00068\u0502\n",
    "8\r8\u000e8\u0503\u00038\u00038\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00069\u0511\n9\r9\u000e9\u0512\u00039\u0003",
    "9\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u0526\n:\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0006;\u052d\n;\r;\u000e;\u052e\u0003;\u0003;\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0006<\u0545\n<\r",
    "<\u000e<\u0546\u0003<\u0003<\u0003<\u0005<\u054c\n<\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0006=\u0553\n=\r=\u000e=\u0554\u0003=\u0003=\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0006>\u0561\n>\r",
    ">\u000e>\u0562\u0003>\u0003>\u0003>\u0003?\u0003?\u0005?\u056a\n?\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0573\n@\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0006A\u057a\nA\rA\u000eA\u057b\u0003A\u0003",
    "A\u0003B\u0003B\u0003B\u0003B\u0003B\u0006B\u0585\nB\rB\u000eB\u0586",
    "\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0006C\u0590\nC\r",
    "C\u000eC\u0591\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003D\u0006D\u059f\nD\rD\u000eD\u05a0\u0003D\u0003",
    "D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0005E\u05bd\nE\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0006F\u05c4\nF\rF\u000eF\u05c5\u0003F\u0003F\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0006G\u05d3\nG\r",
    "G\u000eG\u05d4\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005",
    "H\u05f2\nH\u0005H\u05f4\nH\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0006I\u0600\nI\rI\u000eI\u0601\u0003",
    "I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0005J\u0627\nJ\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0005K\u062e\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0006L\u0638\nL\rL\u000eL\u0639\u0003L\u0003L\u0003L\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0005M\u0646\nM\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u065a\nN\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0006O\u0664\nO\rO\u000e",
    "O\u0665\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005",
    "Q\u067a\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0006R\u0681\nR\rR\u000e",
    "R\u0682\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0006S\u068f\nS\rS\u000eS\u0690\u0003S\u0003S\u0003S\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0005T\u069d\nT\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0006U\u06a4\nU\rU\u000eU\u06a5\u0003U\u0003",
    "U\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0006V\u06b2",
    "\nV\rV\u000eV\u06b3\u0003V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0007W\u06c2\nW\fW\u000eW\u06c5",
    "\u000bW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0006W\u06d2\nW\rW\u000eW\u06d3\u0003W\u0003W\u0005",
    "W\u06d8\nW\u0003X\u0003X\u0003X\u0003X\u0003X\u0006X\u06df\nX\rX\u000e",
    "X\u06e0\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0006Y\u06ed\nY\rY\u000eY\u06ee\u0003Y\u0003Y\u0003Y\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u06fb\nZ\fZ\u000e",
    "Z\u06fe\u000bZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0005Z\u0709\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0006[\u0710",
    "\n[\r[\u000e[\u0711\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0003\\\u0006\\\u071e\n\\\r\\\u000e\\\u071f\u0003",
    "\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0005]\u0728\n]\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0006^\u072f\n^\r^\u000e^\u0730\u0003^\u0003",
    "^\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0006_\u073d",
    "\n_\r_\u000e_\u073e\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0007`\u074d\n`\f`\u000e`\u0750",
    "\u000b`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0006`\u075d\n`\r`\u000e`\u075e\u0003`\u0005`\u0762",
    "\n`\u0003a\u0003a\u0003a\u0003a\u0003a\u0006a\u0769\na\ra\u000ea\u076a",
    "\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0006b\u077b\nb\rb\u000eb\u077c\u0003",
    "b\u0003b\u0003b\u0005b\u0782\nb\u0003c\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0007c\u0791\nc\f",
    "c\u000ec\u0794\u000bc\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0006c\u07a1\nc\rc\u000ec\u07a2\u0003",
    "c\u0005c\u07a6\nc\u0003d\u0003d\u0003d\u0003d\u0003d\u0006d\u07ad\n",
    "d\rd\u000ed\u07ae\u0003d\u0003d\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0006e\u07c4\ne\re\u000ee\u07c5\u0003e\u0003e\u0003e\u0003",
    "e\u0005e\u07cc\ne\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0006f\u07e7\nf\r",
    "f\u000ef\u07e8\u0003f\u0003f\u0003f\u0005f\u07ee\nf\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0005g\u07f5\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0006",
    "h\u07fc\nh\rh\u000eh\u07fd\u0003h\u0003h\u0003i\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0006i\u080a\ni\ri\u000ei\u080b\u0003",
    "i\u0003i\u0003i\u0003j\u0003j\u0003j\u0005j\u0814\nj\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0006k\u081b\nk\rk\u000ek\u081c\u0003k\u0003k\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0006l\u0829\nl\r",
    "l\u000el\u082a\u0003l\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0003m\u0005m\u0836\nm\u0003n\u0003n\u0003n\u0003n\u0003n\u0006n\u083d",
    "\nn\rn\u000en\u083e\u0003n\u0003n\u0003o\u0003o\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0003o\u0006o\u084b\no\ro\u000eo\u084c\u0003o\u0003",
    "o\u0003o\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0005p\u0858\np\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0003q\u0006q\u0866\nq\rq\u000eq\u0867\u0003q\u0003q\u0003q\u0005",
    "q\u086d\nq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0003r\u0003r\u0003r\u0003r\u0003r\u0006r\u087d\nr\rr\u000er\u087e",
    "\u0003r\u0003r\u0003r\u0005r\u0884\nr\u0003s\u0003s\u0003s\u0003s\u0003",
    "s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0006s\u0893",
    "\ns\rs\u000es\u0894\u0003s\u0005s\u0898\ns\u0003t\u0003t\u0003t\u0003",
    "t\u0006t\u089e\nt\rt\u000et\u089f\u0003t\u0003t\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0006u\u08ac\nu\ru\u000eu\u08ad",
    "\u0003u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0007v\u08c7\nv\fv\u000ev\u08ca\u000bv\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0006v\u08d7\nv\rv\u000ev\u08d8\u0003v\u0005v\u08dc\nv\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0006w\u08e3\nw\rw\u000ew\u08e4\u0003w\u0003",
    "w\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0006x\u08f1",
    "\nx\rx\u000ex\u08f2\u0003x\u0003x\u0003x\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0007",
    "y\u0905\ny\fy\u000ey\u0908\u000by\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0006y\u0915\ny\ry\u000e",
    "y\u0916\u0003y\u0003y\u0005y\u091b\ny\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0006z\u0922\nz\rz\u000ez\u0923\u0003z\u0003z\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003{\u0003{\u0006{\u0930\n{\r{\u000e{\u0931",
    "\u0003{\u0003{\u0003{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003",
    "|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003",
    "|\u0007|\u0948\n|\f|\u000e|\u094b\u000b|\u0003|\u0003|\u0003|\u0003",
    "|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0006",
    "|\u095a\n|\r|\u000e|\u095b\u0003|\u0003|\u0003|\u0005|\u0961\n|\u0003",
    "}\u0003}\u0003}\u0003}\u0003}\u0006}\u0968\n}\r}\u000e}\u0969\u0003",
    "}\u0003}\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003",
    "~\u0003~\u0006~\u0978\n~\r~\u000e~\u0979\u0003~\u0003~\u0003~\u0003",
    "~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0007\u007f\u098d\n\u007f\f\u007f\u000e\u007f\u0990",
    "\u000b\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0006\u007f\u099d\n\u007f\r\u007f\u000e\u007f\u099e\u0003\u007f\u0003",
    "\u007f\u0005\u007f\u09a3\n\u007f\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0006\u0080\u09aa\n\u0080\r\u0080\u000e\u0080",
    "\u09ab\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0006\u0081\u09b8",
    "\n\u0081\r\u0081\u000e\u0081\u09b9\u0003\u0081\u0003\u0081\u0003\u0081",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0006\u0082\u09d8\n\u0082\r\u0082\u000e\u0082\u09d9\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u0a07\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0a15\n\u0083\u0003",
    "\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0006\u0084\u0a1f\n\u0084\r\u0084\u000e\u0084\u0a20",
    "\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0005\u0085",
    "\u0a28\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003",
    "\u0086\u0006\u0086\u0a2f\n\u0086\r\u0086\u000e\u0086\u0a30\u0003\u0086",
    "\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u0a44\n",
    "\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0006",
    "\u0088\u0a4b\n\u0088\r\u0088\u000e\u0088\u0a4c\u0003\u0088\u0003\u0088",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a",
    "\u0003\u008a\u0003\u008a\u0006\u008a\u0a5f\n\u008a\r\u008a\u000e\u008a",
    "\u0a60\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0006\u008b\u0a6d",
    "\n\u008b\r\u008b\u000e\u008b\u0a6e\u0003\u008b\u0003\u008b\u0003\u008b",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c",
    "\u0a79\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003",
    "\u008d\u0006\u008d\u0a80\n\u008d\r\u008d\u000e\u008d\u0a81\u0003\u008d",
    "\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0006\u008e\u0a8e\n\u008e\r\u008e",
    "\u000e\u008e\u0a8f\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008f\u0003",
    "\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u0a9b",
    "\n\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0006\u0090\u0aa2\n\u0090\r\u0090\u000e\u0090\u0aa3\u0003\u0090\u0003",
    "\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0003\u0091\u0006",
    "\u0091\u0aad\n\u0091\r\u0091\u000e\u0091\u0aae\u0003\u0091\u0003\u0091",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092",
    "\u0006\u0092\u0ab9\n\u0092\r\u0092\u000e\u0092\u0aba\u0003\u0092\u0003",
    "\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u0acd\n\u0093\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0006\u0094",
    "\u0ad5\n\u0094\r\u0094\u000e\u0094\u0ad6\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0005\u0095\u0ae8\n\u0095\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0096\u0006\u0096\u0aef\n\u0096\r\u0096\u000e\u0096",
    "\u0af0\u0003\u0096\u0003\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0003\u0097\u0006\u0097\u0afb\n\u0097\r\u0097\u000e",
    "\u0097\u0afc\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0098\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098",
    "\u0003\u0098\u0005\u0098\u0b0b\n\u0098\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0006\u0099\u0b12\n\u0099\r\u0099\u000e",
    "\u0099\u0b13\u0003\u0099\u0003\u0099\u0003\u009a\u0003\u009a\u0003\u009a",
    "\u0003\u009a\u0003\u009a\u0006\u009a\u0b1d\n\u009a\r\u009a\u000e\u009a",
    "\u0b1e\u0003\u009a\u0003\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0005",
    "\u009b\u0b26\n\u009b\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0006\u009c\u0b2f\n\u009c\r\u009c",
    "\u000e\u009c\u0b30\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003",
    "\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0006",
    "\u009d\u0b3d\n\u009d\r\u009d\u000e\u009d\u0b3e\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0007\u009e\u0b4c\n\u009e\f\u009e",
    "\u000e\u009e\u0b4f\u000b\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0006\u009e\u0b5c\n\u009e\r\u009e\u000e\u009e\u0b5d",
    "\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0b63\n\u009e\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0007\u009f\u0b70",
    "\n\u009f\f\u009f\u000e\u009f\u0b73\u000b\u009f\u0003\u009f\u0003\u009f",
    "\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f",
    "\u0003\u009f\u0006\u009f\u0b7e\n\u009f\r\u009f\u000e\u009f\u0b7f\u0003",
    "\u009f\u0003\u009f\u0005\u009f\u0b84\n\u009f\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0006\u00a0\u0b8a\n\u00a0\r\u00a0\u000e\u00a0",
    "\u0b8b\u0003\u00a0\u0003\u00a0\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0006\u00a1\u0b95\n\u00a1\r\u00a1\u000e\u00a1\u0b96",
    "\u0003\u00a1\u0003\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0007\u00a2\u0baf\n",
    "\u00a2\f\u00a2\u000e\u00a2\u0bb2\u000b\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0006\u00a2\u0bbf\n\u00a2\r\u00a2",
    "\u000e\u00a2\u0bc0\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0007\u00a2\u0bca\n\u00a2\f\u00a2\u000e",
    "\u00a2\u0bcd\u000b\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0003\u00a2\u0006\u00a2\u0bda\n\u00a2\r\u00a2\u000e\u00a2\u0bdb\u0003",
    "\u00a2\u0005\u00a2\u0bdf\n\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0007\u00a3\u0be7\n\u00a3\f\u00a3",
    "\u000e\u00a3\u0bea\u000b\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0006\u00a3\u0bf8\n\u00a3\r\u00a3\u000e",
    "\u00a3\u0bf9\u0003\u00a3\u0003\u00a3\u0005\u00a3\u0bfe\n\u00a3\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003",
    "\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0005\u00a4\u0c11",
    "\n\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5",
    "\u0006\u00a5\u0c18\n\u00a5\r\u00a5\u000e\u00a5\u0c19\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0006",
    "\u00a6\u0c23\n\u00a6\r\u00a6\u000e\u00a6\u0c24\u0003\u00a6\u0003\u00a6",
    "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7",
    "\u0c2e\n\u00a7\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0005\u00a9\u0c3d\n\u00a9\u0003\u00aa",
    "\u0003\u00aa\u0005\u00aa\u0c41\n\u00aa\u0003\u00ab\u0003\u00ab\u0003",
    "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0006\u00ab\u0c49\n\u00ab",
    "\r\u00ab\u000e\u00ab\u0c4a\u0003\u00ab\u0003\u00ab\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0006",
    "\u00ac\u0c56\n\u00ac\r\u00ac\u000e\u00ac\u0c57\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0c5f\n\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0005\u00ac\u0c63\n\u00ac\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0005\u00af",
    "\u0c78\n\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003\u00af\u0003",
    "\u00af\u0005\u00af\u0c7f\n\u00af\u0006\u00af\u0c81\n\u00af\r\u00af\u000e",
    "\u00af\u0c82\u0003\u00af\u0003\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0c8c\n\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u0c93\n\u00b0",
    "\u0006\u00b0\u0c95\n\u00b0\r\u00b0\u000e\u00b0\u0c96\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005",
    "\u00b1\u0ca0\n\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0005\u00b3\u0cb3\n\u00b3\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3\u0cba\n\u00b3\u0005\u00b3",
    "\u0cbc\n\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3\u0cc0\n\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u0cd2\n\u00b4",
    "\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b6\u0003\u00b6",
    "\u0005\u00b6\u0cda\n\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005",
    "\u00b6\u0cdf\n\u00b6\u0007\u00b6\u0ce1\n\u00b6\f\u00b6\u000e\u00b6\u0ce4",
    "\u000b\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0ce8\n\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6\u0cee\n\u00b6",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0006\u00b6\u0cf7\n\u00b6\r\u00b6\u000e\u00b6\u0cf8\u0005",
    "\u00b6\u0cfb\n\u00b6\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0cff\n\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0d04\n\u00b7\u0007",
    "\u00b7\u0d06\n\u00b7\f\u00b7\u000e\u00b7\u0d09\u000b\u00b7\u0003\u00b7",
    "\u0003\u00b7\u0005\u00b7\u0d0d\n\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0005\u00b7\u0d13\n\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0006\u00b7\u0d19\n\u00b7\r\u00b7\u000e\u00b7",
    "\u0d1a\u0005\u00b7\u0d1d\n\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u0d26\n",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u0d2b\n\u00b9",
    "\u0003\u00b9\u0003\u00b9\u0003\u00ba\u0003\u00ba\u0007\u00ba\u0d31\n",
    "\u00ba\f\u00ba\u000e\u00ba\u0d34\u000b\u00ba\u0005\u00ba\u0d36\n\u00ba",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0007\u00bb",
    "\u0d3d\n\u00bb\f\u00bb\u000e\u00bb\u0d40\u000b\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0006\u00bb\u0d45\n\u00bb\r\u00bb\u000e\u00bb\u0d46",
    "\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0d4b\n\u00bb\u0003\u00bc\u0007",
    "\u00bc\u0d4e\n\u00bc\f\u00bc\u000e\u00bc\u0d51\u000b\u00bc\u0003\u00bc",
    "\u0003\u00bc\u0003\u00bc\u0006\u00bc\u0d56\n\u00bc\r\u00bc\u000e\u00bc",
    "\u0d57\u0003\u00bc\u0003\u00bc\u0005\u00bc\u0d5c\n\u00bc\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0d61\n\u00bd\u0003\u00be\u0003",
    "\u00be\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0002\u0002\u00c5",
    "\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c",
    "\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082",
    "\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a",
    "\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2",
    "\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca",
    "\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2",
    "\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa",
    "\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112",
    "\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a",
    "\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142",
    "\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a",
    "\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172",
    "\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0002\u0012",
    "\u0003\u0002\u001e\u001f\u0004\u0002\u001d\u001d\u00e5\u00e5\u0003\u0002",
    " #\u0003\u0002\u00b1\u00b2\u0003\u0002\u00b5\u00b6\u0003\u0002\u00b3",
    "\u00b4\u0003\u0002\u0095\u0098\u0004\u0002\u001a\u001a\u0095\u0097\u0003",
    "\u0002\u00bc\u00bd\u0003\u0002\u00c1\u00c4\u0004\u0002\u00c1\u00c1\u00c5",
    "\u00c5\u0004\u0002$\'),\u0003\u0002-3\u0003\u000247\u0003\u00028C\n",
    "\u0002\u001d\')CQQS\u00bd\u00c0\u00c6\u00c8\u00c8\u00ca\u00dd\u00df",
    "\u00e6\u0002\u0e7d\u0002\u018c\u0003\u0002\u0002\u0002\u0004\u0196\u0003",
    "\u0002\u0002\u0002\u0006\u0198\u0003\u0002\u0002\u0002\b\u01b0\u0003",
    "\u0002\u0002\u0002\n\u01b2\u0003\u0002\u0002\u0002\f\u01ca\u0003\u0002",
    "\u0002\u0002\u000e\u01cc\u0003\u0002\u0002\u0002\u0010\u01d7\u0003\u0002",
    "\u0002\u0002\u0012\u01eb\u0003\u0002\u0002\u0002\u0014\u01ed\u0003\u0002",
    "\u0002\u0002\u0016\u0219\u0003\u0002\u0002\u0002\u0018\u0236\u0003\u0002",
    "\u0002\u0002\u001a\u0238\u0003\u0002\u0002\u0002\u001c\u0264\u0003\u0002",
    "\u0002\u0002\u001e\u0281\u0003\u0002\u0002\u0002 \u0283\u0003\u0002",
    "\u0002\u0002\"\u029c\u0003\u0002\u0002\u0002$\u02be\u0003\u0002\u0002",
    "\u0002&\u02c0\u0003\u0002\u0002\u0002(\u02d9\u0003\u0002\u0002\u0002",
    "*\u02fb\u0003\u0002\u0002\u0002,\u02fd\u0003\u0002\u0002\u0002.\u0304",
    "\u0003\u0002\u0002\u00020\u0311\u0003\u0002\u0002\u00022\u031c\u0003",
    "\u0002\u0002\u00024\u035a\u0003\u0002\u0002\u00026\u035c\u0003\u0002",
    "\u0002\u00028\u0367\u0003\u0002\u0002\u0002:\u0383\u0003\u0002\u0002",
    "\u0002<\u0385\u0003\u0002\u0002\u0002>\u0389\u0003\u0002\u0002\u0002",
    "@\u03a5\u0003\u0002\u0002\u0002B\u03a7\u0003\u0002\u0002\u0002D\u03b4",
    "\u0003\u0002\u0002\u0002F\u03b6\u0003\u0002\u0002\u0002H\u03bb\u0003",
    "\u0002\u0002\u0002J\u03cd\u0003\u0002\u0002\u0002L\u03cf\u0003\u0002",
    "\u0002\u0002N\u03f1\u0003\u0002\u0002\u0002P\u0403\u0003\u0002\u0002",
    "\u0002R\u0405\u0003\u0002\u0002\u0002T\u0430\u0003\u0002\u0002\u0002",
    "V\u0432\u0003\u0002\u0002\u0002X\u0450\u0003\u0002\u0002\u0002Z\u0462",
    "\u0003\u0002\u0002\u0002\\\u0464\u0003\u0002\u0002\u0002^\u0488\u0003",
    "\u0002\u0002\u0002`\u049c\u0003\u0002\u0002\u0002b\u049e\u0003\u0002",
    "\u0002\u0002d\u04a9\u0003\u0002\u0002\u0002f\u04cc\u0003\u0002\u0002",
    "\u0002h\u04ce\u0003\u0002\u0002\u0002j\u04f1\u0003\u0002\u0002\u0002",
    "l\u04fa\u0003\u0002\u0002\u0002n\u04fc\u0003\u0002\u0002\u0002p\u0507",
    "\u0003\u0002\u0002\u0002r\u0525\u0003\u0002\u0002\u0002t\u0527\u0003",
    "\u0002\u0002\u0002v\u054b\u0003\u0002\u0002\u0002x\u054d\u0003\u0002",
    "\u0002\u0002z\u0558\u0003\u0002\u0002\u0002|\u0569\u0003\u0002\u0002",
    "\u0002~\u0572\u0003\u0002\u0002\u0002\u0080\u0574\u0003\u0002\u0002",
    "\u0002\u0082\u057f\u0003\u0002\u0002\u0002\u0084\u058a\u0003\u0002\u0002",
    "\u0002\u0086\u0595\u0003\u0002\u0002\u0002\u0088\u05bc\u0003\u0002\u0002",
    "\u0002\u008a\u05be\u0003\u0002\u0002\u0002\u008c\u05c9\u0003\u0002\u0002",
    "\u0002\u008e\u05f3\u0003\u0002\u0002\u0002\u0090\u05f5\u0003\u0002\u0002",
    "\u0002\u0092\u0626\u0003\u0002\u0002\u0002\u0094\u062d\u0003\u0002\u0002",
    "\u0002\u0096\u062f\u0003\u0002\u0002\u0002\u0098\u0645\u0003\u0002\u0002",
    "\u0002\u009a\u0659\u0003\u0002\u0002\u0002\u009c\u065b\u0003\u0002\u0002",
    "\u0002\u009e\u066a\u0003\u0002\u0002\u0002\u00a0\u0679\u0003\u0002\u0002",
    "\u0002\u00a2\u067b\u0003\u0002\u0002\u0002\u00a4\u0686\u0003\u0002\u0002",
    "\u0002\u00a6\u069c\u0003\u0002\u0002\u0002\u00a8\u069e\u0003\u0002\u0002",
    "\u0002\u00aa\u06a9\u0003\u0002\u0002\u0002\u00ac\u06d7\u0003\u0002\u0002",
    "\u0002\u00ae\u06d9\u0003\u0002\u0002\u0002\u00b0\u06e4\u0003\u0002\u0002",
    "\u0002\u00b2\u0708\u0003\u0002\u0002\u0002\u00b4\u070a\u0003\u0002\u0002",
    "\u0002\u00b6\u0715\u0003\u0002\u0002\u0002\u00b8\u0727\u0003\u0002\u0002",
    "\u0002\u00ba\u0729\u0003\u0002\u0002\u0002\u00bc\u0734\u0003\u0002\u0002",
    "\u0002\u00be\u0761\u0003\u0002\u0002\u0002\u00c0\u0763\u0003\u0002\u0002",
    "\u0002\u00c2\u0781\u0003\u0002\u0002\u0002\u00c4\u07a5\u0003\u0002\u0002",
    "\u0002\u00c6\u07a7\u0003\u0002\u0002\u0002\u00c8\u07cb\u0003\u0002\u0002",
    "\u0002\u00ca\u07ed\u0003\u0002\u0002\u0002\u00cc\u07f4\u0003\u0002\u0002",
    "\u0002\u00ce\u07f6\u0003\u0002\u0002\u0002\u00d0\u0801\u0003\u0002\u0002",
    "\u0002\u00d2\u0813\u0003\u0002\u0002\u0002\u00d4\u0815\u0003\u0002\u0002",
    "\u0002\u00d6\u0820\u0003\u0002\u0002\u0002\u00d8\u0835\u0003\u0002\u0002",
    "\u0002\u00da\u0837\u0003\u0002\u0002\u0002\u00dc\u0842\u0003\u0002\u0002",
    "\u0002\u00de\u0857\u0003\u0002\u0002\u0002\u00e0\u086c\u0003\u0002\u0002",
    "\u0002\u00e2\u0883\u0003\u0002\u0002\u0002\u00e4\u0897\u0003\u0002\u0002",
    "\u0002\u00e6\u0899\u0003\u0002\u0002\u0002\u00e8\u08a3\u0003\u0002\u0002",
    "\u0002\u00ea\u08db\u0003\u0002\u0002\u0002\u00ec\u08dd\u0003\u0002\u0002",
    "\u0002\u00ee\u08e8\u0003\u0002\u0002\u0002\u00f0\u091a\u0003\u0002\u0002",
    "\u0002\u00f2\u091c\u0003\u0002\u0002\u0002\u00f4\u0927\u0003\u0002\u0002",
    "\u0002\u00f6\u0960\u0003\u0002\u0002\u0002\u00f8\u0962\u0003\u0002\u0002",
    "\u0002\u00fa\u096d\u0003\u0002\u0002\u0002\u00fc\u09a2\u0003\u0002\u0002",
    "\u0002\u00fe\u09a4\u0003\u0002\u0002\u0002\u0100\u09af\u0003\u0002\u0002",
    "\u0002\u0102\u0a06\u0003\u0002\u0002\u0002\u0104\u0a14\u0003\u0002\u0002",
    "\u0002\u0106\u0a16\u0003\u0002\u0002\u0002\u0108\u0a27\u0003\u0002\u0002",
    "\u0002\u010a\u0a29\u0003\u0002\u0002\u0002\u010c\u0a43\u0003\u0002\u0002",
    "\u0002\u010e\u0a45\u0003\u0002\u0002\u0002\u0110\u0a50\u0003\u0002\u0002",
    "\u0002\u0112\u0a59\u0003\u0002\u0002\u0002\u0114\u0a64\u0003\u0002\u0002",
    "\u0002\u0116\u0a78\u0003\u0002\u0002\u0002\u0118\u0a7a\u0003\u0002\u0002",
    "\u0002\u011a\u0a85\u0003\u0002\u0002\u0002\u011c\u0a9a\u0003\u0002\u0002",
    "\u0002\u011e\u0a9c\u0003\u0002\u0002\u0002\u0120\u0aa7\u0003\u0002\u0002",
    "\u0002\u0122\u0ab2\u0003\u0002\u0002\u0002\u0124\u0acc\u0003\u0002\u0002",
    "\u0002\u0126\u0ace\u0003\u0002\u0002\u0002\u0128\u0ae7\u0003\u0002\u0002",
    "\u0002\u012a\u0ae9\u0003\u0002\u0002\u0002\u012c\u0af4\u0003\u0002\u0002",
    "\u0002\u012e\u0b0a\u0003\u0002\u0002\u0002\u0130\u0b0c\u0003\u0002\u0002",
    "\u0002\u0132\u0b17\u0003\u0002\u0002\u0002\u0134\u0b25\u0003\u0002\u0002",
    "\u0002\u0136\u0b27\u0003\u0002\u0002\u0002\u0138\u0b35\u0003\u0002\u0002",
    "\u0002\u013a\u0b62\u0003\u0002\u0002\u0002\u013c\u0b83\u0003\u0002\u0002",
    "\u0002\u013e\u0b85\u0003\u0002\u0002\u0002\u0140\u0b8f\u0003\u0002\u0002",
    "\u0002\u0142\u0bde\u0003\u0002\u0002\u0002\u0144\u0bfd\u0003\u0002\u0002",
    "\u0002\u0146\u0c10\u0003\u0002\u0002\u0002\u0148\u0c12\u0003\u0002\u0002",
    "\u0002\u014a\u0c1d\u0003\u0002\u0002\u0002\u014c\u0c2d\u0003\u0002\u0002",
    "\u0002\u014e\u0c2f\u0003\u0002\u0002\u0002\u0150\u0c3c\u0003\u0002\u0002",
    "\u0002\u0152\u0c40\u0003\u0002\u0002\u0002\u0154\u0c42\u0003\u0002\u0002",
    "\u0002\u0156\u0c62\u0003\u0002\u0002\u0002\u0158\u0c64\u0003\u0002\u0002",
    "\u0002\u015a\u0c6e\u0003\u0002\u0002\u0002\u015c\u0c72\u0003\u0002\u0002",
    "\u0002\u015e\u0c86\u0003\u0002\u0002\u0002\u0160\u0c9a\u0003\u0002\u0002",
    "\u0002\u0162\u0ca9\u0003\u0002\u0002\u0002\u0164\u0cad\u0003\u0002\u0002",
    "\u0002\u0166\u0cd1\u0003\u0002\u0002\u0002\u0168\u0cd3\u0003\u0002\u0002",
    "\u0002\u016a\u0cfa\u0003\u0002\u0002\u0002\u016c\u0d1c\u0003\u0002\u0002",
    "\u0002\u016e\u0d1e\u0003\u0002\u0002\u0002\u0170\u0d22\u0003\u0002\u0002",
    "\u0002\u0172\u0d35\u0003\u0002\u0002\u0002\u0174\u0d4a\u0003\u0002\u0002",
    "\u0002\u0176\u0d5b\u0003\u0002\u0002\u0002\u0178\u0d60\u0003\u0002\u0002",
    "\u0002\u017a\u0d62\u0003\u0002\u0002\u0002\u017c\u0d64\u0003\u0002\u0002",
    "\u0002\u017e\u0d66\u0003\u0002\u0002\u0002\u0180\u0d69\u0003\u0002\u0002",
    "\u0002\u0182\u0d6c\u0003\u0002\u0002\u0002\u0184\u0d6f\u0003\u0002\u0002",
    "\u0002\u0186\u0d71\u0003\u0002\u0002\u0002\u0188\u018b\u0007\u00be\u0002",
    "\u0002\u0189\u018b\u0005\u0004\u0003\u0002\u018a\u0188\u0003\u0002\u0002",
    "\u0002\u018a\u0189\u0003\u0002\u0002\u0002\u018b\u018e\u0003\u0002\u0002",
    "\u0002\u018c\u018a\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002",
    "\u0002\u018d\u018f\u0003\u0002\u0002\u0002\u018e\u018c\u0003\u0002\u0002",
    "\u0002\u018f\u0190\u0007\u0002\u0002\u0003\u0190\u0003\u0003\u0002\u0002",
    "\u0002\u0191\u0197\u0005\u011e\u0090\u0002\u0192\u0197\u0005<\u001f",
    "\u0002\u0193\u0197\u0005> \u0002\u0194\u0197\u0005B\"\u0002\u0195\u0197",
    "\u0005\u0090I\u0002\u0196\u0191\u0003\u0002\u0002\u0002\u0196\u0192",
    "\u0003\u0002\u0002\u0002\u0196\u0193\u0003\u0002\u0002\u0002\u0196\u0194",
    "\u0003\u0002\u0002\u0002\u0196\u0195\u0003\u0002\u0002\u0002\u0197\u0005",
    "\u0003\u0002\u0002\u0002\u0198\u019c\b\u0004\u0001\u0002\u0199\u019a",
    "\u0005\b\u0005\u0002\u019a\u019b\b\u0004\u0001\u0002\u019b\u019d\u0003",
    "\u0002\u0002\u0002\u019c\u0199\u0003\u0002\u0002\u0002\u019d\u019e\u0003",
    "\u0002\u0002\u0002\u019e\u019c\u0003\u0002\u0002\u0002\u019e\u019f\u0003",
    "\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a1\b",
    "\u0004\u0001\u0002\u01a1\u0007\u0003\u0002\u0002\u0002\u01a2\u01b1\u0005",
    "<\u001f\u0002\u01a3\u01b1\u0005> \u0002\u01a4\u01b1\u0005B\"\u0002\u01a5",
    "\u01b1\u0005R*\u0002\u01a6\u01b1\u0005\u0168\u00b5\u0002\u01a7\u01b1",
    "\u0005\u00aeX\u0002\u01a8\u01b1\u0005\u00b4[\u0002\u01a9\u01b1\u0005",
    "\u00ba^\u0002\u01aa\u01b1\u0005\u00ceh\u0002\u01ab\u01b1\u0005\u00a8",
    "U\u0002\u01ac\u01b1\u0005\u00a2R\u0002\u01ad\u01b1\u0005\u00e6t\u0002",
    "\u01ae\u01b1\u0005\u00f2z\u0002\u01af\u01b1\u0005\n\u0006\u0002\u01b0",
    "\u01a2\u0003\u0002\u0002\u0002\u01b0\u01a3\u0003\u0002\u0002\u0002\u01b0",
    "\u01a4\u0003\u0002\u0002\u0002\u01b0\u01a5\u0003\u0002\u0002\u0002\u01b0",
    "\u01a6\u0003\u0002\u0002\u0002\u01b0\u01a7\u0003\u0002\u0002\u0002\u01b0",
    "\u01a8\u0003\u0002\u0002\u0002\u01b0\u01a9\u0003\u0002\u0002\u0002\u01b0",
    "\u01aa\u0003\u0002\u0002\u0002\u01b0\u01ab\u0003\u0002\u0002\u0002\u01b0",
    "\u01ac\u0003\u0002\u0002\u0002\u01b0\u01ad\u0003\u0002\u0002\u0002\u01b0",
    "\u01ae\u0003\u0002\u0002\u0002\u01b0\u01af\u0003\u0002\u0002\u0002\u01b1",
    "\t\u0003\u0002\u0002\u0002\u01b2\u01b3\u0007v\u0002\u0002\u01b3\u01b4",
    "\u0007\u00ce\u0002\u0002\u01b4\u01b5\u0007\u00be\u0002\u0002\u01b5\u01b6",
    "\u0007\u00e7\u0002\u0002\u01b6\u01ba\b\u0006\u0001\u0002\u01b7\u01b8",
    "\u0005\f\u0007\u0002\u01b8\u01b9\b\u0006\u0001\u0002\u01b9\u01bb\u0003",
    "\u0002\u0002\u0002\u01ba\u01b7\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003",
    "\u0002\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003",
    "\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002\u01be\u01bf\u0007",
    "\u00e8\u0002\u0002\u01bf\u01c0\b\u0006\u0001\u0002\u01c0\u000b\u0003",
    "\u0002\u0002\u0002\u01c1\u01cb\u0005\u0168\u00b5\u0002\u01c2\u01cb\u0005",
    "\u0084C\u0002\u01c3\u01cb\u0005\u008aF\u0002\u01c4\u01cb\u00050\u0019",
    "\u0002\u01c5\u01cb\u00056\u001c\u0002\u01c6\u01cb\u0005\u00ecw\u0002",
    "\u01c7\u01cb\u0005\u00f8}\u0002\u01c8\u01cb\u0005\u000e\b\u0002\u01c9",
    "\u01cb\u0005\u0148\u00a5\u0002\u01ca\u01c1\u0003\u0002\u0002\u0002\u01ca",
    "\u01c2\u0003\u0002\u0002\u0002\u01ca\u01c3\u0003\u0002\u0002\u0002\u01ca",
    "\u01c4\u0003\u0002\u0002\u0002\u01ca\u01c5\u0003\u0002\u0002\u0002\u01ca",
    "\u01c6\u0003\u0002\u0002\u0002\u01ca\u01c7\u0003\u0002\u0002\u0002\u01ca",
    "\u01c8\u0003\u0002\u0002\u0002\u01ca\u01c9\u0003\u0002\u0002\u0002\u01cb",
    "\r\u0003\u0002\u0002\u0002\u01cc\u01cd\u0007\u0003\u0002\u0002\u01cd",
    "\u01ce\u0007\u00ce\u0002\u0002\u01ce\u01cf\u0007\u00be\u0002\u0002\u01cf",
    "\u01d1\u0007\u00e7\u0002\u0002\u01d0\u01d2\u0005\u0010\t\u0002\u01d1",
    "\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3",
    "\u01d1\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4",
    "\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d6\u0007\u00e8\u0002\u0002\u01d6",
    "\u000f\u0003\u0002\u0002\u0002\u01d7\u01d8\u0007\u0004\u0002\u0002\u01d8",
    "\u01d9\u0007\u00ce\u0002\u0002\u01d9\u01da\u0007\u00be\u0002\u0002\u01da",
    "\u01db\u0007\u00e7\u0002\u0002\u01db\u01df\b\t\u0001\u0002\u01dc\u01dd",
    "\u0005\u0012\n\u0002\u01dd\u01de\b\t\u0001\u0002\u01de\u01e0\u0003\u0002",
    "\u0002\u0002\u01df\u01dc\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002",
    "\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002",
    "\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4\u0007\u00e8",
    "\u0002\u0002\u01e4\u01e5\b\t\u0001\u0002\u01e5\u0011\u0003\u0002\u0002",
    "\u0002\u01e6\u01ec\u0005\u0014\u000b\u0002\u01e7\u01ec\u0005 \u0011",
    "\u0002\u01e8\u01ec\u0005&\u0014\u0002\u01e9\u01ec\u0005\u001a\u000e",
    "\u0002\u01ea\u01ec\u0005,\u0017\u0002\u01eb\u01e6\u0003\u0002\u0002",
    "\u0002\u01eb\u01e7\u0003\u0002\u0002\u0002\u01eb\u01e8\u0003\u0002\u0002",
    "\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002\u01eb\u01ea\u0003\u0002\u0002",
    "\u0002\u01ec\u0013\u0003\u0002\u0002\u0002\u01ed\u01ee\u0007\\\u0002",
    "\u0002\u01ee\u01ef\u0007\u00ce\u0002\u0002\u01ef\u01f0\u0007\u00be\u0002",
    "\u0002\u01f0\u01f2\u0007\u00e7\u0002\u0002\u01f1\u01f3\u0005\u0016\f",
    "\u0002\u01f2\u01f1\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002",
    "\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002",
    "\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f7\u0007\u00e8\u0002",
    "\u0002\u01f7\u0015\u0003\u0002\u0002\u0002\u01f8\u01f9\u0007\u00e5\u0002",
    "\u0002\u01f9\u01fa\u0007\u00ce\u0002\u0002\u01fa\u01fb\u0005\u0166\u00b4",
    "\u0002\u01fb\u01fc\u0007\u00be\u0002\u0002\u01fc\u021a\u0003\u0002\u0002",
    "\u0002\u01fd\u01fe\u0007\u00e5\u0002\u0002\u01fe\u01ff\u0007\u00ce\u0002",
    "\u0002\u01ff\u0200\u0007\u00d2\u0002\u0002\u0200\u0201\u0007\u00e5\u0002",
    "\u0002\u0201\u021a\u0007\u00d3\u0002\u0002\u0202\u0203\u0007\u00e5\u0002",
    "\u0002\u0203\u0204\u0007\u00ce\u0002\u0002\u0204\u0205\u0007\u00d2\u0002",
    "\u0002\u0205\u0206\u0007\u00e5\u0002\u0002\u0206\u0207\u0007\u00cd\u0002",
    "\u0002\u0207\u0208\u0007\u00e5\u0002\u0002\u0208\u021a\u0007\u00d3\u0002",
    "\u0002\u0209\u020a\u0007\u00e5\u0002\u0002\u020a\u020b\u0007\u00ce\u0002",
    "\u0002\u020b\u020c\u0007\u00d2\u0002\u0002\u020c\u020d\u0007\u00e5\u0002",
    "\u0002\u020d\u020e\u0007\u00cd\u0002\u0002\u020e\u020f\u0007\u00e5\u0002",
    "\u0002\u020f\u0210\u0007\u00cd\u0002\u0002\u0210\u0211\u0007\u00e5\u0002",
    "\u0002\u0211\u021a\u0007\u00d3\u0002\u0002\u0212\u0213\u0007\u00e5\u0002",
    "\u0002\u0213\u0214\u0007\u00ce\u0002\u0002\u0214\u0215\u0007\u00be\u0002",
    "\u0002\u0215\u0216\u0007\u00e7\u0002\u0002\u0216\u0217\u0005\u0018\r",
    "\u0002\u0217\u0218\u0007\u00e8\u0002\u0002\u0218\u021a\u0003\u0002\u0002",
    "\u0002\u0219\u01f8\u0003\u0002\u0002\u0002\u0219\u01fd\u0003\u0002\u0002",
    "\u0002\u0219\u0202\u0003\u0002\u0002\u0002\u0219\u0209\u0003\u0002\u0002",
    "\u0002\u0219\u0212\u0003\u0002\u0002\u0002\u021a\u0017\u0003\u0002\u0002",
    "\u0002\u021b\u021c\u0007\u0005\u0002\u0002\u021c\u021d\u0007\u00ce\u0002",
    "\u0002\u021d\u021e\u0007\u00e5\u0002\u0002\u021e\u0237\u0007\u00be\u0002",
    "\u0002\u021f\u0220\u0007\u0005\u0002\u0002\u0220\u0221\u0007\u00ce\u0002",
    "\u0002\u0221\u0222\u0007\u00d2\u0002\u0002\u0222\u0223\u0007\u00e5\u0002",
    "\u0002\u0223\u0224\u0007\u00cd\u0002\u0002\u0224\u0225\u0007\u00e5\u0002",
    "\u0002\u0225\u0226\u0007\u00d3\u0002\u0002\u0226\u0237\u0007\u00be\u0002",
    "\u0002\u0227\u0228\u0007\u0005\u0002\u0002\u0228\u0229\u0007\u00ce\u0002",
    "\u0002\u0229\u022a\u0007\u00d2\u0002\u0002\u022a\u022b\u0007\u00e5\u0002",
    "\u0002\u022b\u022c\u0007\u00cd\u0002\u0002\u022c\u022d\u0007\u00e5\u0002",
    "\u0002\u022d\u022e\u0007\u00cd\u0002\u0002\u022e\u022f\u0007\u00e5\u0002",
    "\u0002\u022f\u0230\u0007\u00d3\u0002\u0002\u0230\u0237\u0007\u00be\u0002",
    "\u0002\u0231\u0232\u0007\u0080\u0002\u0002\u0232\u0233\u0007\u00ce\u0002",
    "\u0002\u0233\u0234\u0005\u0166\u00b4\u0002\u0234\u0235\u0007\u00be\u0002",
    "\u0002\u0235\u0237\u0003\u0002\u0002\u0002\u0236\u021b\u0003\u0002\u0002",
    "\u0002\u0236\u021f\u0003\u0002\u0002\u0002\u0236\u0227\u0003\u0002\u0002",
    "\u0002\u0236\u0231\u0003\u0002\u0002\u0002\u0237\u0019\u0003\u0002\u0002",
    "\u0002\u0238\u0239\u0007\u0086\u0002\u0002\u0239\u023a\u0007\u00ce\u0002",
    "\u0002\u023a\u023b\u0007\u00be\u0002\u0002\u023b\u023d\u0007\u00e7\u0002",
    "\u0002\u023c\u023e\u0005\u001c\u000f\u0002\u023d\u023c\u0003\u0002\u0002",
    "\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u023d\u0003\u0002\u0002",
    "\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002",
    "\u0002\u0241\u0242\u0007\u00e8\u0002\u0002\u0242\u001b\u0003\u0002\u0002",
    "\u0002\u0243\u0244\u0007\u00e5\u0002\u0002\u0244\u0245\u0007\u00ce\u0002",
    "\u0002\u0245\u0246\u0005\u0166\u00b4\u0002\u0246\u0247\u0007\u00be\u0002",
    "\u0002\u0247\u0265\u0003\u0002\u0002\u0002\u0248\u0249\u0007\u00e5\u0002",
    "\u0002\u0249\u024a\u0007\u00ce\u0002\u0002\u024a\u024b\u0007\u00d2\u0002",
    "\u0002\u024b\u024c\u0007\u00e5\u0002\u0002\u024c\u0265\u0007\u00d3\u0002",
    "\u0002\u024d\u024e\u0007\u00e5\u0002\u0002\u024e\u024f\u0007\u00ce\u0002",
    "\u0002\u024f\u0250\u0007\u00d2\u0002\u0002\u0250\u0251\u0007\u00e5\u0002",
    "\u0002\u0251\u0252\u0007\u00cd\u0002\u0002\u0252\u0253\u0007\u00e5\u0002",
    "\u0002\u0253\u0265\u0007\u00d3\u0002\u0002\u0254\u0255\u0007\u00e5\u0002",
    "\u0002\u0255\u0256\u0007\u00ce\u0002\u0002\u0256\u0257\u0007\u00d2\u0002",
    "\u0002\u0257\u0258\u0007\u00e5\u0002\u0002\u0258\u0259\u0007\u00cd\u0002",
    "\u0002\u0259\u025a\u0007\u00e5\u0002\u0002\u025a\u025b\u0007\u00cd\u0002",
    "\u0002\u025b\u025c\u0007\u00e5\u0002\u0002\u025c\u0265\u0007\u00d3\u0002",
    "\u0002\u025d\u025e\u0007\u00e5\u0002\u0002\u025e\u025f\u0007\u00ce\u0002",
    "\u0002\u025f\u0260\u0007\u00be\u0002\u0002\u0260\u0261\u0007\u00e7\u0002",
    "\u0002\u0261\u0262\u0005\u001e\u0010\u0002\u0262\u0263\u0007\u00e8\u0002",
    "\u0002\u0263\u0265\u0003\u0002\u0002\u0002\u0264\u0243\u0003\u0002\u0002",
    "\u0002\u0264\u0248\u0003\u0002\u0002\u0002\u0264\u024d\u0003\u0002\u0002",
    "\u0002\u0264\u0254\u0003\u0002\u0002\u0002\u0264\u025d\u0003\u0002\u0002",
    "\u0002\u0265\u001d\u0003\u0002\u0002\u0002\u0266\u0267\u0007\u0005\u0002",
    "\u0002\u0267\u0268\u0007\u00ce\u0002\u0002\u0268\u0269\u0007\u00e5\u0002",
    "\u0002\u0269\u0282\u0007\u00be\u0002\u0002\u026a\u026b\u0007\u0005\u0002",
    "\u0002\u026b\u026c\u0007\u00ce\u0002\u0002\u026c\u026d\u0007\u00d2\u0002",
    "\u0002\u026d\u026e\u0007\u00e5\u0002\u0002\u026e\u026f\u0007\u00cd\u0002",
    "\u0002\u026f\u0270\u0007\u00e5\u0002\u0002\u0270\u0271\u0007\u00d3\u0002",
    "\u0002\u0271\u0282\u0007\u00be\u0002\u0002\u0272\u0273\u0007\u0005\u0002",
    "\u0002\u0273\u0274\u0007\u00ce\u0002\u0002\u0274\u0275\u0007\u00d2\u0002",
    "\u0002\u0275\u0276\u0007\u00e5\u0002\u0002\u0276\u0277\u0007\u00cd\u0002",
    "\u0002\u0277\u0278\u0007\u00e5\u0002\u0002\u0278\u0279\u0007\u00cd\u0002",
    "\u0002\u0279\u027a\u0007\u00e5\u0002\u0002\u027a\u027b\u0007\u00d3\u0002",
    "\u0002\u027b\u0282\u0007\u00be\u0002\u0002\u027c\u027d\u0007\u0080\u0002",
    "\u0002\u027d\u027e\u0007\u00ce\u0002\u0002\u027e\u027f\u0005\u0166\u00b4",
    "\u0002\u027f\u0280\u0007\u00be\u0002\u0002\u0280\u0282\u0003\u0002\u0002",
    "\u0002\u0281\u0266\u0003\u0002\u0002\u0002\u0281\u026a\u0003\u0002\u0002",
    "\u0002\u0281\u0272\u0003\u0002\u0002\u0002\u0281\u027c\u0003\u0002\u0002",
    "\u0002\u0282\u001f\u0003\u0002\u0002\u0002\u0283\u0284\u0007\u008e\u0002",
    "\u0002\u0284\u0285\u0007\u00ce\u0002\u0002\u0285\u0286\u0007\u00be\u0002",
    "\u0002\u0286\u0288\u0007\u00e7\u0002\u0002\u0287\u0289\u0005\"\u0012",
    "\u0002\u0288\u0287\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002",
    "\u0002\u028a\u0288\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002",
    "\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u028d\u0007\u00e8\u0002",
    "\u0002\u028d!\u0003\u0002\u0002\u0002\u028e\u028f\u0007\u00e5\u0002",
    "\u0002\u028f\u0290\u0007\u00ce\u0002\u0002\u0290\u0291\u0007\u00d2\u0002",
    "\u0002\u0291\u0292\u0007\u00e5\u0002\u0002\u0292\u0293\u0007\u00cd\u0002",
    "\u0002\u0293\u0294\u0007\u00e5\u0002\u0002\u0294\u029d\u0007\u00d3\u0002",
    "\u0002\u0295\u0296\u0007\u00e5\u0002\u0002\u0296\u0297\u0007\u00ce\u0002",
    "\u0002\u0297\u0298\u0007\u00be\u0002\u0002\u0298\u0299\u0007\u00e7\u0002",
    "\u0002\u0299\u029a\u0005$\u0013\u0002\u029a\u029b\u0007\u00e8\u0002",
    "\u0002\u029b\u029d\u0003\u0002\u0002\u0002\u029c\u028e\u0003\u0002\u0002",
    "\u0002\u029c\u0295\u0003\u0002\u0002\u0002\u029d#\u0003\u0002\u0002",
    "\u0002\u029e\u029f\u0007\u0005\u0002\u0002\u029f\u02a0\u0007\u00ce\u0002",
    "\u0002\u02a0\u02a1\u0007\u00d2\u0002\u0002\u02a1\u02a2\u0007\u00e5\u0002",
    "\u0002\u02a2\u02a3\u0007\u00cd\u0002\u0002\u02a3\u02a4\u0007\u00e5\u0002",
    "\u0002\u02a4\u02a5\u0007\u00d3\u0002\u0002\u02a5\u02bf\u0007\u00be\u0002",
    "\u0002\u02a6\u02a7\u0007\\\u0002\u0002\u02a7\u02a8\u0007\u00ce\u0002",
    "\u0002\u02a8\u02ac\u0007\u00e7\u0002\u0002\u02a9\u02aa\u0007\u00e5\u0002",
    "\u0002\u02aa\u02ab\u0007\u00ce\u0002\u0002\u02ab\u02ad\u0005\u0166\u00b4",
    "\u0002\u02ac\u02a9\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003\u0002\u0002",
    "\u0002\u02ae\u02ac\u0003\u0002\u0002\u0002\u02ae\u02af\u0003\u0002\u0002",
    "\u0002\u02af\u02b0\u0003\u0002\u0002\u0002\u02b0\u02b1\u0007\u00e8\u0002",
    "\u0002\u02b1\u02bf\u0003\u0002\u0002\u0002\u02b2\u02b3\u0007\u0086\u0002",
    "\u0002\u02b3\u02b4\u0007\u00ce\u0002\u0002\u02b4\u02b8\u0007\u00e7\u0002",
    "\u0002\u02b5\u02b6\u0007\u00e5\u0002\u0002\u02b6\u02b7\u0007\u00ce\u0002",
    "\u0002\u02b7\u02b9\u0005\u0166\u00b4\u0002\u02b8\u02b5\u0003\u0002\u0002",
    "\u0002\u02b9\u02ba\u0003\u0002\u0002\u0002\u02ba\u02b8\u0003\u0002\u0002",
    "\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002",
    "\u0002\u02bc\u02bd\u0007\u00e8\u0002\u0002\u02bd\u02bf\u0003\u0002\u0002",
    "\u0002\u02be\u029e\u0003\u0002\u0002\u0002\u02be\u02a6\u0003\u0002\u0002",
    "\u0002\u02be\u02b2\u0003\u0002\u0002\u0002\u02bf%\u0003\u0002\u0002",
    "\u0002\u02c0\u02c1\u0007\u0093\u0002\u0002\u02c1\u02c2\u0007\u00ce\u0002",
    "\u0002\u02c2\u02c3\u0007\u00be\u0002\u0002\u02c3\u02c5\u0007\u00e7\u0002",
    "\u0002\u02c4\u02c6\u0005\"\u0012\u0002\u02c5\u02c4\u0003\u0002\u0002",
    "\u0002\u02c6\u02c7\u0003\u0002\u0002\u0002\u02c7\u02c5\u0003\u0002\u0002",
    "\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002",
    "\u0002\u02c9\u02ca\u0007\u00e8\u0002\u0002\u02ca\'\u0003\u0002\u0002",
    "\u0002\u02cb\u02cc\u0007\u00e5\u0002\u0002\u02cc\u02cd\u0007\u00ce\u0002",
    "\u0002\u02cd\u02ce\u0007\u00d2\u0002\u0002\u02ce\u02cf\u0007\u00e5\u0002",
    "\u0002\u02cf\u02d0\u0007\u00cd\u0002\u0002\u02d0\u02d1\u0007\u00e5\u0002",
    "\u0002\u02d1\u02da\u0007\u00d3\u0002\u0002\u02d2\u02d3\u0007\u00e5\u0002",
    "\u0002\u02d3\u02d4\u0007\u00ce\u0002\u0002\u02d4\u02d5\u0007\u00be\u0002",
    "\u0002\u02d5\u02d6\u0007\u00e7\u0002\u0002\u02d6\u02d7\u0005$\u0013",
    "\u0002\u02d7\u02d8\u0007\u00e8\u0002\u0002\u02d8\u02da\u0003\u0002\u0002",
    "\u0002\u02d9\u02cb\u0003\u0002\u0002\u0002\u02d9\u02d2\u0003\u0002\u0002",
    "\u0002\u02da)\u0003\u0002\u0002\u0002\u02db\u02dc\u0007\u0005\u0002",
    "\u0002\u02dc\u02dd\u0007\u00ce\u0002\u0002\u02dd\u02de\u0007\u00d2\u0002",
    "\u0002\u02de\u02df\u0007\u00e5\u0002\u0002\u02df\u02e0\u0007\u00cd\u0002",
    "\u0002\u02e0\u02e1\u0007\u00e5\u0002\u0002\u02e1\u02e2\u0007\u00d3\u0002",
    "\u0002\u02e2\u02fc\u0007\u00be\u0002\u0002\u02e3\u02e4\u0007\\\u0002",
    "\u0002\u02e4\u02e5\u0007\u00ce\u0002\u0002\u02e5\u02e9\u0007\u00e7\u0002",
    "\u0002\u02e6\u02e7\u0007\u00e5\u0002\u0002\u02e7\u02e8\u0007\u00ce\u0002",
    "\u0002\u02e8\u02ea\u0005\u0166\u00b4\u0002\u02e9\u02e6\u0003\u0002\u0002",
    "\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02eb\u02e9\u0003\u0002\u0002",
    "\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002",
    "\u0002\u02ed\u02ee\u0007\u00e8\u0002\u0002\u02ee\u02fc\u0003\u0002\u0002",
    "\u0002\u02ef\u02f0\u0007\u0086\u0002\u0002\u02f0\u02f1\u0007\u00ce\u0002",
    "\u0002\u02f1\u02f5\u0007\u00e7\u0002\u0002\u02f2\u02f3\u0007\u00e5\u0002",
    "\u0002\u02f3\u02f4\u0007\u00ce\u0002\u0002\u02f4\u02f6\u0005\u0166\u00b4",
    "\u0002\u02f5\u02f2\u0003\u0002\u0002\u0002\u02f6\u02f7\u0003\u0002\u0002",
    "\u0002\u02f7\u02f5\u0003\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002\u0002",
    "\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fa\u0007\u00e8\u0002",
    "\u0002\u02fa\u02fc\u0003\u0002\u0002\u0002\u02fb\u02db\u0003\u0002\u0002",
    "\u0002\u02fb\u02e3\u0003\u0002\u0002\u0002\u02fb\u02ef\u0003\u0002\u0002",
    "\u0002\u02fc+\u0003\u0002\u0002\u0002\u02fd\u02fe\u0007\u008a\u0002",
    "\u0002\u02fe\u02ff\u0007\u00ce\u0002\u0002\u02ff\u0300\u0007\u00be\u0002",
    "\u0002\u0300\u0301\u0007\u00e7\u0002\u0002\u0301\u0302\u0005.\u0018",
    "\u0002\u0302\u0303\u0007\u00e8\u0002\u0002\u0303-\u0003\u0002\u0002",
    "\u0002\u0304\u0305\u0007\u00e5\u0002\u0002\u0305\u0306\u0007\u00ce\u0002",
    "\u0002\u0306\u0307\u0007\u00be\u0002\u0002\u0307\u030b\u0007\u00e7\u0002",
    "\u0002\u0308\u0309\u0007\u00e5\u0002\u0002\u0309\u030a\u0007\u00ce\u0002",
    "\u0002\u030a\u030c\u0007\u00e5\u0002\u0002\u030b\u0308\u0003\u0002\u0002",
    "\u0002\u030c\u030d\u0003\u0002\u0002\u0002\u030d\u030b\u0003\u0002\u0002",
    "\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030e\u030f\u0003\u0002\u0002",
    "\u0002\u030f\u0310\u0007\u00e8\u0002\u0002\u0310/\u0003\u0002\u0002",
    "\u0002\u0311\u0312\u0007\u0006\u0002\u0002\u0312\u0313\u0007\u00ce\u0002",
    "\u0002\u0313\u0314\u0007\u00be\u0002\u0002\u0314\u0316\u0007\u00e7\u0002",
    "\u0002\u0315\u0317\u00052\u001a\u0002\u0316\u0315\u0003\u0002\u0002",
    "\u0002\u0317\u0318\u0003\u0002\u0002\u0002\u0318\u0316\u0003\u0002\u0002",
    "\u0002\u0318\u0319\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002\u0002",
    "\u0002\u031a\u031b\u0007\u00e8\u0002\u0002\u031b1\u0003\u0002\u0002",
    "\u0002\u031c\u031d\u0007\u00e5\u0002\u0002\u031d\u031e\u0007\u00ce\u0002",
    "\u0002\u031e\u031f\u0007\u00be\u0002\u0002\u031f\u0320\u0007\u00e7\u0002",
    "\u0002\u0320\u0324\b\u001a\u0001\u0002\u0321\u0322\u00054\u001b\u0002",
    "\u0322\u0323\b\u001a\u0001\u0002\u0323\u0325\u0003\u0002\u0002\u0002",
    "\u0324\u0321\u0003\u0002\u0002\u0002\u0325\u0326\u0003\u0002\u0002\u0002",
    "\u0326\u0324\u0003\u0002\u0002\u0002\u0326\u0327\u0003\u0002\u0002\u0002",
    "\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u0329\u0007\u00e8\u0002\u0002",
    "\u0329\u032a\b\u001a\u0001\u0002\u032a3\u0003\u0002\u0002\u0002\u032b",
    "\u032c\u0007]\u0002\u0002\u032c\u032d\u0007\u00ce\u0002\u0002\u032d",
    "\u032e\u0007\u00e5\u0002\u0002\u032e\u035b\u0007\u00be\u0002\u0002\u032f",
    "\u035b\u0005\u0168\u00b5\u0002\u0330\u0331\u0007\u00a4\u0002\u0002\u0331",
    "\u0332\u0007\u00ce\u0002\u0002\u0332\u0333\u0007\u00d2\u0002\u0002\u0333",
    "\u0338\u0005\u0172\u00ba\u0002\u0334\u0335\u0007\u00cd\u0002\u0002\u0335",
    "\u0337\u0005\u0172\u00ba\u0002\u0336\u0334\u0003\u0002\u0002\u0002\u0337",
    "\u033a\u0003\u0002\u0002\u0002\u0338\u0336\u0003\u0002\u0002\u0002\u0338",
    "\u0339\u0003\u0002\u0002\u0002\u0339\u033b\u0003\u0002\u0002\u0002\u033a",
    "\u0338\u0003\u0002\u0002\u0002\u033b\u033c\u0007\u00d3\u0002\u0002\u033c",
    "\u033d\u0007\u00be\u0002\u0002\u033d\u035b\u0003\u0002\u0002\u0002\u033e",
    "\u033f\u0007\u00a4\u0002\u0002\u033f\u0340\u0007\u00ce\u0002\u0002\u0340",
    "\u0341\u0007\u00be\u0002\u0002\u0341\u0348\u0007\u00e7\u0002\u0002\u0342",
    "\u0343\u0007\u00d8\u0002\u0002\u0343\u0344\u0007\u00e7\u0002\u0002\u0344",
    "\u0345\u0005\u0172\u00ba\u0002\u0345\u0346\u0007\u00be\u0002\u0002\u0346",
    "\u0347\u0007\u00e8\u0002\u0002\u0347\u0349\u0003\u0002\u0002\u0002\u0348",
    "\u0342\u0003\u0002\u0002\u0002\u0349\u034a\u0003\u0002\u0002\u0002\u034a",
    "\u0348\u0003\u0002\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b",
    "\u034c\u0003\u0002\u0002\u0002\u034c\u034d\u0007\u00e8\u0002\u0002\u034d",
    "\u035b\u0003\u0002\u0002\u0002\u034e\u035b\u0005\u009cO\u0002\u034f",
    "\u035b\u0005b2\u0002\u0350\u035b\u0005n8\u0002\u0351\u035b\u0005\\/",
    "\u0002\u0352\u035b\u0005x=\u0002\u0353\u035b\u0005\u00dan\u0002\u0354",
    "\u035b\u0005V,\u0002\u0355\u035b\u0005\u0106\u0084\u0002\u0356\u0357",
    "\u0007t\u0002\u0002\u0357\u0358\u0007\u00ce\u0002\u0002\u0358\u0359",
    "\u0007\u00e5\u0002\u0002\u0359\u035b\u0007\u00be\u0002\u0002\u035a\u032b",
    "\u0003\u0002\u0002\u0002\u035a\u032f\u0003\u0002\u0002\u0002\u035a\u0330",
    "\u0003\u0002\u0002\u0002\u035a\u033e\u0003\u0002\u0002\u0002\u035a\u034e",
    "\u0003\u0002\u0002\u0002\u035a\u034f\u0003\u0002\u0002\u0002\u035a\u0350",
    "\u0003\u0002\u0002\u0002\u035a\u0351\u0003\u0002\u0002\u0002\u035a\u0352",
    "\u0003\u0002\u0002\u0002\u035a\u0353\u0003\u0002\u0002\u0002\u035a\u0354",
    "\u0003\u0002\u0002\u0002\u035a\u0355\u0003\u0002\u0002\u0002\u035a\u0356",
    "\u0003\u0002\u0002\u0002\u035b5\u0003\u0002\u0002\u0002\u035c\u035d",
    "\u0007w\u0002\u0002\u035d\u035e\u0007\u00ce\u0002\u0002\u035e\u035f",
    "\u0007\u00be\u0002\u0002\u035f\u0361\u0007\u00e7\u0002\u0002\u0360\u0362",
    "\u00058\u001d\u0002\u0361\u0360\u0003\u0002\u0002\u0002\u0362\u0363",
    "\u0003\u0002\u0002\u0002\u0363\u0361\u0003\u0002\u0002\u0002\u0363\u0364",
    "\u0003\u0002\u0002\u0002\u0364\u0365\u0003\u0002\u0002\u0002\u0365\u0366",
    "\u0007\u00e8\u0002\u0002\u03667\u0003\u0002\u0002\u0002\u0367\u0368",
    "\u0007\u00e5\u0002\u0002\u0368\u0369\u0007\u00ce\u0002\u0002\u0369\u036a",
    "\u0007\u00be\u0002\u0002\u036a\u036b\u0007\u00e7\u0002\u0002\u036b\u036f",
    "\b\u001d\u0001\u0002\u036c\u036d\u0005:\u001e\u0002\u036d\u036e\b\u001d",
    "\u0001\u0002\u036e\u0370\u0003\u0002\u0002\u0002\u036f\u036c\u0003\u0002",
    "\u0002\u0002\u0370\u0371\u0003\u0002\u0002\u0002\u0371\u036f\u0003\u0002",
    "\u0002\u0002\u0371\u0372\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002",
    "\u0002\u0002\u0373\u0374\u0007\u00e8\u0002\u0002\u0374\u0375\b\u001d",
    "\u0001\u0002\u03759\u0003\u0002\u0002\u0002\u0376\u0377\u0007]\u0002",
    "\u0002\u0377\u0378\u0007\u00ce\u0002\u0002\u0378\u0379\u0007\u00e5\u0002",
    "\u0002\u0379\u0384\u0007\u00be\u0002\u0002\u037a\u0384\u0005\u0168\u00b5",
    "\u0002\u037b\u0384\u0005\u009cO\u0002\u037c\u0384\u0005b2\u0002\u037d",
    "\u0384\u0005n8\u0002\u037e\u0384\u0005\u00dan\u0002\u037f\u0380\u0007",
    "t\u0002\u0002\u0380\u0381\u0007\u00ce\u0002\u0002\u0381\u0382\u0007",
    "\u00e5\u0002\u0002\u0382\u0384\u0007\u00be\u0002\u0002\u0383\u0376\u0003",
    "\u0002\u0002\u0002\u0383\u037a\u0003\u0002\u0002\u0002\u0383\u037b\u0003",
    "\u0002\u0002\u0002\u0383\u037c\u0003\u0002\u0002\u0002\u0383\u037d\u0003",
    "\u0002\u0002\u0002\u0383\u037e\u0003\u0002\u0002\u0002\u0383\u037f\u0003",
    "\u0002\u0002\u0002\u0384;\u0003\u0002\u0002\u0002\u0385\u0386\u0007",
    "Q\u0002\u0002\u0386\u0387\u0007\u00ce\u0002\u0002\u0387\u0388\t\u0002",
    "\u0002\u0002\u0388=\u0003\u0002\u0002\u0002\u0389\u038a\u0007S\u0002",
    "\u0002\u038a\u038b\u0007\u00ce\u0002\u0002\u038b\u038c\u0007\u00be\u0002",
    "\u0002\u038c\u038d\b \u0001\u0002\u038d\u0392\u0007\u00e7\u0002\u0002",
    "\u038e\u038f\u0005@!\u0002\u038f\u0390\u0007\u00be\u0002\u0002\u0390",
    "\u0391\b \u0001\u0002\u0391\u0393\u0003\u0002\u0002\u0002\u0392\u038e",
    "\u0003\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002\u0002\u0394\u0392",
    "\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u0396",
    "\u0003\u0002\u0002\u0002\u0396\u0397\u0007\u00e8\u0002\u0002\u0397\u0398",
    "\b \u0001\u0002\u0398?\u0003\u0002\u0002\u0002\u0399\u039a\u0007T\u0002",
    "\u0002\u039a\u039b\u0007\u00ce\u0002\u0002\u039b\u03a6\u0005\u0172\u00ba",
    "\u0002\u039c\u039d\u0007U\u0002\u0002\u039d\u039e\u0007\u00ce\u0002",
    "\u0002\u039e\u03a6\u0005\u0172\u00ba\u0002\u039f\u03a0\u0007V\u0002",
    "\u0002\u03a0\u03a1\u0007\u00ce\u0002\u0002\u03a1\u03a6\u0007\u00e0\u0002",
    "\u0002\u03a2\u03a3\u0007\u00e5\u0002\u0002\u03a3\u03a4\u0007\u00ce\u0002",
    "\u0002\u03a4\u03a6\u0005\u0166\u00b4\u0002\u03a5\u0399\u0003\u0002\u0002",
    "\u0002\u03a5\u039c\u0003\u0002\u0002\u0002\u03a5\u039f\u0003\u0002\u0002",
    "\u0002\u03a5\u03a2\u0003\u0002\u0002\u0002\u03a6A\u0003\u0002\u0002",
    "\u0002\u03a7\u03a8\u0007a\u0002\u0002\u03a8\u03a9\u0007\u00ce\u0002",
    "\u0002\u03a9\u03aa\u0007\u00be\u0002\u0002\u03aa\u03ac\u0007\u00e7\u0002",
    "\u0002\u03ab\u03ad\u0005D#\u0002\u03ac\u03ab\u0003\u0002\u0002\u0002",
    "\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002",
    "\u03ae\u03af\u0003\u0002\u0002\u0002\u03af\u03b0\u0003\u0002\u0002\u0002",
    "\u03b0\u03b1\u0007\u00e8\u0002\u0002\u03b1C\u0003\u0002\u0002\u0002",
    "\u03b2\u03b5\u0005F$\u0002\u03b3\u03b5\u0005H%\u0002\u03b4\u03b2\u0003",
    "\u0002\u0002\u0002\u03b4\u03b3\u0003\u0002\u0002\u0002\u03b5E\u0003",
    "\u0002\u0002\u0002\u03b6\u03b7\u0007\u00e5\u0002\u0002\u03b7\u03b8\u0007",
    "\u00ce\u0002\u0002\u03b8\u03b9\u0007\u00e5\u0002\u0002\u03b9\u03ba\u0007",
    "\u00be\u0002\u0002\u03baG\u0003\u0002\u0002\u0002\u03bb\u03bc\u0007",
    "\u00e5\u0002\u0002\u03bc\u03bd\u0007\u00ce\u0002\u0002\u03bd\u03be\u0007",
    "\u00be\u0002\u0002\u03be\u03bf\b%\u0001\u0002\u03bf\u03c3\u0007\u00e7",
    "\u0002\u0002\u03c0\u03c1\u0005J&\u0002\u03c1\u03c2\b%\u0001\u0002\u03c2",
    "\u03c4\u0003\u0002\u0002\u0002\u03c3\u03c0\u0003\u0002\u0002\u0002\u03c4",
    "\u03c5\u0003\u0002\u0002\u0002\u03c5\u03c3\u0003\u0002\u0002\u0002\u03c5",
    "\u03c6\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7",
    "\u03c8\u0007\u00e8\u0002\u0002\u03c8\u03c9\b%\u0001\u0002\u03c9I\u0003",
    "\u0002\u0002\u0002\u03ca\u03ce\u0005L\'\u0002\u03cb\u03ce\u0005\u0168",
    "\u00b5\u0002\u03cc\u03ce\u0005N(\u0002\u03cd\u03ca\u0003\u0002\u0002",
    "\u0002\u03cd\u03cb\u0003\u0002\u0002\u0002\u03cd\u03cc\u0003\u0002\u0002",
    "\u0002\u03ceK\u0003\u0002\u0002\u0002\u03cf\u03d0\u0007b\u0002\u0002",
    "\u03d0\u03d1\u0007\u00ce\u0002\u0002\u03d1\u03d2\u0005\u0172\u00ba\u0002",
    "\u03d2\u03d3\u0007\u00be\u0002\u0002\u03d3M\u0003\u0002\u0002\u0002",
    "\u03d4\u03d5\u0007d\u0002\u0002\u03d5\u03d6\u0007\u00ce\u0002\u0002",
    "\u03d6\u03d7\u0007\u00dc\u0002\u0002\u03d7\u03dc\u0005P)\u0002\u03d8",
    "\u03d9\u0007\u00cd\u0002\u0002\u03d9\u03db\u0005P)\u0002\u03da\u03d8",
    "\u0003\u0002\u0002\u0002\u03db\u03de\u0003\u0002\u0002\u0002\u03dc\u03da",
    "\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03df",
    "\u0003\u0002\u0002\u0002\u03de\u03dc\u0003\u0002\u0002\u0002\u03df\u03e0",
    "\u0007\u00dd\u0002\u0002\u03e0\u03e1\u0007\u00be\u0002\u0002\u03e1\u03f2",
    "\u0003\u0002\u0002\u0002\u03e2\u03e3\u0007d\u0002\u0002\u03e3\u03e4",
    "\u0007\u00ce\u0002\u0002\u03e4\u03e5\u0007\u00be\u0002\u0002\u03e5\u03e6",
    "\b(\u0001\u0002\u03e6\u03ea\u0007\u00e7\u0002\u0002\u03e7\u03e8\u0005",
    "P)\u0002\u03e8\u03e9\b(\u0001\u0002\u03e9\u03eb\u0003\u0002\u0002\u0002",
    "\u03ea\u03e7\u0003\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002",
    "\u03ec\u03ea\u0003\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002\u0002\u0002",
    "\u03ed\u03ee\u0003\u0002\u0002\u0002\u03ee\u03ef\u0007\u00e8\u0002\u0002",
    "\u03ef\u03f0\b(\u0001\u0002\u03f0\u03f2\u0003\u0002\u0002\u0002\u03f1",
    "\u03d4\u0003\u0002\u0002\u0002\u03f1\u03e2\u0003\u0002\u0002\u0002\u03f2",
    "O\u0003\u0002\u0002\u0002\u03f3\u03f4\u0007e\u0002\u0002\u03f4\u03f5",
    "\u0007\u00ce\u0002\u0002\u03f5\u03f6\u0007\u00e5\u0002\u0002\u03f6\u0404",
    "\u0007\u00be\u0002\u0002\u03f7\u03f8\u0007f\u0002\u0002\u03f8\u03f9",
    "\u0007\u00ce\u0002\u0002\u03f9\u03fa\u0007\u00e5\u0002\u0002\u03fa\u0404",
    "\u0007\u00be\u0002\u0002\u03fb\u03fc\u0007g\u0002\u0002\u03fc\u03fd",
    "\u0007\u00ce\u0002\u0002\u03fd\u03fe\u0007\u00e5\u0002\u0002\u03fe\u0404",
    "\u0007\u00be\u0002\u0002\u03ff\u0400\u0007h\u0002\u0002\u0400\u0401",
    "\u0007\u00ce\u0002\u0002\u0401\u0402\u0007\u00e5\u0002\u0002\u0402\u0404",
    "\u0007\u00be\u0002\u0002\u0403\u03f3\u0003\u0002\u0002\u0002\u0403\u03f7",
    "\u0003\u0002\u0002\u0002\u0403\u03fb\u0003\u0002\u0002\u0002\u0403\u03ff",
    "\u0003\u0002\u0002\u0002\u0404Q\u0003\u0002\u0002\u0002\u0405\u0406",
    "\u0007i\u0002\u0002\u0406\u0407\u0007\u00ce\u0002\u0002\u0407\u0408",
    "\u0007\u00be\u0002\u0002\u0408\u040a\u0007\u00e7\u0002\u0002\u0409\u040b",
    "\u0005T+\u0002\u040a\u0409\u0003\u0002\u0002\u0002\u040b\u040c\u0003",
    "\u0002\u0002\u0002\u040c\u040a\u0003\u0002\u0002\u0002\u040c\u040d\u0003",
    "\u0002\u0002\u0002\u040d\u040e\u0003\u0002\u0002\u0002\u040e\u040f\u0007",
    "\u00e8\u0002\u0002\u040fS\u0003\u0002\u0002\u0002\u0410\u0411\u0007",
    "\u00d8\u0002\u0002\u0411\u0412\u0007\u00e7\u0002\u0002\u0412\u0413\u0005",
    "\u0172\u00ba\u0002\u0413\u0414\u0007\u00be\u0002\u0002\u0414\u0415\u0007",
    "\u00e8\u0002\u0002\u0415\u0431\u0003\u0002\u0002\u0002\u0416\u0417\u0007",
    "\u00d8\u0002\u0002\u0417\u0418\u0007\u00e7\u0002\u0002\u0418\u0419\u0007",
    "\u00e5\u0002\u0002\u0419\u041a\u0007\u00ce\u0002\u0002\u041a\u041b\u0005",
    "\u0172\u00ba\u0002\u041b\u041c\u0007\u00be\u0002\u0002\u041c\u041d\u0007",
    "\u00e8\u0002\u0002\u041d\u0431\u0003\u0002\u0002\u0002\u041e\u041f\u0007",
    "\u00d8\u0002\u0002\u041f\u0420\u0007\u00e7\u0002\u0002\u0420\u0421\u0007",
    "\u00e5\u0002\u0002\u0421\u0422\u0007\u00ce\u0002\u0002\u0422\u0423\u0007",
    "\u00be\u0002\u0002\u0423\u0424\b+\u0001\u0002\u0424\u0428\u0007\u00e7",
    "\u0002\u0002\u0425\u0426\u0005\u009aN\u0002\u0426\u0427\b+\u0001\u0002",
    "\u0427\u0429\u0003\u0002\u0002\u0002\u0428\u0425\u0003\u0002\u0002\u0002",
    "\u0429\u042a\u0003\u0002\u0002\u0002\u042a\u0428\u0003\u0002\u0002\u0002",
    "\u042a\u042b\u0003\u0002\u0002\u0002\u042b\u042c\u0003\u0002\u0002\u0002",
    "\u042c\u042d\u0007\u00e8\u0002\u0002\u042d\u042e\b+\u0001\u0002\u042e",
    "\u042f\u0007\u00e8\u0002\u0002\u042f\u0431\u0003\u0002\u0002\u0002\u0430",
    "\u0410\u0003\u0002\u0002\u0002\u0430\u0416\u0003\u0002\u0002\u0002\u0430",
    "\u041e\u0003\u0002\u0002\u0002\u0431U\u0003\u0002\u0002\u0002\u0432",
    "\u0433\u0007\u0007\u0002\u0002\u0433\u0434\u0007\u00ce\u0002\u0002\u0434",
    "\u0435\u0007\u00be\u0002\u0002\u0435\u0437\u0007\u00e7\u0002\u0002\u0436",
    "\u0438\u0005X-\u0002\u0437\u0436\u0003\u0002\u0002\u0002\u0438\u0439",
    "\u0003\u0002\u0002\u0002\u0439\u0437\u0003\u0002\u0002\u0002\u0439\u043a",
    "\u0003\u0002\u0002\u0002\u043a\u043b\u0003\u0002\u0002\u0002\u043b\u043c",
    "\u0007\u00e8\u0002\u0002\u043cW\u0003\u0002\u0002\u0002\u043d\u043e",
    "\u0007\u00e5\u0002\u0002\u043e\u043f\u0007\u00ce\u0002\u0002\u043f\u0440",
    "\u0007\u00e5\u0002\u0002\u0440\u0451\u0007\u00be\u0002\u0002\u0441\u0442",
    "\u0007\u00e5\u0002\u0002\u0442\u0443\u0007\u00ce\u0002\u0002\u0443\u0444",
    "\u0007\u00be\u0002\u0002\u0444\u0445\b-\u0001\u0002\u0445\u0449\u0007",
    "\u00e7\u0002\u0002\u0446\u0447\u0005Z.\u0002\u0447\u0448\b-\u0001\u0002",
    "\u0448\u044a\u0003\u0002\u0002\u0002\u0449\u0446\u0003\u0002\u0002\u0002",
    "\u044a\u044b\u0003\u0002\u0002\u0002\u044b\u0449\u0003\u0002\u0002\u0002",
    "\u044b\u044c\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002\u0002",
    "\u044d\u044e\u0007\u00e8\u0002\u0002\u044e\u044f\b-\u0001\u0002\u044f",
    "\u0451\u0003\u0002\u0002\u0002\u0450\u043d\u0003\u0002\u0002\u0002\u0450",
    "\u0441\u0003\u0002\u0002\u0002\u0451Y\u0003\u0002\u0002\u0002\u0452",
    "\u0453\u0007]\u0002\u0002\u0453\u0454\u0007\u00ce\u0002\u0002\u0454",
    "\u0455\u0007\u00e5\u0002\u0002\u0455\u0463\u0007\u00be\u0002\u0002\u0456",
    "\u0457\u0007j\u0002\u0002\u0457\u0458\u0007\u00ce\u0002\u0002\u0458",
    "\u0459\u0005\u0172\u00ba\u0002\u0459\u045a\u0007\u00be\u0002\u0002\u045a",
    "\u0463\u0003\u0002\u0002\u0002\u045b\u045c\u0007k\u0002\u0002\u045c",
    "\u045d\u0007\u00ce\u0002\u0002\u045d\u0463\u0007\u00e5\u0002\u0002\u045e",
    "\u0463\u0005\u0168\u00b5\u0002\u045f\u0460\u0007\u008d\u0002\u0002\u0460",
    "\u0461\u0007\u00ce\u0002\u0002\u0461\u0463\u0007\u00e5\u0002\u0002\u0462",
    "\u0452\u0003\u0002\u0002\u0002\u0462\u0456\u0003\u0002\u0002\u0002\u0462",
    "\u045b\u0003\u0002\u0002\u0002\u0462\u045e\u0003\u0002\u0002\u0002\u0462",
    "\u045f\u0003\u0002\u0002\u0002\u0463[\u0003\u0002\u0002\u0002\u0464",
    "\u0465\u0007\u0093\u0002\u0002\u0465\u0466\u0007\u00ce\u0002\u0002\u0466",
    "\u0467\u0007\u00be\u0002\u0002\u0467\u0469\u0007\u00e7\u0002\u0002\u0468",
    "\u046a\u0005^0\u0002\u0469\u0468\u0003\u0002\u0002\u0002\u046a\u046b",
    "\u0003\u0002\u0002\u0002\u046b\u0469\u0003\u0002\u0002\u0002\u046b\u046c",
    "\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002\u0002\u0002\u046d\u046e",
    "\u0007\u00e8\u0002\u0002\u046e]\u0003\u0002\u0002\u0002\u046f\u0470",
    "\u0007\u00d8\u0002\u0002\u0470\u0471\u0007\u00e7\u0002\u0002\u0471\u0472",
    "\u0007\u00e5\u0002\u0002\u0472\u0473\u0007\u00ce\u0002\u0002\u0473\u0474",
    "\u0007\u00e5\u0002\u0002\u0474\u0475\u0007\u00be\u0002\u0002\u0475\u0489",
    "\u0007\u00e8\u0002\u0002\u0476\u0477\u0007\u00d8\u0002\u0002\u0477\u0478",
    "\u0007\u00e7\u0002\u0002\u0478\u0479\u0007\u00e5\u0002\u0002\u0479\u047a",
    "\u0007\u00ce\u0002\u0002\u047a\u047b\u0007\u00be\u0002\u0002\u047b\u047c",
    "\u0007\u00e7\u0002\u0002\u047c\u0480\b0\u0001\u0002\u047d\u047e\u0005",
    "`1\u0002\u047e\u047f\b0\u0001\u0002\u047f\u0481\u0003\u0002\u0002\u0002",
    "\u0480\u047d\u0003\u0002\u0002\u0002\u0481\u0482\u0003\u0002\u0002\u0002",
    "\u0482\u0480\u0003\u0002\u0002\u0002\u0482\u0483\u0003\u0002\u0002\u0002",
    "\u0483\u0484\u0003\u0002\u0002\u0002\u0484\u0485\u0007\u00e8\u0002\u0002",
    "\u0485\u0486\b0\u0001\u0002\u0486\u0487\u0007\u00e8\u0002\u0002\u0487",
    "\u0489\u0003\u0002\u0002\u0002\u0488\u046f\u0003\u0002\u0002\u0002\u0488",
    "\u0476\u0003\u0002\u0002\u0002\u0489_\u0003\u0002\u0002\u0002\u048a",
    "\u048b\u0007\u008f\u0002\u0002\u048b\u048c\u0007\u00ce\u0002\u0002\u048c",
    "\u048d\u0007\u00e5\u0002\u0002\u048d\u049d\u0007\u00be\u0002\u0002\u048e",
    "\u048f\u0007\u008b\u0002\u0002\u048f\u0490\u0007\u00ce\u0002\u0002\u0490",
    "\u0491\u0007\u00e5\u0002\u0002\u0491\u049d\u0007\u00be\u0002\u0002\u0492",
    "\u0493\u0007\u0092\u0002\u0002\u0493\u0494\u0007\u00ce\u0002\u0002\u0494",
    "\u0495\u0007\u00e5\u0002\u0002\u0495\u049d\u0007\u00be\u0002\u0002\u0496",
    "\u0497\u0007\u008c\u0002\u0002\u0497\u0498\u0007\u00ce\u0002\u0002\u0498",
    "\u0499\u0005\u0170\u00b9\u0002\u0499\u049a\u0007\u00be\u0002\u0002\u049a",
    "\u049d\u0003\u0002\u0002\u0002\u049b\u049d\u0005\u0106\u0084\u0002\u049c",
    "\u048a\u0003\u0002\u0002\u0002\u049c\u048e\u0003\u0002\u0002\u0002\u049c",
    "\u0492\u0003\u0002\u0002\u0002\u049c\u0496\u0003\u0002\u0002\u0002\u049c",
    "\u049b\u0003\u0002\u0002\u0002\u049da\u0003\u0002\u0002\u0002\u049e",
    "\u049f\u0007\\\u0002\u0002\u049f\u04a0\u0007\u00ce\u0002\u0002\u04a0",
    "\u04a1\u0007\u00be\u0002\u0002\u04a1\u04a3\u0007\u00e7\u0002\u0002\u04a2",
    "\u04a4\u0005d3\u0002\u04a3\u04a2\u0003\u0002\u0002\u0002\u04a4\u04a5",
    "\u0003\u0002\u0002\u0002\u04a5\u04a3\u0003\u0002\u0002\u0002\u04a5\u04a6",
    "\u0003\u0002\u0002\u0002\u04a6\u04a7\u0003\u0002\u0002\u0002\u04a7\u04a8",
    "\u0007\u00e8\u0002\u0002\u04a8c\u0003\u0002\u0002\u0002\u04a9\u04aa",
    "\u0007\u00e5\u0002\u0002\u04aa\u04ab\u0007\u00ce\u0002\u0002\u04ab\u04ac",
    "\u0007\u00be\u0002\u0002\u04ac\u04ad\b3\u0001\u0002\u04ad\u04b1\u0007",
    "\u00e7\u0002\u0002\u04ae\u04af\u0005f4\u0002\u04af\u04b0\b3\u0001\u0002",
    "\u04b0\u04b2\u0003\u0002\u0002\u0002\u04b1\u04ae\u0003\u0002\u0002\u0002",
    "\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b1\u0003\u0002\u0002\u0002",
    "\u04b3\u04b4\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002",
    "\u04b5\u04b6\u0007\u00e8\u0002\u0002\u04b6\u04b7\b3\u0001\u0002\u04b7",
    "e\u0003\u0002\u0002\u0002\u04b8\u04b9\u0007]\u0002\u0002\u04b9\u04ba",
    "\u0007\u00ce\u0002\u0002\u04ba\u04bb\t\u0003\u0002\u0002\u04bb\u04cd",
    "\u0007\u00be\u0002\u0002\u04bc\u04cd\u0005\u0168\u00b5\u0002\u04bd\u04cd",
    "\u0005\u0090I\u0002\u04be\u04bf\u0007^\u0002\u0002\u04bf\u04c0\u0007",
    "\u00ce\u0002\u0002\u04c0\u04c1\u0005\u017a\u00be\u0002\u04c1\u04c2\u0007",
    "\u00be\u0002\u0002\u04c2\u04cd\u0003\u0002\u0002\u0002\u04c3\u04c4\u0007",
    "`\u0002\u0002\u04c4\u04c5\u0007\u00ce\u0002\u0002\u04c5\u04c6\u0005",
    "\u0166\u00b4\u0002\u04c6\u04c7\u0007\u00be\u0002\u0002\u04c7\u04cd\u0003",
    "\u0002\u0002\u0002\u04c8\u04c9\u0007_\u0002\u0002\u04c9\u04ca\u0007",
    "\u00ce\u0002\u0002\u04ca\u04cd\t\u0004\u0002\u0002\u04cb\u04cd\u0005",
    "\u0094K\u0002\u04cc\u04b8\u0003\u0002\u0002\u0002\u04cc\u04bc\u0003",
    "\u0002\u0002\u0002\u04cc\u04bd\u0003\u0002\u0002\u0002\u04cc\u04be\u0003",
    "\u0002\u0002\u0002\u04cc\u04c3\u0003\u0002\u0002\u0002\u04cc\u04c8\u0003",
    "\u0002\u0002\u0002\u04cc\u04cb\u0003\u0002\u0002\u0002\u04cdg\u0003",
    "\u0002\u0002\u0002\u04ce\u04cf\u0007\\\u0002\u0002\u04cf\u04d0\u0007",
    "\u00ce\u0002\u0002\u04d0\u04d2\u0007\u00e7\u0002\u0002\u04d1\u04d3\u0005",
    "j6\u0002\u04d2\u04d1\u0003\u0002\u0002\u0002\u04d3\u04d4\u0003\u0002",
    "\u0002\u0002\u04d4\u04d2\u0003\u0002\u0002\u0002\u04d4\u04d5\u0003\u0002",
    "\u0002\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d7\u0007\u00e8",
    "\u0002\u0002\u04d7i\u0003\u0002\u0002\u0002\u04d8\u04d9\u0007\u00e5",
    "\u0002\u0002\u04d9\u04da\u0007\u00ce\u0002\u0002\u04da\u04db\u0005\u0166",
    "\u00b4\u0002\u04db\u04dc\u0007\u00be\u0002\u0002\u04dc\u04f2\u0003\u0002",
    "\u0002\u0002\u04dd\u04de\u0007\u00e5\u0002\u0002\u04de\u04df\u0007\u00ce",
    "\u0002\u0002\u04df\u04e0\u0005\u014e\u00a8\u0002\u04e0\u04e1\u0007\u00be",
    "\u0002\u0002\u04e1\u04f2\u0003\u0002\u0002\u0002\u04e2\u04e3\u0007\u00e5",
    "\u0002\u0002\u04e3\u04e4\u0007\u00ce\u0002\u0002\u04e4\u04e5\u0007\u00be",
    "\u0002\u0002\u04e5\u04e6\u0007\u00e7\u0002\u0002\u04e6\u04ea\b6\u0001",
    "\u0002\u04e7\u04e8\u0005l7\u0002\u04e8\u04e9\b6\u0001\u0002\u04e9\u04eb",
    "\u0003\u0002\u0002\u0002\u04ea\u04e7\u0003\u0002\u0002\u0002\u04eb\u04ec",
    "\u0003\u0002\u0002\u0002\u04ec\u04ea\u0003\u0002\u0002\u0002\u04ec\u04ed",
    "\u0003\u0002\u0002\u0002\u04ed\u04ee\u0003\u0002\u0002\u0002\u04ee\u04ef",
    "\u0007\u00e8\u0002\u0002\u04ef\u04f0\b6\u0001\u0002\u04f0\u04f2\u0003",
    "\u0002\u0002\u0002\u04f1\u04d8\u0003\u0002\u0002\u0002\u04f1\u04dd\u0003",
    "\u0002\u0002\u0002\u04f1\u04e2\u0003\u0002\u0002\u0002\u04f2k\u0003",
    "\u0002\u0002\u0002\u04f3\u04fb\u0005\u0168\u00b5\u0002\u04f4\u04f5\u0007",
    "\u0080\u0002\u0002\u04f5\u04f6\u0007\u00ce\u0002\u0002\u04f6\u04fb\u0005",
    "\u0166\u00b4\u0002\u04f7\u04f8\u0007\u0080\u0002\u0002\u04f8\u04f9\u0007",
    "\u00ce\u0002\u0002\u04f9\u04fb\u0005\u014e\u00a8\u0002\u04fa\u04f3\u0003",
    "\u0002\u0002\u0002\u04fa\u04f4\u0003\u0002\u0002\u0002\u04fa\u04f7\u0003",
    "\u0002\u0002\u0002\u04fbm\u0003\u0002\u0002\u0002\u04fc\u04fd\u0007",
    "\u0086\u0002\u0002\u04fd\u04fe\u0007\u00ce\u0002\u0002\u04fe\u04ff\u0007",
    "\u00be\u0002\u0002\u04ff\u0501\u0007\u00e7\u0002\u0002\u0500\u0502\u0005",
    "p9\u0002\u0501\u0500\u0003\u0002\u0002\u0002\u0502\u0503\u0003\u0002",
    "\u0002\u0002\u0503\u0501\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002",
    "\u0002\u0002\u0504\u0505\u0003\u0002\u0002\u0002\u0505\u0506\u0007\u00e8",
    "\u0002\u0002\u0506o\u0003\u0002\u0002\u0002\u0507\u0508\u0007\b\u0002",
    "\u0002\u0508\u0509\u0007\u00ce\u0002\u0002\u0509\u050a\u0007\u00e5\u0002",
    "\u0002\u050a\u050b\u0007\u00be\u0002\u0002\u050b\u050c\b9\u0001\u0002",
    "\u050c\u0510\u0007\u00e7\u0002\u0002\u050d\u050e\u0005r:\u0002\u050e",
    "\u050f\b9\u0001\u0002\u050f\u0511\u0003\u0002\u0002\u0002\u0510\u050d",
    "\u0003\u0002\u0002\u0002\u0511\u0512\u0003\u0002\u0002\u0002\u0512\u0510",
    "\u0003\u0002\u0002\u0002\u0512\u0513\u0003\u0002\u0002\u0002\u0513\u0514",
    "\u0003\u0002\u0002\u0002\u0514\u0515\u0007\u00e8\u0002\u0002\u0515\u0516",
    "\b9\u0001\u0002\u0516q\u0003\u0002\u0002\u0002\u0517\u0518\u0007]\u0002",
    "\u0002\u0518\u0519\u0007\u00ce\u0002\u0002\u0519\u051a\t\u0003\u0002",
    "\u0002\u051a\u0526\u0007\u00be\u0002\u0002\u051b\u0526\u0005\u0168\u00b5",
    "\u0002\u051c\u051d\u0007`\u0002\u0002\u051d\u051e\u0007\u00ce\u0002",
    "\u0002\u051e\u051f\u0005\u0166\u00b4\u0002\u051f\u0520\u0007\u00be\u0002",
    "\u0002\u0520\u0526\u0003\u0002\u0002\u0002\u0521\u0522\u0007_\u0002",
    "\u0002\u0522\u0523\u0007\u00ce\u0002\u0002\u0523\u0526\t\u0004\u0002",
    "\u0002\u0524\u0526\u0005\u0094K\u0002\u0525\u0517\u0003\u0002\u0002",
    "\u0002\u0525\u051b\u0003\u0002\u0002\u0002\u0525\u051c\u0003\u0002\u0002",
    "\u0002\u0525\u0521\u0003\u0002\u0002\u0002\u0525\u0524\u0003\u0002\u0002",
    "\u0002\u0526s\u0003\u0002\u0002\u0002\u0527\u0528\u0007\u0086\u0002",
    "\u0002\u0528\u0529\u0007\u00ce\u0002\u0002\u0529\u052a\u0007\u00be\u0002",
    "\u0002\u052a\u052c\u0007\u00e7\u0002\u0002\u052b\u052d\u0005v<\u0002",
    "\u052c\u052b\u0003\u0002\u0002\u0002\u052d\u052e\u0003\u0002\u0002\u0002",
    "\u052e\u052c\u0003\u0002\u0002\u0002\u052e\u052f\u0003\u0002\u0002\u0002",
    "\u052f\u0530\u0003\u0002\u0002\u0002\u0530\u0531\u0007\u00e8\u0002\u0002",
    "\u0531u\u0003\u0002\u0002\u0002\u0532\u0533\u0007\u00e5\u0002\u0002",
    "\u0533\u0534\u0007\u00ce\u0002\u0002\u0534\u0535\u0005\u0166\u00b4\u0002",
    "\u0535\u0536\u0007\u00be\u0002\u0002\u0536\u054c\u0003\u0002\u0002\u0002",
    "\u0537\u0538\u0007\u00e5\u0002\u0002\u0538\u0539\u0007\u00ce\u0002\u0002",
    "\u0539\u053a\u0005\u014e\u00a8\u0002\u053a\u053b\u0007\u00be\u0002\u0002",
    "\u053b\u054c\u0003\u0002\u0002\u0002\u053c\u053d\u0007\u00e5\u0002\u0002",
    "\u053d\u053e\u0007\u00ce\u0002\u0002\u053e\u053f\u0007\u00be\u0002\u0002",
    "\u053f\u0540\u0007\u00e7\u0002\u0002\u0540\u0544\b<\u0001\u0002\u0541",
    "\u0542\u0005~@\u0002\u0542\u0543\b<\u0001\u0002\u0543\u0545\u0003\u0002",
    "\u0002\u0002\u0544\u0541\u0003\u0002\u0002\u0002\u0545\u0546\u0003\u0002",
    "\u0002\u0002\u0546\u0544\u0003\u0002\u0002\u0002\u0546\u0547\u0003\u0002",
    "\u0002\u0002\u0547\u0548\u0003\u0002\u0002\u0002\u0548\u0549\u0007\u00e8",
    "\u0002\u0002\u0549\u054a\b<\u0001\u0002\u054a\u054c\u0003\u0002\u0002",
    "\u0002\u054b\u0532\u0003\u0002\u0002\u0002\u054b\u0537\u0003\u0002\u0002",
    "\u0002\u054b\u053c\u0003\u0002\u0002\u0002\u054cw\u0003\u0002\u0002",
    "\u0002\u054d\u054e\u0007\u008e\u0002\u0002\u054e\u054f\u0007\u00ce\u0002",
    "\u0002\u054f\u0550\u0007\u00be\u0002\u0002\u0550\u0552\u0007\u00e7\u0002",
    "\u0002\u0551\u0553\u0005z>\u0002\u0552\u0551\u0003\u0002\u0002\u0002",
    "\u0553\u0554\u0003\u0002\u0002\u0002\u0554\u0552\u0003\u0002\u0002\u0002",
    "\u0554\u0555\u0003\u0002\u0002\u0002\u0555\u0556\u0003\u0002\u0002\u0002",
    "\u0556\u0557\u0007\u00e8\u0002\u0002\u0557y\u0003\u0002\u0002\u0002",
    "\u0558\u0559\u0007\u00e5\u0002\u0002\u0559\u055a\u0007\u00ce\u0002\u0002",
    "\u055a\u055b\u0007\u00be\u0002\u0002\u055b\u055c\u0007\u00e7\u0002\u0002",
    "\u055c\u0560\b>\u0001\u0002\u055d\u055e\u0005|?\u0002\u055e\u055f\b",
    ">\u0001\u0002\u055f\u0561\u0003\u0002\u0002\u0002\u0560\u055d\u0003",
    "\u0002\u0002\u0002\u0561\u0562\u0003\u0002\u0002\u0002\u0562\u0560\u0003",
    "\u0002\u0002\u0002\u0562\u0563\u0003\u0002\u0002\u0002\u0563\u0564\u0003",
    "\u0002\u0002\u0002\u0564\u0565\u0007\u00e8\u0002\u0002\u0565\u0566\b",
    ">\u0001\u0002\u0566{\u0003\u0002\u0002\u0002\u0567\u056a\u0005h5\u0002",
    "\u0568\u056a\u0005t;\u0002\u0569\u0567\u0003\u0002\u0002\u0002\u0569",
    "\u0568\u0003\u0002\u0002\u0002\u056a}\u0003\u0002\u0002\u0002\u056b",
    "\u0573\u0005\u0168\u00b5\u0002\u056c\u056d\u0007\u0080\u0002\u0002\u056d",
    "\u056e\u0007\u00ce\u0002\u0002\u056e\u0573\u0005\u0166\u00b4\u0002\u056f",
    "\u0570\u0007\u0080\u0002\u0002\u0570\u0571\u0007\u00ce\u0002\u0002\u0571",
    "\u0573\u0005\u014e\u00a8\u0002\u0572\u056b\u0003\u0002\u0002\u0002\u0572",
    "\u056c\u0003\u0002\u0002\u0002\u0572\u056f\u0003\u0002\u0002\u0002\u0573",
    "\u007f\u0003\u0002\u0002\u0002\u0574\u0575\u0007\u0089\u0002\u0002\u0575",
    "\u0576\u0007\u00ce\u0002\u0002\u0576\u0577\u0007\u00be\u0002\u0002\u0577",
    "\u0579\u0007\u00e7\u0002\u0002\u0578\u057a\u0005b2\u0002\u0579\u0578",
    "\u0003\u0002\u0002\u0002\u057a\u057b\u0003\u0002\u0002\u0002\u057b\u0579",
    "\u0003\u0002\u0002\u0002\u057b\u057c\u0003\u0002\u0002\u0002\u057c\u057d",
    "\u0003\u0002\u0002\u0002\u057d\u057e\u0007\u00e8\u0002\u0002\u057e\u0081",
    "\u0003\u0002\u0002\u0002\u057f\u0580\u0007\u0089\u0002\u0002\u0580\u0581",
    "\u0007\u00ce\u0002\u0002\u0581\u0582\u0007\u00be\u0002\u0002\u0582\u0584",
    "\u0007\u00e7\u0002\u0002\u0583\u0585\u0005j6\u0002\u0584\u0583\u0003",
    "\u0002\u0002\u0002\u0585\u0586\u0003\u0002\u0002\u0002\u0586\u0584\u0003",
    "\u0002\u0002\u0002\u0586\u0587\u0003\u0002\u0002\u0002\u0587\u0588\u0003",
    "\u0002\u0002\u0002\u0588\u0589\u0007\u00e8\u0002\u0002\u0589\u0083\u0003",
    "\u0002\u0002\u0002\u058a\u058b\u0007\u0089\u0002\u0002\u058b\u058c\u0007",
    "\u00ce\u0002\u0002\u058c\u058d\u0007\u00be\u0002\u0002\u058d\u058f\u0007",
    "\u00e7\u0002\u0002\u058e\u0590\u0005\u0086D\u0002\u058f\u058e\u0003",
    "\u0002\u0002\u0002\u0590\u0591\u0003\u0002\u0002\u0002\u0591\u058f\u0003",
    "\u0002\u0002\u0002\u0591\u0592\u0003\u0002\u0002\u0002\u0592\u0593\u0003",
    "\u0002\u0002\u0002\u0593\u0594\u0007\u00e8\u0002\u0002\u0594\u0085\u0003",
    "\u0002\u0002\u0002\u0595\u0596\u0007\b\u0002\u0002\u0596\u0597\u0007",
    "\u00ce\u0002\u0002\u0597\u0598\u0007\u00e5\u0002\u0002\u0598\u0599\u0007",
    "\u00be\u0002\u0002\u0599\u059a\bD\u0001\u0002\u059a\u059e\u0007\u00e7",
    "\u0002\u0002\u059b\u059c\u0005\u0088E\u0002\u059c\u059d\bD\u0001\u0002",
    "\u059d\u059f\u0003\u0002\u0002\u0002\u059e\u059b\u0003\u0002\u0002\u0002",
    "\u059f\u05a0\u0003\u0002\u0002\u0002\u05a0\u059e\u0003\u0002\u0002\u0002",
    "\u05a0\u05a1\u0003\u0002\u0002\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002",
    "\u05a2\u05a3\u0007\u00e8\u0002\u0002\u05a3\u05a4\bD\u0001\u0002\u05a4",
    "\u0087\u0003\u0002\u0002\u0002\u05a5\u05a6\u0007]\u0002\u0002\u05a6",
    "\u05a7\u0007\u00ce\u0002\u0002\u05a7\u05a8\t\u0003\u0002\u0002\u05a8",
    "\u05bd\u0007\u00be\u0002\u0002\u05a9\u05bd\u0005\u0168\u00b5\u0002\u05aa",
    "\u05bd\u0005\u0090I\u0002\u05ab\u05ac\u0007^\u0002\u0002\u05ac\u05ad",
    "\u0007\u00ce\u0002\u0002\u05ad\u05ae\u0005\u017a\u00be\u0002\u05ae\u05af",
    "\u0007\u00be\u0002\u0002\u05af\u05bd\u0003\u0002\u0002\u0002\u05b0\u05b1",
    "\u0007`\u0002\u0002\u05b1\u05b2\u0007\u00ce\u0002\u0002\u05b2\u05b3",
    "\u0005\u0166\u00b4\u0002\u05b3\u05b4\u0007\u00be\u0002\u0002\u05b4\u05bd",
    "\u0003\u0002\u0002\u0002\u05b5\u05b6\u0007_\u0002\u0002\u05b6\u05b7",
    "\u0007\u00ce\u0002\u0002\u05b7\u05bd\t\u0004\u0002\u0002\u05b8\u05bd",
    "\u0005\u0094K\u0002\u05b9\u05ba\u0007\u0080\u0002\u0002\u05ba\u05bb",
    "\u0007\u00ce\u0002\u0002\u05bb\u05bd\u0005\u0166\u00b4\u0002\u05bc\u05a5",
    "\u0003\u0002\u0002\u0002\u05bc\u05a9\u0003\u0002\u0002\u0002\u05bc\u05aa",
    "\u0003\u0002\u0002\u0002\u05bc\u05ab\u0003\u0002\u0002\u0002\u05bc\u05b0",
    "\u0003\u0002\u0002\u0002\u05bc\u05b5\u0003\u0002\u0002\u0002\u05bc\u05b8",
    "\u0003\u0002\u0002\u0002\u05bc\u05b9\u0003\u0002\u0002\u0002\u05bd\u0089",
    "\u0003\u0002\u0002\u0002\u05be\u05bf\u0007\u0089\u0002\u0002\u05bf\u05c0",
    "\u0007\u00ce\u0002\u0002\u05c0\u05c1\u0007\u00be\u0002\u0002\u05c1\u05c3",
    "\u0007\u00e7\u0002\u0002\u05c2\u05c4\u0005\u008cG\u0002\u05c3\u05c2",
    "\u0003\u0002\u0002\u0002\u05c4\u05c5\u0003\u0002\u0002\u0002\u05c5\u05c3",
    "\u0003\u0002\u0002\u0002\u05c5\u05c6\u0003\u0002\u0002\u0002\u05c6\u05c7",
    "\u0003\u0002\u0002\u0002\u05c7\u05c8\u0007\u00e8\u0002\u0002\u05c8\u008b",
    "\u0003\u0002\u0002\u0002\u05c9\u05ca\u0007\b\u0002\u0002\u05ca\u05cb",
    "\u0007\u00ce\u0002\u0002\u05cb\u05cc\u0007\u00e5\u0002\u0002\u05cc\u05cd",
    "\u0007\u00be\u0002\u0002\u05cd\u05ce\bG\u0001\u0002\u05ce\u05d2\u0007",
    "\u00e7\u0002\u0002\u05cf\u05d0\u0005\u008eH\u0002\u05d0\u05d1\bG\u0001",
    "\u0002\u05d1\u05d3\u0003\u0002\u0002\u0002\u05d2\u05cf\u0003\u0002\u0002",
    "\u0002\u05d3\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d2\u0003\u0002\u0002",
    "\u0002\u05d4\u05d5\u0003\u0002\u0002\u0002\u05d5\u05d6\u0003\u0002\u0002",
    "\u0002\u05d6\u05d7\u0007\u00e8\u0002\u0002\u05d7\u05d8\bG\u0001\u0002",
    "\u05d8\u008d\u0003\u0002\u0002\u0002\u05d9\u05da\u0007]\u0002\u0002",
    "\u05da\u05db\u0007\u00ce\u0002\u0002\u05db\u05dc\t\u0003\u0002\u0002",
    "\u05dc\u05f4\u0007\u00be\u0002\u0002\u05dd\u05f4\u0005\u0168\u00b5\u0002",
    "\u05de\u05f4\u0005\u0090I\u0002\u05df\u05e0\u0007^\u0002\u0002\u05e0",
    "\u05e1\u0007\u00ce\u0002\u0002\u05e1\u05e2\u0005\u017a\u00be\u0002\u05e2",
    "\u05e3\u0007\u00be\u0002\u0002\u05e3\u05f4\u0003\u0002\u0002\u0002\u05e4",
    "\u05e5\u0007`\u0002\u0002\u05e5\u05e6\u0007\u00ce\u0002\u0002\u05e6",
    "\u05e7\u0005\u0166\u00b4\u0002\u05e7\u05e8\u0007\u00be\u0002\u0002\u05e8",
    "\u05f4\u0003\u0002\u0002\u0002\u05e9\u05ea\u0007_\u0002\u0002\u05ea",
    "\u05eb\u0007\u00ce\u0002\u0002\u05eb\u05f4\t\u0004\u0002\u0002\u05ec",
    "\u05f4\u0005\u0094K\u0002\u05ed\u05ee\u0007\u0080\u0002\u0002\u05ee",
    "\u05f1\u0007\u00ce\u0002\u0002\u05ef\u05f2\u0005\u0166\u00b4\u0002\u05f0",
    "\u05f2\u0005\u014e\u00a8\u0002\u05f1\u05ef\u0003\u0002\u0002\u0002\u05f1",
    "\u05f0\u0003\u0002\u0002\u0002\u05f2\u05f4\u0003\u0002\u0002\u0002\u05f3",
    "\u05d9\u0003\u0002\u0002\u0002\u05f3\u05dd\u0003\u0002\u0002\u0002\u05f3",
    "\u05de\u0003\u0002\u0002\u0002\u05f3\u05df\u0003\u0002\u0002\u0002\u05f3",
    "\u05e4\u0003\u0002\u0002\u0002\u05f3\u05e9\u0003\u0002\u0002\u0002\u05f3",
    "\u05ec\u0003\u0002\u0002\u0002\u05f3\u05ed\u0003\u0002\u0002\u0002\u05f4",
    "\u008f\u0003\u0002\u0002\u0002\u05f5\u05f6\u0007x\u0002\u0002\u05f6",
    "\u05f7\u0007\u00ce\u0002\u0002\u05f7\u05f8\u0007\u00be\u0002\u0002\u05f8",
    "\u05ff\u0007\u00e7\u0002\u0002\u05f9\u05fa\u0007\u00d8\u0002\u0002\u05fa",
    "\u05fb\u0007\u00e7\u0002\u0002\u05fb\u05fc\u0005\u0092J\u0002\u05fc",
    "\u05fd\u0007\u00be\u0002\u0002\u05fd\u05fe\u0007\u00e8\u0002\u0002\u05fe",
    "\u0600\u0003\u0002\u0002\u0002\u05ff\u05f9\u0003\u0002\u0002\u0002\u0600",
    "\u0601\u0003\u0002\u0002\u0002\u0601\u05ff\u0003\u0002\u0002\u0002\u0601",
    "\u0602\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002\u0603",
    "\u0604\u0007\u00e8\u0002\u0002\u0604\u0091\u0003\u0002\u0002\u0002\u0605",
    "\u0606\u0007y\u0002\u0002\u0606\u0607\u0007\u00ce\u0002\u0002\u0607",
    "\u0627\u0005\u017e\u00c0\u0002\u0608\u0609\u0007z\u0002\u0002\u0609",
    "\u060a\u0007\u00ce\u0002\u0002\u060a\u0627\u0005\u0166\u00b4\u0002\u060b",
    "\u060c\u0007{\u0002\u0002\u060c\u060d\u0007\u00ce\u0002\u0002\u060d",
    "\u0627\u0005\u0166\u00b4\u0002\u060e\u060f\u0007|\u0002\u0002\u060f",
    "\u0610\u0007\u00ce\u0002\u0002\u0610\u0627\u0005\u0166\u00b4\u0002\u0611",
    "\u0612\u0007}\u0002\u0002\u0612\u0613\u0007\u00ce\u0002\u0002\u0613",
    "\u0627\u0005\u0166\u00b4\u0002\u0614\u0615\u0007~\u0002\u0002\u0615",
    "\u0616\u0007\u00ce\u0002\u0002\u0616\u0627\u0005\u0170\u00b9\u0002\u0617",
    "\u0618\u0007\u007f\u0002\u0002\u0618\u0619\u0007\u00ce\u0002\u0002\u0619",
    "\u0627\u0005\u016a\u00b6\u0002\u061a\u061b\u0007\u0081\u0002\u0002\u061b",
    "\u061c\u0007\u00ce\u0002\u0002\u061c\u0627\u0005\u0166\u00b4\u0002\u061d",
    "\u061e\u0007\u0082\u0002\u0002\u061e\u061f\u0007\u00ce\u0002\u0002\u061f",
    "\u0627\u0005\u0166\u00b4\u0002\u0620\u0621\u0007\u0083\u0002\u0002\u0621",
    "\u0622\u0007\u00ce\u0002\u0002\u0622\u0627\u0005\u0166\u00b4\u0002\u0623",
    "\u0624\u0007\u0084\u0002\u0002\u0624\u0625\u0007\u00ce\u0002\u0002\u0625",
    "\u0627\u0005\u0166\u00b4\u0002\u0626\u0605\u0003\u0002\u0002\u0002\u0626",
    "\u0608\u0003\u0002\u0002\u0002\u0626\u060b\u0003\u0002\u0002\u0002\u0626",
    "\u060e\u0003\u0002\u0002\u0002\u0626\u0611\u0003\u0002\u0002\u0002\u0626",
    "\u0614\u0003\u0002\u0002\u0002\u0626\u0617\u0003\u0002\u0002\u0002\u0626",
    "\u061a\u0003\u0002\u0002\u0002\u0626\u061d\u0003\u0002\u0002\u0002\u0626",
    "\u0620\u0003\u0002\u0002\u0002\u0626\u0623\u0003\u0002\u0002\u0002\u0627",
    "\u0093\u0003\u0002\u0002\u0002\u0628\u062e\u0005\u0096L\u0002\u0629",
    "\u062a\u0007\u0085\u0002\u0002\u062a\u062b\u0007\u00ce\u0002\u0002\u062b",
    "\u062c\t\u0003\u0002\u0002\u062c\u062e\u0007\u00be\u0002\u0002\u062d",
    "\u0628\u0003\u0002\u0002\u0002\u062d\u0629\u0003\u0002\u0002\u0002\u062e",
    "\u0095\u0003\u0002\u0002\u0002\u062f\u0630\u0007\u0085\u0002\u0002\u0630",
    "\u0631\u0007\u00ce\u0002\u0002\u0631\u0632\u0007\u00be\u0002\u0002\u0632",
    "\u0633\bL\u0001\u0002\u0633\u0637\u0007\u00e7\u0002\u0002\u0634\u0635",
    "\u0005\u0098M\u0002\u0635\u0636\bL\u0001\u0002\u0636\u0638\u0003\u0002",
    "\u0002\u0002\u0637\u0634\u0003\u0002\u0002\u0002\u0638\u0639\u0003\u0002",
    "\u0002\u0002\u0639\u0637\u0003\u0002\u0002\u0002\u0639\u063a\u0003\u0002",
    "\u0002\u0002\u063a\u063b\u0003\u0002\u0002\u0002\u063b\u063c\u0007\u00e8",
    "\u0002\u0002\u063c\u063d\bL\u0001\u0002\u063d\u0097\u0003\u0002\u0002",
    "\u0002\u063e\u063f\u0007]\u0002\u0002\u063f\u0640\u0007\u00ce\u0002",
    "\u0002\u0640\u0641\t\u0003\u0002\u0002\u0641\u0646\u0007\u00be\u0002",
    "\u0002\u0642\u0646\u0005\u0168\u00b5\u0002\u0643\u0646\u0005\u0094K",
    "\u0002\u0644\u0646\u0005\u0090I\u0002\u0645\u063e\u0003\u0002\u0002",
    "\u0002\u0645\u0642\u0003\u0002\u0002\u0002\u0645\u0643\u0003\u0002\u0002",
    "\u0002\u0645\u0644\u0003\u0002\u0002\u0002\u0646\u0099\u0003\u0002\u0002",
    "\u0002\u0647\u0648\u0007j\u0002\u0002\u0648\u0649\u0007\u00ce\u0002",
    "\u0002\u0649\u064a\u0005\u0172\u00ba\u0002\u064a\u064b\u0007\u00be\u0002",
    "\u0002\u064b\u065a\u0003\u0002\u0002\u0002\u064c\u064d\u0007k\u0002",
    "\u0002\u064d\u064e\u0007\u00ce\u0002\u0002\u064e\u064f\u0007\u00e5\u0002",
    "\u0002\u064f\u065a\u0007\u00be\u0002\u0002\u0650\u0651\u0007l\u0002",
    "\u0002\u0651\u0652\u0007\u00ce\u0002\u0002\u0652\u0653\u0007\u00e5\u0002",
    "\u0002\u0653\u065a\u0007\u00be\u0002\u0002\u0654\u0655\u0007m\u0002",
    "\u0002\u0655\u0656\u0007\u00ce\u0002\u0002\u0656\u0657\u0005\u0172\u00ba",
    "\u0002\u0657\u0658\u0007\u00be\u0002\u0002\u0658\u065a\u0003\u0002\u0002",
    "\u0002\u0659\u0647\u0003\u0002\u0002\u0002\u0659\u064c\u0003\u0002\u0002",
    "\u0002\u0659\u0650\u0003\u0002\u0002\u0002\u0659\u0654\u0003\u0002\u0002",
    "\u0002\u065a\u009b\u0003\u0002\u0002\u0002\u065b\u065c\u0007S\u0002",
    "\u0002\u065c\u065d\u0007\u00ce\u0002\u0002\u065d\u065e\u0007\u00be\u0002",
    "\u0002\u065e\u065f\bO\u0001\u0002\u065f\u0663\u0007\u00e7\u0002\u0002",
    "\u0660\u0661\u0005\u009eP\u0002\u0661\u0662\bO\u0001\u0002\u0662\u0664",
    "\u0003\u0002\u0002\u0002\u0663\u0660\u0003\u0002\u0002\u0002\u0664\u0665",
    "\u0003\u0002\u0002\u0002\u0665\u0663\u0003\u0002\u0002\u0002\u0665\u0666",
    "\u0003\u0002\u0002\u0002\u0666\u0667\u0003\u0002\u0002\u0002\u0667\u0668",
    "\u0007\u00e8\u0002\u0002\u0668\u0669\bO\u0001\u0002\u0669\u009d\u0003",
    "\u0002\u0002\u0002\u066a\u066b\u0007\u00e5\u0002\u0002\u066b\u066c\u0007",
    "\u00ce\u0002\u0002\u066c\u066d\u0005\u0166\u00b4\u0002\u066d\u066e\u0007",
    "\u00be\u0002\u0002\u066e\u009f\u0003\u0002\u0002\u0002\u066f\u0670\u0007",
    "X\u0002\u0002\u0670\u0671\u0007\u00ce\u0002\u0002\u0671\u0672\u0007",
    "\u00e5\u0002\u0002\u0672\u067a\u0007\u00be\u0002\u0002\u0673\u0674\u0007",
    "R\u0002\u0002\u0674\u0675\u0007\u00ce\u0002\u0002\u0675\u0676\u0007",
    "\u00e0\u0002\u0002\u0676\u067a\u0007\u00be\u0002\u0002\u0677\u067a\u0005",
    "\u009cO\u0002\u0678\u067a\u0005\u0168\u00b5\u0002\u0679\u066f\u0003",
    "\u0002\u0002\u0002\u0679\u0673\u0003\u0002\u0002\u0002\u0679\u0677\u0003",
    "\u0002\u0002\u0002\u0679\u0678\u0003\u0002\u0002\u0002\u067a\u00a1\u0003",
    "\u0002\u0002\u0002\u067b\u067c\u0007o\u0002\u0002\u067c\u067d\u0007",
    "\u00ce\u0002\u0002\u067d\u067e\u0007\u00be\u0002\u0002\u067e\u0680\u0007",
    "\u00e7\u0002\u0002\u067f\u0681\u0005\u00a2R\u0002\u0680\u067f\u0003",
    "\u0002\u0002\u0002\u0681\u0682\u0003\u0002\u0002\u0002\u0682\u0680\u0003",
    "\u0002\u0002\u0002\u0682\u0683\u0003\u0002\u0002\u0002\u0683\u0684\u0003",
    "\u0002\u0002\u0002\u0684\u0685\u0007\u00e8\u0002\u0002\u0685\u00a3\u0003",
    "\u0002\u0002\u0002\u0686\u0687\u0007\u00e5\u0002\u0002\u0687\u0688\u0007",
    "\u00ce\u0002\u0002\u0688\u0689\u0007\u00be\u0002\u0002\u0689\u068a\u0007",
    "\u00e7\u0002\u0002\u068a\u068e\bS\u0001\u0002\u068b\u068c\u0005\u00a6",
    "T\u0002\u068c\u068d\bS\u0001\u0002\u068d\u068f\u0003\u0002\u0002\u0002",
    "\u068e\u068b\u0003\u0002\u0002\u0002\u068f\u0690\u0003\u0002\u0002\u0002",
    "\u0690\u068e\u0003\u0002\u0002\u0002\u0690\u0691\u0003\u0002\u0002\u0002",
    "\u0691\u0692\u0003\u0002\u0002\u0002\u0692\u0693\u0007\u00e8\u0002\u0002",
    "\u0693\u0694\bS\u0001\u0002\u0694\u00a5\u0003\u0002\u0002\u0002\u0695",
    "\u069d\u0005b2\u0002\u0696\u069d\u0005n8\u0002\u0697\u069d\u0005\u00c0",
    "a\u0002\u0698\u069d\u0005\u00c6d\u0002\u0699\u069d\u0005\u00d4k\u0002",
    "\u069a\u069d\u0005V,\u0002\u069b\u069d\u0005\u0112\u008a\u0002\u069c",
    "\u0695\u0003\u0002\u0002\u0002\u069c\u0696\u0003\u0002\u0002\u0002\u069c",
    "\u0697\u0003\u0002\u0002\u0002\u069c\u0698\u0003\u0002\u0002\u0002\u069c",
    "\u0699\u0003\u0002\u0002\u0002\u069c\u069a\u0003\u0002\u0002\u0002\u069c",
    "\u069b\u0003\u0002\u0002\u0002\u069d\u00a7\u0003\u0002\u0002\u0002\u069e",
    "\u069f\u0007q\u0002\u0002\u069f\u06a0\u0007\u00ce\u0002\u0002\u06a0",
    "\u06a1\u0007\u00be\u0002\u0002\u06a1\u06a3\u0007\u00e7\u0002\u0002\u06a2",
    "\u06a4\u0005\u00aaV\u0002\u06a3\u06a2\u0003\u0002\u0002\u0002\u06a4",
    "\u06a5\u0003\u0002\u0002\u0002\u06a5\u06a3\u0003\u0002\u0002\u0002\u06a5",
    "\u06a6\u0003\u0002\u0002\u0002\u06a6\u06a7\u0003\u0002\u0002\u0002\u06a7",
    "\u06a8\u0007\u00e8\u0002\u0002\u06a8\u00a9\u0003\u0002\u0002\u0002\u06a9",
    "\u06aa\u0007\u00e5\u0002\u0002\u06aa\u06ab\u0007\u00ce\u0002\u0002\u06ab",
    "\u06ac\u0007\u00be\u0002\u0002\u06ac\u06ad\u0007\u00e7\u0002\u0002\u06ad",
    "\u06b1\bV\u0001\u0002\u06ae\u06af\u0005\u00acW\u0002\u06af\u06b0\bV",
    "\u0001\u0002\u06b0\u06b2\u0003\u0002\u0002\u0002\u06b1\u06ae\u0003\u0002",
    "\u0002\u0002\u06b2\u06b3\u0003\u0002\u0002\u0002\u06b3\u06b1\u0003\u0002",
    "\u0002\u0002\u06b3\u06b4\u0003\u0002\u0002\u0002\u06b4\u06b5\u0003\u0002",
    "\u0002\u0002\u06b5\u06b6\u0007\u00e8\u0002\u0002\u06b6\u06b7\bV\u0001",
    "\u0002\u06b7\u00ab\u0003\u0002\u0002\u0002\u06b8\u06d8\u0005b2\u0002",
    "\u06b9\u06d8\u0005n8\u0002\u06ba\u06d8\u0005\u00d4k\u0002\u06bb\u06bc",
    "\u0007\u0088\u0002\u0002\u06bc\u06bd\u0007\u00ce\u0002\u0002\u06bd\u06be",
    "\u0007\u00d2\u0002\u0002\u06be\u06c3\u0007\u00e5\u0002\u0002\u06bf\u06c0",
    "\u0007\u00cd\u0002\u0002\u06c0\u06c2\u0007\u00e5\u0002\u0002\u06c1\u06bf",
    "\u0003\u0002\u0002\u0002\u06c2\u06c5\u0003\u0002\u0002\u0002\u06c3\u06c1",
    "\u0003\u0002\u0002\u0002\u06c3\u06c4\u0003\u0002\u0002\u0002\u06c4\u06c6",
    "\u0003\u0002\u0002\u0002\u06c5\u06c3\u0003\u0002\u0002\u0002\u06c6\u06c7",
    "\u0007\u00d3\u0002\u0002\u06c7\u06d8\u0007\u00be\u0002\u0002\u06c8\u06c9",
    "\u0007\u0088\u0002\u0002\u06c9\u06ca\u0007\u00ce\u0002\u0002\u06ca\u06cb",
    "\u0007\u00be\u0002\u0002\u06cb\u06d1\u0007\u00e7\u0002\u0002\u06cc\u06cd",
    "\u0007\u00d8\u0002\u0002\u06cd\u06ce\u0007\u00e7\u0002\u0002\u06ce\u06cf",
    "\u0007\u00e5\u0002\u0002\u06cf\u06d0\u0007\u00be\u0002\u0002\u06d0\u06d2",
    "\u0007\u00e8\u0002\u0002\u06d1\u06cc\u0003\u0002\u0002\u0002\u06d2\u06d3",
    "\u0003\u0002\u0002\u0002\u06d3\u06d1\u0003\u0002\u0002\u0002\u06d3\u06d4",
    "\u0003\u0002\u0002\u0002\u06d4\u06d5\u0003\u0002\u0002\u0002\u06d5\u06d8",
    "\u0007\u00e8\u0002\u0002\u06d6\u06d8\u0005\u0118\u008d\u0002\u06d7\u06b8",
    "\u0003\u0002\u0002\u0002\u06d7\u06b9\u0003\u0002\u0002\u0002\u06d7\u06ba",
    "\u0003\u0002\u0002\u0002\u06d7\u06bb\u0003\u0002\u0002\u0002\u06d7\u06c8",
    "\u0003\u0002\u0002\u0002\u06d7\u06d6\u0003\u0002\u0002\u0002\u06d8\u00ad",
    "\u0003\u0002\u0002\u0002\u06d9\u06da\u0007W\u0002\u0002\u06da\u06db",
    "\u0007\u00ce\u0002\u0002\u06db\u06dc\u0007\u00be\u0002\u0002\u06dc\u06de",
    "\u0007\u00e7\u0002\u0002\u06dd\u06df\u0005\u00b0Y\u0002\u06de\u06dd",
    "\u0003\u0002\u0002\u0002\u06df\u06e0\u0003\u0002\u0002\u0002\u06e0\u06de",
    "\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002\u06e1\u06e2",
    "\u0003\u0002\u0002\u0002\u06e2\u06e3\u0007\u00e8\u0002\u0002\u06e3\u00af",
    "\u0003\u0002\u0002\u0002\u06e4\u06e5\u0007\u00e5\u0002\u0002\u06e5\u06e6",
    "\u0007\u00ce\u0002\u0002\u06e6\u06e7\u0007\u00be\u0002\u0002\u06e7\u06e8",
    "\u0007\u00e7\u0002\u0002\u06e8\u06ec\bY\u0001\u0002\u06e9\u06ea\u0005",
    "\u00b2Z\u0002\u06ea\u06eb\bY\u0001\u0002\u06eb\u06ed\u0003\u0002\u0002",
    "\u0002\u06ec\u06e9\u0003\u0002\u0002\u0002\u06ed\u06ee\u0003\u0002\u0002",
    "\u0002\u06ee\u06ec\u0003\u0002\u0002\u0002\u06ee\u06ef\u0003\u0002\u0002",
    "\u0002\u06ef\u06f0\u0003\u0002\u0002\u0002\u06f0\u06f1\u0007\u00e8\u0002",
    "\u0002\u06f1\u06f2\bY\u0001\u0002\u06f2\u00b1\u0003\u0002\u0002\u0002",
    "\u06f3\u0709\u0005\u00a0Q\u0002\u06f4\u06f5\u0007Z\u0002\u0002\u06f5",
    "\u06f6\u0007\u00ce\u0002\u0002\u06f6\u06f7\u0007\u00d2\u0002\u0002\u06f7",
    "\u06fc\u0005\u0172\u00ba\u0002\u06f8\u06f9\u0007\u00cd\u0002\u0002\u06f9",
    "\u06fb\u0005\u0172\u00ba\u0002\u06fa\u06f8\u0003\u0002\u0002\u0002\u06fb",
    "\u06fe\u0003\u0002\u0002\u0002\u06fc\u06fa\u0003\u0002\u0002\u0002\u06fc",
    "\u06fd\u0003\u0002\u0002\u0002\u06fd\u06ff\u0003\u0002\u0002\u0002\u06fe",
    "\u06fc\u0003\u0002\u0002\u0002\u06ff\u0700\u0007\u00d3\u0002\u0002\u0700",
    "\u0701\u0007\u00be\u0002\u0002\u0701\u0709\u0003\u0002\u0002\u0002\u0702",
    "\u0703\u0007Y\u0002\u0002\u0703\u0704\u0007\u00ce\u0002\u0002\u0704",
    "\u0705\u0005\u0172\u00ba\u0002\u0705\u0706\u0007\u00be\u0002\u0002\u0706",
    "\u0709\u0003\u0002\u0002\u0002\u0707\u0709\u0005b2\u0002\u0708\u06f3",
    "\u0003\u0002\u0002\u0002\u0708\u06f4\u0003\u0002\u0002\u0002\u0708\u0702",
    "\u0003\u0002\u0002\u0002\u0708\u0707\u0003\u0002\u0002\u0002\u0709\u00b3",
    "\u0003\u0002\u0002\u0002\u070a\u070b\u0007[\u0002\u0002\u070b\u070c",
    "\u0007\u00ce\u0002\u0002\u070c\u070d\u0007\u00be\u0002\u0002\u070d\u070f",
    "\u0007\u00e7\u0002\u0002\u070e\u0710\u0005\u00b6\\\u0002\u070f\u070e",
    "\u0003\u0002\u0002\u0002\u0710\u0711\u0003\u0002\u0002\u0002\u0711\u070f",
    "\u0003\u0002\u0002\u0002\u0711\u0712\u0003\u0002\u0002\u0002\u0712\u0713",
    "\u0003\u0002\u0002\u0002\u0713\u0714\u0007\u00e8\u0002\u0002\u0714\u00b5",
    "\u0003\u0002\u0002\u0002\u0715\u0716\u0007\u00e5\u0002\u0002\u0716\u0717",
    "\u0007\u00ce\u0002\u0002\u0717\u0718\u0007\u00be\u0002\u0002\u0718\u0719",
    "\u0007\u00e7\u0002\u0002\u0719\u071d\b\\\u0001\u0002\u071a\u071b\u0005",
    "\u00b8]\u0002\u071b\u071c\b\\\u0001\u0002\u071c\u071e\u0003\u0002\u0002",
    "\u0002\u071d\u071a\u0003\u0002\u0002\u0002\u071e\u071f\u0003\u0002\u0002",
    "\u0002\u071f\u071d\u0003\u0002\u0002\u0002\u071f\u0720\u0003\u0002\u0002",
    "\u0002\u0720\u0721\u0003\u0002\u0002\u0002\u0721\u0722\u0007\u00e8\u0002",
    "\u0002\u0722\u0723\b\\\u0001\u0002\u0723\u00b7\u0003\u0002\u0002\u0002",
    "\u0724\u0728\u0005\u00a0Q\u0002\u0725\u0728\u0005b2\u0002\u0726\u0728",
    "\u0005\u0090I\u0002\u0727\u0724\u0003\u0002\u0002\u0002\u0727\u0725",
    "\u0003\u0002\u0002\u0002\u0727\u0726\u0003\u0002\u0002\u0002\u0728\u00b9",
    "\u0003\u0002\u0002\u0002\u0729\u072a\u0007n\u0002\u0002\u072a\u072b",
    "\u0007\u00ce\u0002\u0002\u072b\u072c\u0007\u00be\u0002\u0002\u072c\u072e",
    "\u0007\u00e7\u0002\u0002\u072d\u072f\u0005\u00bc_\u0002\u072e\u072d",
    "\u0003\u0002\u0002\u0002\u072f\u0730\u0003\u0002\u0002\u0002\u0730\u072e",
    "\u0003\u0002\u0002\u0002\u0730\u0731\u0003\u0002\u0002\u0002\u0731\u0732",
    "\u0003\u0002\u0002\u0002\u0732\u0733\u0007\u00e8\u0002\u0002\u0733\u00bb",
    "\u0003\u0002\u0002\u0002\u0734\u0735\u0007\u00e5\u0002\u0002\u0735\u0736",
    "\u0007\u00ce\u0002\u0002\u0736\u0737\u0007\u00be\u0002\u0002\u0737\u0738",
    "\u0007\u00e7\u0002\u0002\u0738\u073c\b_\u0001\u0002\u0739\u073a\u0005",
    "\u00be`\u0002\u073a\u073b\b_\u0001\u0002\u073b\u073d\u0003\u0002\u0002",
    "\u0002\u073c\u0739\u0003\u0002\u0002\u0002\u073d\u073e\u0003\u0002\u0002",
    "\u0002\u073e\u073c\u0003\u0002\u0002\u0002\u073e\u073f\u0003\u0002\u0002",
    "\u0002\u073f\u0740\u0003\u0002\u0002\u0002\u0740\u0741\u0007\u00e8\u0002",
    "\u0002\u0741\u0742\b_\u0001\u0002\u0742\u00bd\u0003\u0002\u0002\u0002",
    "\u0743\u0762\u0005\u00a0Q\u0002\u0744\u0762\u0005b2\u0002\u0745\u0762",
    "\u0005n8\u0002\u0746\u0747\u0007\u0087\u0002\u0002\u0747\u0748\u0007",
    "\u00ce\u0002\u0002\u0748\u0749\u0007\u00d2\u0002\u0002\u0749\u074e\u0007",
    "\u00e5\u0002\u0002\u074a\u074b\u0007\u00cd\u0002\u0002\u074b\u074d\u0007",
    "\u00e5\u0002\u0002\u074c\u074a\u0003\u0002\u0002\u0002\u074d\u0750\u0003",
    "\u0002\u0002\u0002\u074e\u074c\u0003\u0002\u0002\u0002\u074e\u074f\u0003",
    "\u0002\u0002\u0002\u074f\u0751\u0003\u0002\u0002\u0002\u0750\u074e\u0003",
    "\u0002\u0002\u0002\u0751\u0752\u0007\u00d3\u0002\u0002\u0752\u0762\u0007",
    "\u00be\u0002\u0002\u0753\u0754\u0007\u0087\u0002\u0002\u0754\u0755\u0007",
    "\u00ce\u0002\u0002\u0755\u0756\u0007\u00be\u0002\u0002\u0756\u075c\u0007",
    "\u00e7\u0002\u0002\u0757\u0758\u0007\u00d8\u0002\u0002\u0758\u0759\u0007",
    "\u00e7\u0002\u0002\u0759\u075a\u0007\u00e5\u0002\u0002\u075a\u075b\u0007",
    "\u00be\u0002\u0002\u075b\u075d\u0007\u00e8\u0002\u0002\u075c\u0757\u0003",
    "\u0002\u0002\u0002\u075d\u075e\u0003\u0002\u0002\u0002\u075e\u075c\u0003",
    "\u0002\u0002\u0002\u075e\u075f\u0003\u0002\u0002\u0002\u075f\u0760\u0003",
    "\u0002\u0002\u0002\u0760\u0762\u0007\u00e8\u0002\u0002\u0761\u0743\u0003",
    "\u0002\u0002\u0002\u0761\u0744\u0003\u0002\u0002\u0002\u0761\u0745\u0003",
    "\u0002\u0002\u0002\u0761\u0746\u0003\u0002\u0002\u0002\u0761\u0753\u0003",
    "\u0002\u0002\u0002\u0762\u00bf\u0003\u0002\u0002\u0002\u0763\u0764\u0007",
    "\u008e\u0002\u0002\u0764\u0765\u0007\u00ce\u0002\u0002\u0765\u0766\u0007",
    "\u00be\u0002\u0002\u0766\u0768\u0007\u00e7\u0002\u0002\u0767\u0769\u0005",
    "\u00c2b\u0002\u0768\u0767\u0003\u0002\u0002\u0002\u0769\u076a\u0003",
    "\u0002\u0002\u0002\u076a\u0768\u0003\u0002\u0002\u0002\u076a\u076b\u0003",
    "\u0002\u0002\u0002\u076b\u076c\u0003\u0002\u0002\u0002\u076c\u076d\u0007",
    "\u00e8\u0002\u0002\u076d\u00c1\u0003\u0002\u0002\u0002\u076e\u076f\u0007",
    "\u00e5\u0002\u0002\u076f\u0770\u0007\u00ce\u0002\u0002\u0770\u0771\u0007",
    "\u00e5\u0002\u0002\u0771\u0782\u0007\u00be\u0002\u0002\u0772\u0773\u0007",
    "\u00e5\u0002\u0002\u0773\u0774\u0007\u00ce\u0002\u0002\u0774\u0775\u0007",
    "\u00be\u0002\u0002\u0775\u0776\u0007\u00e7\u0002\u0002\u0776\u077a\b",
    "b\u0001\u0002\u0777\u0778\u0005\u00c4c\u0002\u0778\u0779\bb\u0001\u0002",
    "\u0779\u077b\u0003\u0002\u0002\u0002\u077a\u0777\u0003\u0002\u0002\u0002",
    "\u077b\u077c\u0003\u0002\u0002\u0002\u077c\u077a\u0003\u0002\u0002\u0002",
    "\u077c\u077d\u0003\u0002\u0002\u0002\u077d\u077e\u0003\u0002\u0002\u0002",
    "\u077e\u077f\u0007\u00e8\u0002\u0002\u077f\u0780\bb\u0001\u0002\u0780",
    "\u0782\u0003\u0002\u0002\u0002\u0781\u076e\u0003\u0002\u0002\u0002\u0781",
    "\u0772\u0003\u0002\u0002\u0002\u0782\u00c3\u0003\u0002\u0002\u0002\u0783",
    "\u0784\u0007]\u0002\u0002\u0784\u0785\u0007\u00ce\u0002\u0002\u0785",
    "\u0786\u0007\u00e5\u0002\u0002\u0786\u07a6\u0007\u00be\u0002\u0002\u0787",
    "\u07a6\u0005\u0168\u00b5\u0002\u0788\u07a6\u0005b2\u0002\u0789\u07a6",
    "\u0005n8\u0002\u078a\u078b\u0007\u0087\u0002\u0002\u078b\u078c\u0007",
    "\u00ce\u0002\u0002\u078c\u078d\u0007\u00d2\u0002\u0002\u078d\u0792\u0007",
    "\u00e5\u0002\u0002\u078e\u078f\u0007\u00cd\u0002\u0002\u078f\u0791\u0007",
    "\u00e5\u0002\u0002\u0790\u078e\u0003\u0002\u0002\u0002\u0791\u0794\u0003",
    "\u0002\u0002\u0002\u0792\u0790\u0003\u0002\u0002\u0002\u0792\u0793\u0003",
    "\u0002\u0002\u0002\u0793\u0795\u0003\u0002\u0002\u0002\u0794\u0792\u0003",
    "\u0002\u0002\u0002\u0795\u0796\u0007\u00d3\u0002\u0002\u0796\u07a6\u0007",
    "\u00be\u0002\u0002\u0797\u0798\u0007\u0087\u0002\u0002\u0798\u0799\u0007",
    "\u00ce\u0002\u0002\u0799\u079a\u0007\u00be\u0002\u0002\u079a\u07a0\u0007",
    "\u00e7\u0002\u0002\u079b\u079c\u0007\u00d8\u0002\u0002\u079c\u079d\u0007",
    "\u00e7\u0002\u0002\u079d\u079e\u0007\u00e5\u0002\u0002\u079e\u079f\u0007",
    "\u00be\u0002\u0002\u079f\u07a1\u0007\u00e8\u0002\u0002\u07a0\u079b\u0003",
    "\u0002\u0002\u0002\u07a1\u07a2\u0003\u0002\u0002\u0002\u07a2\u07a0\u0003",
    "\u0002\u0002\u0002\u07a2\u07a3\u0003\u0002\u0002\u0002\u07a3\u07a4\u0003",
    "\u0002\u0002\u0002\u07a4\u07a6\u0007\u00e8\u0002\u0002\u07a5\u0783\u0003",
    "\u0002\u0002\u0002\u07a5\u0787\u0003\u0002\u0002\u0002\u07a5\u0788\u0003",
    "\u0002\u0002\u0002\u07a5\u0789\u0003\u0002\u0002\u0002\u07a5\u078a\u0003",
    "\u0002\u0002\u0002\u07a5\u0797\u0003\u0002\u0002\u0002\u07a6\u00c5\u0003",
    "\u0002\u0002\u0002\u07a7\u07a8\u0007\u0093\u0002\u0002\u07a8\u07a9\u0007",
    "\u00ce\u0002\u0002\u07a9\u07aa\u0007\u00be\u0002\u0002\u07aa\u07ac\u0007",
    "\u00e7\u0002\u0002\u07ab\u07ad\u0005\u00c8e\u0002\u07ac\u07ab\u0003",
    "\u0002\u0002\u0002\u07ad\u07ae\u0003\u0002\u0002\u0002\u07ae\u07ac\u0003",
    "\u0002\u0002\u0002\u07ae\u07af\u0003\u0002\u0002\u0002\u07af\u07b0\u0003",
    "\u0002\u0002\u0002\u07b0\u07b1\u0007\u00e8\u0002\u0002\u07b1\u00c7\u0003",
    "\u0002\u0002\u0002\u07b2\u07b3\u0007\u00d8\u0002\u0002\u07b3\u07b4\u0007",
    "\u00e7\u0002\u0002\u07b4\u07b5\u0007\u00e5\u0002\u0002\u07b5\u07b6\u0007",
    "\u00ce\u0002\u0002\u07b6\u07b7\u0007\u00e5\u0002\u0002\u07b7\u07b8\u0007",
    "\u00be\u0002\u0002\u07b8\u07cc\u0007\u00e8\u0002\u0002\u07b9\u07ba\u0007",
    "\u00d8\u0002\u0002\u07ba\u07bb\u0007\u00e5\u0002\u0002\u07bb\u07bc\u0007",
    "\u00e7\u0002\u0002\u07bc\u07bd\u0007\u00ce\u0002\u0002\u07bd\u07be\u0007",
    "\u00be\u0002\u0002\u07be\u07bf\u0007\u00e7\u0002\u0002\u07bf\u07c3\b",
    "e\u0001\u0002\u07c0\u07c1\u0005\u00caf\u0002\u07c1\u07c2\be\u0001\u0002",
    "\u07c2\u07c4\u0003\u0002\u0002\u0002\u07c3\u07c0\u0003\u0002\u0002\u0002",
    "\u07c4\u07c5\u0003\u0002\u0002\u0002\u07c5\u07c3\u0003\u0002\u0002\u0002",
    "\u07c5\u07c6\u0003\u0002\u0002\u0002\u07c6\u07c7\u0003\u0002\u0002\u0002",
    "\u07c7\u07c8\u0007\u00e8\u0002\u0002\u07c8\u07c9\be\u0001\u0002\u07c9",
    "\u07ca\u0007\u00e8\u0002\u0002\u07ca\u07cc\u0003\u0002\u0002\u0002\u07cb",
    "\u07b2\u0003\u0002\u0002\u0002\u07cb\u07b9\u0003\u0002\u0002\u0002\u07cc",
    "\u00c9\u0003\u0002\u0002\u0002\u07cd\u07ce\u0007\u0092\u0002\u0002\u07ce",
    "\u07cf\u0007\u00ce\u0002\u0002\u07cf\u07d0\u0007\u00e5\u0002\u0002\u07d0",
    "\u07ee\u0007\u00be\u0002\u0002\u07d1\u07d2\u0007\u008f\u0002\u0002\u07d2",
    "\u07d3\u0007\u00ce\u0002\u0002\u07d3\u07d4\u0007\u00e5\u0002\u0002\u07d4",
    "\u07ee\u0007\u00be\u0002\u0002\u07d5\u07d6\u0007\u008c\u0002\u0002\u07d6",
    "\u07d7\u0007\u00ce\u0002\u0002\u07d7\u07d8\u0005\u0170\u00b9\u0002\u07d8",
    "\u07d9\u0007\u00be\u0002\u0002\u07d9\u07ee\u0003\u0002\u0002\u0002\u07da",
    "\u07db\u0007\u008b\u0002\u0002\u07db\u07dc\u0007\u00ce\u0002\u0002\u07dc",
    "\u07dd\u0007\u00e5\u0002\u0002\u07dd\u07ee\u0007\u00be\u0002\u0002\u07de",
    "\u07df\u0007\u008b\u0002\u0002\u07df\u07e0\u0007\u00ce\u0002\u0002\u07e0",
    "\u07e1\u0007\u00be\u0002\u0002\u07e1\u07e2\u0007\u00e7\u0002\u0002\u07e2",
    "\u07e6\bf\u0001\u0002\u07e3\u07e4\u0005\u00ccg\u0002\u07e4\u07e5\bf",
    "\u0001\u0002\u07e5\u07e7\u0003\u0002\u0002\u0002\u07e6\u07e3\u0003\u0002",
    "\u0002\u0002\u07e7\u07e8\u0003\u0002\u0002\u0002\u07e8\u07e6\u0003\u0002",
    "\u0002\u0002\u07e8\u07e9\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003\u0002",
    "\u0002\u0002\u07ea\u07eb\u0007\u00e8\u0002\u0002\u07eb\u07ec\bf\u0001",
    "\u0002\u07ec\u07ee\u0003\u0002\u0002\u0002\u07ed\u07cd\u0003\u0002\u0002",
    "\u0002\u07ed\u07d1\u0003\u0002\u0002\u0002\u07ed\u07d5\u0003\u0002\u0002",
    "\u0002\u07ed\u07da\u0003\u0002\u0002\u0002\u07ed\u07de\u0003\u0002\u0002",
    "\u0002\u07ee\u00cb\u0003\u0002\u0002\u0002\u07ef\u07f0\u0007]\u0002",
    "\u0002\u07f0\u07f1\u0007\u00ce\u0002\u0002\u07f1\u07f2\u0007\u00e5\u0002",
    "\u0002\u07f2\u07f5\u0007\u00be\u0002\u0002\u07f3\u07f5\u0005\u00d4k",
    "\u0002\u07f4\u07ef\u0003\u0002\u0002\u0002\u07f4\u07f3\u0003\u0002\u0002",
    "\u0002\u07f5\u00cd\u0003\u0002\u0002\u0002\u07f6\u07f7\u0007p\u0002",
    "\u0002\u07f7\u07f8\u0007\u00ce\u0002\u0002\u07f8\u07f9\u0007\u00be\u0002",
    "\u0002\u07f9\u07fb\u0007\u00e7\u0002\u0002\u07fa\u07fc\u0005\u00d0i",
    "\u0002\u07fb\u07fa\u0003\u0002\u0002\u0002\u07fc\u07fd\u0003\u0002\u0002",
    "\u0002\u07fd\u07fb\u0003\u0002\u0002\u0002\u07fd\u07fe\u0003\u0002\u0002",
    "\u0002\u07fe\u07ff\u0003\u0002\u0002\u0002\u07ff\u0800\u0007\u00e8\u0002",
    "\u0002\u0800\u00cf\u0003\u0002\u0002\u0002\u0801\u0802\u0007\u00e5\u0002",
    "\u0002\u0802\u0803\u0007\u00ce\u0002\u0002\u0803\u0804\u0007\u00be\u0002",
    "\u0002\u0804\u0805\u0007\u00e7\u0002\u0002\u0805\u0809\bi\u0001\u0002",
    "\u0806\u0807\u0005\u00d2j\u0002\u0807\u0808\bi\u0001\u0002\u0808\u080a",
    "\u0003\u0002\u0002\u0002\u0809\u0806\u0003\u0002\u0002\u0002\u080a\u080b",
    "\u0003\u0002\u0002\u0002\u080b\u0809\u0003\u0002\u0002\u0002\u080b\u080c",
    "\u0003\u0002\u0002\u0002\u080c\u080d\u0003\u0002\u0002\u0002\u080d\u080e",
    "\u0007\u00e8\u0002\u0002\u080e\u080f\bi\u0001\u0002\u080f\u00d1\u0003",
    "\u0002\u0002\u0002\u0810\u0814\u0005\u00a0Q\u0002\u0811\u0814\u0005",
    "\u0080A\u0002\u0812\u0814\u0005\u00e0q\u0002\u0813\u0810\u0003\u0002",
    "\u0002\u0002\u0813\u0811\u0003\u0002\u0002\u0002\u0813\u0812\u0003\u0002",
    "\u0002\u0002\u0814\u00d3\u0003\u0002\u0002\u0002\u0815\u0816\u0007\u008a",
    "\u0002\u0002\u0816\u0817\u0007\u00ce\u0002\u0002\u0817\u0818\u0007\u00be",
    "\u0002\u0002\u0818\u081a\u0007\u00e7\u0002\u0002\u0819\u081b\u0005\u00d6",
    "l\u0002\u081a\u0819\u0003\u0002\u0002\u0002\u081b\u081c\u0003\u0002",
    "\u0002\u0002\u081c\u081a\u0003\u0002\u0002\u0002\u081c\u081d\u0003\u0002",
    "\u0002\u0002\u081d\u081e\u0003\u0002\u0002\u0002\u081e\u081f\u0007\u00e8",
    "\u0002\u0002\u081f\u00d5\u0003\u0002\u0002\u0002\u0820\u0821\u0007\u00e5",
    "\u0002\u0002\u0821\u0822\u0007\u00ce\u0002\u0002\u0822\u0823\u0007\u00be",
    "\u0002\u0002\u0823\u0824\u0007\u00e7\u0002\u0002\u0824\u0828\bl\u0001",
    "\u0002\u0825\u0826\u0005\u00d8m\u0002\u0826\u0827\bl\u0001\u0002\u0827",
    "\u0829\u0003\u0002\u0002\u0002\u0828\u0825\u0003\u0002\u0002\u0002\u0829",
    "\u082a\u0003\u0002\u0002\u0002\u082a\u0828\u0003\u0002\u0002\u0002\u082a",
    "\u082b\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002\u082c",
    "\u082d\u0007\u00e8\u0002\u0002\u082d\u082e\bl\u0001\u0002\u082e\u00d7",
    "\u0003\u0002\u0002\u0002\u082f\u0830\u0007]\u0002\u0002\u0830\u0831",
    "\u0007\u00ce\u0002\u0002\u0831\u0832\u0007\u00e5\u0002\u0002\u0832\u0836",
    "\u0007\u00be\u0002\u0002\u0833\u0836\u0005\u0080A\u0002\u0834\u0836",
    "\u0005\u00e0q\u0002\u0835\u082f\u0003\u0002\u0002\u0002\u0835\u0833",
    "\u0003\u0002\u0002\u0002\u0835\u0834\u0003\u0002\u0002\u0002\u0836\u00d9",
    "\u0003\u0002\u0002\u0002\u0837\u0838\u0007\u008a\u0002\u0002\u0838\u0839",
    "\u0007\u00ce\u0002\u0002\u0839\u083a\u0007\u00be\u0002\u0002\u083a\u083c",
    "\u0007\u00e7\u0002\u0002\u083b\u083d\u0005\u00dco\u0002\u083c\u083b",
    "\u0003\u0002\u0002\u0002\u083d\u083e\u0003\u0002\u0002\u0002\u083e\u083c",
    "\u0003\u0002\u0002\u0002\u083e\u083f\u0003\u0002\u0002\u0002\u083f\u0840",
    "\u0003\u0002\u0002\u0002\u0840\u0841\u0007\u00e8\u0002\u0002\u0841\u00db",
    "\u0003\u0002\u0002\u0002\u0842\u0843\u0007\u00e5\u0002\u0002\u0843\u0844",
    "\u0007\u00ce\u0002\u0002\u0844\u0845\u0007\u00be\u0002\u0002\u0845\u0846",
    "\u0007\u00e7\u0002\u0002\u0846\u084a\bo\u0001\u0002\u0847\u0848\u0005",
    "\u00dep\u0002\u0848\u0849\bo\u0001\u0002\u0849\u084b\u0003\u0002\u0002",
    "\u0002\u084a\u0847\u0003\u0002\u0002\u0002\u084b\u084c\u0003\u0002\u0002",
    "\u0002\u084c\u084a\u0003\u0002\u0002\u0002\u084c\u084d\u0003\u0002\u0002",
    "\u0002\u084d\u084e\u0003\u0002\u0002\u0002\u084e\u084f\u0007\u00e8\u0002",
    "\u0002\u084f\u0850\bo\u0001\u0002\u0850\u00dd\u0003\u0002\u0002\u0002",
    "\u0851\u0852\u0007]\u0002\u0002\u0852\u0853\u0007\u00ce\u0002\u0002",
    "\u0853\u0854\u0007\u00e5\u0002\u0002\u0854\u0858\u0007\u00be\u0002\u0002",
    "\u0855\u0858\u0005\u0082B\u0002\u0856\u0858\u0005\u00e0q\u0002\u0857",
    "\u0851\u0003\u0002\u0002\u0002\u0857\u0855\u0003\u0002\u0002\u0002\u0857",
    "\u0856\u0003\u0002\u0002\u0002\u0858\u00df\u0003\u0002\u0002\u0002\u0859",
    "\u085a\u0007\u00e5\u0002\u0002\u085a\u085b\u0007\u00ce\u0002\u0002\u085b",
    "\u085c\u0007\u00e5\u0002\u0002\u085c\u086d\u0007\u00be\u0002\u0002\u085d",
    "\u085e\u0007\u00e5\u0002\u0002\u085e\u085f\u0007\u00ce\u0002\u0002\u085f",
    "\u0860\u0007\u00be\u0002\u0002\u0860\u0861\u0007\u00e7\u0002\u0002\u0861",
    "\u0865\bq\u0001\u0002\u0862\u0863\u0005\u00e2r\u0002\u0863\u0864\bq",
    "\u0001\u0002\u0864\u0866\u0003\u0002\u0002\u0002\u0865\u0862\u0003\u0002",
    "\u0002\u0002\u0866\u0867\u0003\u0002\u0002\u0002\u0867\u0865\u0003\u0002",
    "\u0002\u0002\u0867\u0868\u0003\u0002\u0002\u0002\u0868\u0869\u0003\u0002",
    "\u0002\u0002\u0869\u086a\u0007\u00e8\u0002\u0002\u086a\u086b\bq\u0001",
    "\u0002\u086b\u086d\u0003\u0002\u0002\u0002\u086c\u0859\u0003\u0002\u0002",
    "\u0002\u086c\u085d\u0003\u0002\u0002\u0002\u086d\u00e1\u0003\u0002\u0002",
    "\u0002\u086e\u0884\u0005\u0168\u00b5\u0002\u086f\u0884\u0005\u0080A",
    "\u0002\u0870\u0871\u0007\u0090\u0002\u0002\u0871\u0872\u0007\u00ce\u0002",
    "\u0002\u0872\u0873\u0007\u00e5\u0002\u0002\u0873\u0884\u0007\u00be\u0002",
    "\u0002\u0874\u0875\u0007\u0090\u0002\u0002\u0875\u0876\u0007\u00ce\u0002",
    "\u0002\u0876\u0877\u0007\u00be\u0002\u0002\u0877\u0878\u0007\u00e7\u0002",
    "\u0002\u0878\u087c\br\u0001\u0002\u0879\u087a\u0005\u00e4s\u0002\u087a",
    "\u087b\br\u0001\u0002\u087b\u087d\u0003\u0002\u0002\u0002\u087c\u0879",
    "\u0003\u0002\u0002\u0002\u087d\u087e\u0003\u0002\u0002\u0002\u087e\u087c",
    "\u0003\u0002\u0002\u0002\u087e\u087f\u0003\u0002\u0002\u0002\u087f\u0880",
    "\u0003\u0002\u0002\u0002\u0880\u0881\u0007\u00e8\u0002\u0002\u0881\u0882",
    "\br\u0001\u0002\u0882\u0884\u0003\u0002\u0002\u0002\u0883\u086e\u0003",
    "\u0002\u0002\u0002\u0883\u086f\u0003\u0002\u0002\u0002\u0883\u0870\u0003",
    "\u0002\u0002\u0002\u0883\u0874\u0003\u0002\u0002\u0002\u0884\u00e3\u0003",
    "\u0002\u0002\u0002\u0885\u0886\u0007\u0094\u0002\u0002\u0886\u0887\u0007",
    "\u00ce\u0002\u0002\u0887\u0888\u0007\u00e5\u0002\u0002\u0888\u0898\u0007",
    "\u00be\u0002\u0002\u0889\u088a\u0007\u0091\u0002\u0002\u088a\u088b\u0007",
    "\u00ce\u0002\u0002\u088b\u088c\u0007\u00be\u0002\u0002\u088c\u0892\u0007",
    "\u00e7\u0002\u0002\u088d\u088e\u0007\u00d8\u0002\u0002\u088e\u088f\u0007",
    "\u00e7\u0002\u0002\u088f\u0890\u0007\u00e5\u0002\u0002\u0890\u0891\u0007",
    "\u00be\u0002\u0002\u0891\u0893\u0007\u00e8\u0002\u0002\u0892\u088d\u0003",
    "\u0002\u0002\u0002\u0893\u0894\u0003\u0002\u0002\u0002\u0894\u0892\u0003",
    "\u0002\u0002\u0002\u0894\u0895\u0003\u0002\u0002\u0002\u0895\u0896\u0003",
    "\u0002\u0002\u0002\u0896\u0898\u0007\u00e8\u0002\u0002\u0897\u0885\u0003",
    "\u0002\u0002\u0002\u0897\u0889\u0003\u0002\u0002\u0002\u0898\u00e5\u0003",
    "\u0002\u0002\u0002\u0899\u089a\u0007r\u0002\u0002\u089a\u089b\u0007",
    "\u00ce\u0002\u0002\u089b\u089d\u0007\u00e7\u0002\u0002\u089c\u089e\u0005",
    "\u00e8u\u0002\u089d\u089c\u0003\u0002\u0002\u0002\u089e\u089f\u0003",
    "\u0002\u0002\u0002\u089f\u089d\u0003\u0002\u0002\u0002\u089f\u08a0\u0003",
    "\u0002\u0002\u0002\u08a0\u08a1\u0003\u0002\u0002\u0002\u08a1\u08a2\u0007",
    "\u00e8\u0002\u0002\u08a2\u00e7\u0003\u0002\u0002\u0002\u08a3\u08a4\u0007",
    "\u00e5\u0002\u0002\u08a4\u08a5\u0007\u00ce\u0002\u0002\u08a5\u08a6\u0007",
    "\u00be\u0002\u0002\u08a6\u08a7\u0007\u00e7\u0002\u0002\u08a7\u08ab\b",
    "u\u0001\u0002\u08a8\u08a9\u0005\u00eav\u0002\u08a9\u08aa\bu\u0001\u0002",
    "\u08aa\u08ac\u0003\u0002\u0002\u0002\u08ab\u08a8\u0003\u0002\u0002\u0002",
    "\u08ac\u08ad\u0003\u0002\u0002\u0002\u08ad\u08ab\u0003\u0002\u0002\u0002",
    "\u08ad\u08ae\u0003\u0002\u0002\u0002\u08ae\u08af\u0003\u0002\u0002\u0002",
    "\u08af\u08b0\u0007\u00e8\u0002\u0002\u08b0\u08b1\bu\u0001\u0002\u08b1",
    "\u00e9\u0003\u0002\u0002\u0002\u08b2\u08b3\u0007X\u0002\u0002\u08b3",
    "\u08b4\u0007\u00ce\u0002\u0002\u08b4\u08b5\u0007\u00e5\u0002\u0002\u08b5",
    "\u08dc\u0007\u00be\u0002\u0002\u08b6\u08dc\u0005\u0168\u00b5\u0002\u08b7",
    "\u08dc\u0005\u009cO\u0002\u08b8\u08b9\u0007R\u0002\u0002\u08b9\u08ba",
    "\u0007\u00ce\u0002\u0002\u08ba\u08bb\u0007\u00e5\u0002\u0002\u08bb\u08dc",
    "\u0007\u00be\u0002\u0002\u08bc\u08dc\u0005b2\u0002\u08bd\u08dc\u0005",
    "\u00c0a\u0002\u08be\u08dc\u0005\u00c6d\u0002\u08bf\u08dc\u0005\u00d4",
    "k\u0002\u08c0\u08c1\u0007\u00bb\u0002\u0002\u08c1\u08c2\u0007\u00ce",
    "\u0002\u0002\u08c2\u08c3\u0007\u00d2\u0002\u0002\u08c3\u08c8\u0007\u00e5",
    "\u0002\u0002\u08c4\u08c5\u0007\u00cd\u0002\u0002\u08c5\u08c7\u0007\u00e5",
    "\u0002\u0002\u08c6\u08c4\u0003\u0002\u0002\u0002\u08c7\u08ca\u0003\u0002",
    "\u0002\u0002\u08c8\u08c6\u0003\u0002\u0002\u0002\u08c8\u08c9\u0003\u0002",
    "\u0002\u0002\u08c9\u08cb\u0003\u0002\u0002\u0002\u08ca\u08c8\u0003\u0002",
    "\u0002\u0002\u08cb\u08cc\u0007\u00d3\u0002\u0002\u08cc\u08dc\u0007\u00be",
    "\u0002\u0002\u08cd\u08ce\u0007\u00bb\u0002\u0002\u08ce\u08cf\u0007\u00ce",
    "\u0002\u0002\u08cf\u08d0\u0007\u00be\u0002\u0002\u08d0\u08d6\u0007\u00e7",
    "\u0002\u0002\u08d1\u08d2\u0007\u00d8\u0002\u0002\u08d2\u08d3\u0007\u00e7",
    "\u0002\u0002\u08d3\u08d4\u0007\u00e5\u0002\u0002\u08d4\u08d5\u0007\u00be",
    "\u0002\u0002\u08d5\u08d7\u0007\u00e8\u0002\u0002\u08d6\u08d1\u0003\u0002",
    "\u0002\u0002\u08d7\u08d8\u0003\u0002\u0002\u0002\u08d8\u08d6\u0003\u0002",
    "\u0002\u0002\u08d8\u08d9\u0003\u0002\u0002\u0002\u08d9\u08da\u0003\u0002",
    "\u0002\u0002\u08da\u08dc\u0007\u00e8\u0002\u0002\u08db\u08b2\u0003\u0002",
    "\u0002\u0002\u08db\u08b6\u0003\u0002\u0002\u0002\u08db\u08b7\u0003\u0002",
    "\u0002\u0002\u08db\u08b8\u0003\u0002\u0002\u0002\u08db\u08bc\u0003\u0002",
    "\u0002\u0002\u08db\u08bd\u0003\u0002\u0002\u0002\u08db\u08be\u0003\u0002",
    "\u0002\u0002\u08db\u08bf\u0003\u0002\u0002\u0002\u08db\u08c0\u0003\u0002",
    "\u0002\u0002\u08db\u08cd\u0003\u0002\u0002\u0002\u08dc\u00eb\u0003\u0002",
    "\u0002\u0002\u08dd\u08de\u0007s\u0002\u0002\u08de\u08df\u0007\u00ce",
    "\u0002\u0002\u08df\u08e0\u0007\u00be\u0002\u0002\u08e0\u08e2\u0007\u00e7",
    "\u0002\u0002\u08e1\u08e3\u0005\u00eex\u0002\u08e2\u08e1\u0003\u0002",
    "\u0002\u0002\u08e3\u08e4\u0003\u0002\u0002\u0002\u08e4\u08e2\u0003\u0002",
    "\u0002\u0002\u08e4\u08e5\u0003\u0002\u0002\u0002\u08e5\u08e6\u0003\u0002",
    "\u0002\u0002\u08e6\u08e7\u0007\u00e8\u0002\u0002\u08e7\u00ed\u0003\u0002",
    "\u0002\u0002\u08e8\u08e9\u0007\u00e5\u0002\u0002\u08e9\u08ea\u0007\u00ce",
    "\u0002\u0002\u08ea\u08eb\u0007\u00be\u0002\u0002\u08eb\u08ec\u0007\u00e7",
    "\u0002\u0002\u08ec\u08f0\bx\u0001\u0002\u08ed\u08ee\u0005\u00f0y\u0002",
    "\u08ee\u08ef\bx\u0001\u0002\u08ef\u08f1\u0003\u0002\u0002\u0002\u08f0",
    "\u08ed\u0003\u0002\u0002\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2",
    "\u08f0\u0003\u0002\u0002\u0002\u08f2\u08f3\u0003\u0002\u0002\u0002\u08f3",
    "\u08f4\u0003\u0002\u0002\u0002\u08f4\u08f5\u0007\u00e8\u0002\u0002\u08f5",
    "\u08f6\bx\u0001\u0002\u08f6\u00ef\u0003\u0002\u0002\u0002\u08f7\u08f8",
    "\u0007]\u0002\u0002\u08f8\u08f9\u0007\u00ce\u0002\u0002\u08f9\u08fa",
    "\u0007\u00e5\u0002\u0002\u08fa\u091b\u0007\u00be\u0002\u0002\u08fb\u091b",
    "\u0005\u0168\u00b5\u0002\u08fc\u091b\u0005\u009cO\u0002\u08fd\u091b",
    "\u0005b2\u0002\u08fe\u08ff\u0007\u00bb\u0002\u0002\u08ff\u0900\u0007",
    "\u00ce\u0002\u0002\u0900\u0901\u0007\u00d2\u0002\u0002\u0901\u0906\u0007",
    "\u00e5\u0002\u0002\u0902\u0903\u0007\u00cd\u0002\u0002\u0903\u0905\u0007",
    "\u00e5\u0002\u0002\u0904\u0902\u0003\u0002\u0002\u0002\u0905\u0908\u0003",
    "\u0002\u0002\u0002\u0906\u0904\u0003\u0002\u0002\u0002\u0906\u0907\u0003",
    "\u0002\u0002\u0002\u0907\u0909\u0003\u0002\u0002\u0002\u0908\u0906\u0003",
    "\u0002\u0002\u0002\u0909\u090a\u0007\u00d3\u0002\u0002\u090a\u091b\u0007",
    "\u00be\u0002\u0002\u090b\u090c\u0007\u00bb\u0002\u0002\u090c\u090d\u0007",
    "\u00ce\u0002\u0002\u090d\u090e\u0007\u00be\u0002\u0002\u090e\u0914\u0007",
    "\u00e7\u0002\u0002\u090f\u0910\u0007\u00d8\u0002\u0002\u0910\u0911\u0007",
    "\u00e7\u0002\u0002\u0911\u0912\u0007\u00e5\u0002\u0002\u0912\u0913\u0007",
    "\u00be\u0002\u0002\u0913\u0915\u0007\u00e8\u0002\u0002\u0914\u090f\u0003",
    "\u0002\u0002\u0002\u0915\u0916\u0003\u0002\u0002\u0002\u0916\u0914\u0003",
    "\u0002\u0002\u0002\u0916\u0917\u0003\u0002\u0002\u0002\u0917\u0918\u0003",
    "\u0002\u0002\u0002\u0918\u091b\u0007\u00e8\u0002\u0002\u0919\u091b\u0005",
    "\u00dan\u0002\u091a\u08f7\u0003\u0002\u0002\u0002\u091a\u08fb\u0003",
    "\u0002\u0002\u0002\u091a\u08fc\u0003\u0002\u0002\u0002\u091a\u08fd\u0003",
    "\u0002\u0002\u0002\u091a\u08fe\u0003\u0002\u0002\u0002\u091a\u090b\u0003",
    "\u0002\u0002\u0002\u091a\u0919\u0003\u0002\u0002\u0002\u091b\u00f1\u0003",
    "\u0002\u0002\u0002\u091c\u091d\u0007u\u0002\u0002\u091d\u091e\u0007",
    "\u00ce\u0002\u0002\u091e\u091f\u0007\u00be\u0002\u0002\u091f\u0921\u0007",
    "\u00e7\u0002\u0002\u0920\u0922\u0005\u00f4{\u0002\u0921\u0920\u0003",
    "\u0002\u0002\u0002\u0922\u0923\u0003\u0002\u0002\u0002\u0923\u0921\u0003",
    "\u0002\u0002\u0002\u0923\u0924\u0003\u0002\u0002\u0002\u0924\u0925\u0003",
    "\u0002\u0002\u0002\u0925\u0926\u0007\u00e8\u0002\u0002\u0926\u00f3\u0003",
    "\u0002\u0002\u0002\u0927\u0928\u0007\u00e5\u0002\u0002\u0928\u0929\u0007",
    "\u00ce\u0002\u0002\u0929\u092a\u0007\u00be\u0002\u0002\u092a\u092b\u0007",
    "\u00e7\u0002\u0002\u092b\u092f\b{\u0001\u0002\u092c\u092d\u0005\u00f6",
    "|\u0002\u092d\u092e\b{\u0001\u0002\u092e\u0930\u0003\u0002\u0002\u0002",
    "\u092f\u092c\u0003\u0002\u0002\u0002\u0930\u0931\u0003\u0002\u0002\u0002",
    "\u0931\u092f\u0003\u0002\u0002\u0002\u0931\u0932\u0003\u0002\u0002\u0002",
    "\u0932\u0933\u0003\u0002\u0002\u0002\u0933\u0934\u0007\u00e8\u0002\u0002",
    "\u0934\u0935\b{\u0001\u0002\u0935\u00f5\u0003\u0002\u0002\u0002\u0936",
    "\u0937\u0007X\u0002\u0002\u0937\u0938\u0007\u00ce\u0002\u0002\u0938",
    "\u0939\u0007\u00e5\u0002\u0002\u0939\u0961\u0007\u00be\u0002\u0002\u093a",
    "\u0961\u0005\u0168\u00b5\u0002\u093b\u0961\u0005\u009cO\u0002\u093c",
    "\u093d\u0007R\u0002\u0002\u093d\u093e\u0007\u00ce\u0002\u0002\u093e",
    "\u093f\u0007\u00e5\u0002\u0002\u093f\u0961\u0007\u00be\u0002\u0002\u0940",
    "\u0961\u0005b2\u0002\u0941\u0942\u0007\t\u0002\u0002\u0942\u0943\u0007",
    "\u00ce\u0002\u0002\u0943\u0944\u0007\u00d2\u0002\u0002\u0944\u0949\u0005",
    "\u0166\u00b4\u0002\u0945\u0946\u0007\u00cd\u0002\u0002\u0946\u0948\u0005",
    "\u0166\u00b4\u0002\u0947\u0945\u0003\u0002\u0002\u0002\u0948\u094b\u0003",
    "\u0002\u0002\u0002\u0949\u0947\u0003\u0002\u0002\u0002\u0949\u094a\u0003",
    "\u0002\u0002\u0002\u094a\u094c\u0003\u0002\u0002\u0002\u094b\u0949\u0003",
    "\u0002\u0002\u0002\u094c\u094d\u0007\u00d3\u0002\u0002\u094d\u094e\u0007",
    "\u00be\u0002\u0002\u094e\u0961\u0003\u0002\u0002\u0002\u094f\u0950\u0007",
    "\t\u0002\u0002\u0950\u0951\u0007\u00ce\u0002\u0002\u0951\u0952\u0007",
    "\u00be\u0002\u0002\u0952\u0959\u0007\u00e7\u0002\u0002\u0953\u0954\u0007",
    "\u00d8\u0002\u0002\u0954\u0955\u0007\u00e7\u0002\u0002\u0955\u0956\u0005",
    "\u0166\u00b4\u0002\u0956\u0957\u0007\u00be\u0002\u0002\u0957\u0958\u0007",
    "\u00e8\u0002\u0002\u0958\u095a\u0003\u0002\u0002\u0002\u0959\u0953\u0003",
    "\u0002\u0002\u0002\u095a\u095b\u0003\u0002\u0002\u0002\u095b\u0959\u0003",
    "\u0002\u0002\u0002\u095b\u095c\u0003\u0002\u0002\u0002\u095c\u095d\u0003",
    "\u0002\u0002\u0002\u095d\u095e\u0007\u00e8\u0002\u0002\u095e\u0961\u0003",
    "\u0002\u0002\u0002\u095f\u0961\u0005\u00fe\u0080\u0002\u0960\u0936\u0003",
    "\u0002\u0002\u0002\u0960\u093a\u0003\u0002\u0002\u0002\u0960\u093b\u0003",
    "\u0002\u0002\u0002\u0960\u093c\u0003\u0002\u0002\u0002\u0960\u0940\u0003",
    "\u0002\u0002\u0002\u0960\u0941\u0003\u0002\u0002\u0002\u0960\u094f\u0003",
    "\u0002\u0002\u0002\u0960\u095f\u0003\u0002\u0002\u0002\u0961\u00f7\u0003",
    "\u0002\u0002\u0002\u0962\u0963\u0007\n\u0002\u0002\u0963\u0964\u0007",
    "\u00ce\u0002\u0002\u0964\u0965\u0007\u00be\u0002\u0002\u0965\u0967\u0007",
    "\u00e7\u0002\u0002\u0966\u0968\u0005\u00fa~\u0002\u0967\u0966\u0003",
    "\u0002\u0002\u0002\u0968\u0969\u0003\u0002\u0002\u0002\u0969\u0967\u0003",
    "\u0002\u0002\u0002\u0969\u096a\u0003\u0002\u0002\u0002\u096a\u096b\u0003",
    "\u0002\u0002\u0002\u096b\u096c\u0007\u00e8\u0002\u0002\u096c\u00f9\u0003",
    "\u0002\u0002\u0002\u096d\u096e\u0007\u00d8\u0002\u0002\u096e\u096f\u0007",
    "\u00e7\u0002\u0002\u096f\u0970\u0007\u00e5\u0002\u0002\u0970\u0971\u0007",
    "\u00ce\u0002\u0002\u0971\u0972\u0007\u00be\u0002\u0002\u0972\u0973\u0007",
    "\u00e7\u0002\u0002\u0973\u0977\b~\u0001\u0002\u0974\u0975\u0005\u00fc",
    "\u007f\u0002\u0975\u0976\b~\u0001\u0002\u0976\u0978\u0003\u0002\u0002",
    "\u0002\u0977\u0974\u0003\u0002\u0002\u0002\u0978\u0979\u0003\u0002\u0002",
    "\u0002\u0979\u0977\u0003\u0002\u0002\u0002\u0979\u097a\u0003\u0002\u0002",
    "\u0002\u097a\u097b\u0003\u0002\u0002\u0002\u097b\u097c\u0007\u00e8\u0002",
    "\u0002\u097c\u097d\b~\u0001\u0002\u097d\u097e\u0007\u00e8\u0002\u0002",
    "\u097e\u00fb\u0003\u0002\u0002\u0002\u097f\u0980\u0007]\u0002\u0002",
    "\u0980\u0981\u0007\u00ce\u0002\u0002\u0981\u0982\u0007\u00e5\u0002\u0002",
    "\u0982\u09a3\u0007\u00be\u0002\u0002\u0983\u09a3\u0005\u0168\u00b5\u0002",
    "\u0984\u09a3\u0005\u009cO\u0002\u0985\u09a3\u0005h5\u0002\u0986\u0987",
    "\u0007\t\u0002\u0002\u0987\u0988\u0007\u00ce\u0002\u0002\u0988\u0989",
    "\u0007\u00d2\u0002\u0002\u0989\u098e\u0007\u00e5\u0002\u0002\u098a\u098b",
    "\u0007\u00cd\u0002\u0002\u098b\u098d\u0007\u00e5\u0002\u0002\u098c\u098a",
    "\u0003\u0002\u0002\u0002\u098d\u0990\u0003\u0002\u0002\u0002\u098e\u098c",
    "\u0003\u0002\u0002\u0002\u098e\u098f\u0003\u0002\u0002\u0002\u098f\u0991",
    "\u0003\u0002\u0002\u0002\u0990\u098e\u0003\u0002\u0002\u0002\u0991\u0992",
    "\u0007\u00d3\u0002\u0002\u0992\u09a3\u0007\u00be\u0002\u0002\u0993\u0994",
    "\u0007\t\u0002\u0002\u0994\u0995\u0007\u00ce\u0002\u0002\u0995\u0996",
    "\u0007\u00be\u0002\u0002\u0996\u099c\u0007\u00e7\u0002\u0002\u0997\u0998",
    "\u0007\u00d8\u0002\u0002\u0998\u0999\u0007\u00e7\u0002\u0002\u0999\u099a",
    "\u0007\u00e5\u0002\u0002\u099a\u099b\u0007\u00be\u0002\u0002\u099b\u099d",
    "\u0007\u00e8\u0002\u0002\u099c\u0997\u0003\u0002\u0002\u0002\u099d\u099e",
    "\u0003\u0002\u0002\u0002\u099e\u099c\u0003\u0002\u0002\u0002\u099e\u099f",
    "\u0003\u0002\u0002\u0002\u099f\u09a0\u0003\u0002\u0002\u0002\u09a0\u09a3",
    "\u0007\u00e8\u0002\u0002\u09a1\u09a3\u0005\u00fe\u0080\u0002\u09a2\u097f",
    "\u0003\u0002\u0002\u0002\u09a2\u0983\u0003\u0002\u0002\u0002\u09a2\u0984",
    "\u0003\u0002\u0002\u0002\u09a2\u0985\u0003\u0002\u0002\u0002\u09a2\u0986",
    "\u0003\u0002\u0002\u0002\u09a2\u0993\u0003\u0002\u0002\u0002\u09a2\u09a1",
    "\u0003\u0002\u0002\u0002\u09a3\u00fd\u0003\u0002\u0002\u0002\u09a4\u09a5",
    "\u0007\u000b\u0002\u0002\u09a5\u09a6\u0007\u00ce\u0002\u0002\u09a6\u09a7",
    "\u0007\u00be\u0002\u0002\u09a7\u09a9\u0007\u00e7\u0002\u0002\u09a8\u09aa",
    "\u0005\u0100\u0081\u0002\u09a9\u09a8\u0003\u0002\u0002\u0002\u09aa\u09ab",
    "\u0003\u0002\u0002\u0002\u09ab\u09a9\u0003\u0002\u0002\u0002\u09ab\u09ac",
    "\u0003\u0002\u0002\u0002\u09ac\u09ad\u0003\u0002\u0002\u0002\u09ad\u09ae",
    "\u0007\u00e8\u0002\u0002\u09ae\u00ff\u0003\u0002\u0002\u0002\u09af\u09b0",
    "\u0007\u00e5\u0002\u0002\u09b0\u09b1\u0007\u00ce\u0002\u0002\u09b1\u09b2",
    "\u0007\u00be\u0002\u0002\u09b2\u09b3\u0007\u00e7\u0002\u0002\u09b3\u09b7",
    "\b\u0081\u0001\u0002\u09b4\u09b5\u0005\u0102\u0082\u0002\u09b5\u09b6",
    "\b\u0081\u0001\u0002\u09b6\u09b8\u0003\u0002\u0002\u0002\u09b7\u09b4",
    "\u0003\u0002\u0002\u0002\u09b8\u09b9\u0003\u0002\u0002\u0002\u09b9\u09b7",
    "\u0003\u0002\u0002\u0002\u09b9\u09ba\u0003\u0002\u0002\u0002\u09ba\u09bb",
    "\u0003\u0002\u0002\u0002\u09bb\u09bc\u0007\u00e8\u0002\u0002\u09bc\u09bd",
    "\b\u0081\u0001\u0002\u09bd\u0101\u0003\u0002\u0002\u0002\u09be\u0a07",
    "\u0005\u0168\u00b5\u0002\u09bf\u09c0\u0007\f\u0002\u0002\u09c0\u09c1",
    "\u0007\u00ce\u0002\u0002\u09c1\u09c2\u0007\u00e5\u0002\u0002\u09c2\u0a07",
    "\u0007\u00be\u0002\u0002\u09c3\u09c4\u0007\f\u0002\u0002\u09c4\u09c5",
    "\u0007\u00ce\u0002\u0002\u09c5\u09c6\u0007\u00be\u0002\u0002\u09c6\u09c7",
    "\u0007\u00e7\u0002\u0002\u09c7\u09c8\u0007]\u0002\u0002\u09c8\u09c9",
    "\u0007\u00ce\u0002\u0002\u09c9\u09ca\u0007\u00e5\u0002\u0002\u09ca\u09cb",
    "\u0007\u00be\u0002\u0002\u09cb\u0a07\u0007\u00e8\u0002\u0002\u09cc\u09cd",
    "\u0007\r\u0002\u0002\u09cd\u09ce\u0007\u00ce\u0002\u0002\u09ce\u0a07",
    "\u0005\u0166\u00b4\u0002\u09cf\u09d0\u0007\u000e\u0002\u0002\u09d0\u09d1",
    "\u0007\u00ce\u0002\u0002\u09d1\u09d2\u0007\u00be\u0002\u0002\u09d2\u09d3",
    "\u0007\u00e7\u0002\u0002\u09d3\u09d7\b\u0082\u0001\u0002\u09d4\u09d5",
    "\u0005\u0104\u0083\u0002\u09d5\u09d6\b\u0082\u0001\u0002\u09d6\u09d8",
    "\u0003\u0002\u0002\u0002\u09d7\u09d4\u0003\u0002\u0002\u0002\u09d8\u09d9",
    "\u0003\u0002\u0002\u0002\u09d9\u09d7\u0003\u0002\u0002\u0002\u09d9\u09da",
    "\u0003\u0002\u0002\u0002\u09da\u09db\u0003\u0002\u0002\u0002\u09db\u09dc",
    "\u0007\u00e8\u0002\u0002\u09dc\u09dd\b\u0082\u0001\u0002\u09dd\u0a07",
    "\u0003\u0002\u0002\u0002\u09de\u09df\u0007\u000f\u0002\u0002\u09df\u09e0",
    "\u0007\u00ce\u0002\u0002\u09e0\u09e1\u0005\u0092J\u0002\u09e1\u09e2",
    "\u0007\u00be\u0002\u0002\u09e2\u0a07\u0003\u0002\u0002\u0002\u09e3\u09e4",
    "\u0007\u000f\u0002\u0002\u09e4\u09e5\u0007\u00ce\u0002\u0002\u09e5\u09e6",
    "\u0007\u00be\u0002\u0002\u09e6\u09e7\u0007\u00e7\u0002\u0002\u09e7\u09e8",
    "\u0007\u0010\u0002\u0002\u09e8\u09e9\u0007\u00ce\u0002\u0002\u09e9\u09ea",
    "\u0005\u0092J\u0002\u09ea\u09eb\u0007\u00be\u0002\u0002\u09eb\u09ec",
    "\u0007\u00e8\u0002\u0002\u09ec\u0a07\u0003\u0002\u0002\u0002\u09ed\u09ee",
    "\u0007\u0011\u0002\u0002\u09ee\u09ef\u0007\u00ce\u0002\u0002\u09ef\u09f0",
    "\u0005\u0166\u00b4\u0002\u09f0\u09f1\u0007\u00be\u0002\u0002\u09f1\u0a07",
    "\u0003\u0002\u0002\u0002\u09f2\u09f3\u0007\u0012\u0002\u0002\u09f3\u09f4",
    "\u0007\u00ce\u0002\u0002\u09f4\u09f5\u0005\u017c\u00bf\u0002\u09f5\u09f6",
    "\u0007\u00be\u0002\u0002\u09f6\u0a07\u0003\u0002\u0002\u0002\u09f7\u09f8",
    "\u0007\u0013\u0002\u0002\u09f8\u09f9\u0007\u00ce\u0002\u0002\u09f9\u09fa",
    "\u0007\u00e5\u0002\u0002\u09fa\u0a07\u0007\u00be\u0002\u0002\u09fb\u09fc",
    "\u0007\u0014\u0002\u0002\u09fc\u09fd\u0007\u00ce\u0002\u0002\u09fd\u09fe",
    "\u0007\u00e5\u0002\u0002\u09fe\u0a07\u0007\u00be\u0002\u0002\u09ff\u0a00",
    "\u0007\u0014\u0002\u0002\u0a00\u0a01\u0007\u00ce\u0002\u0002\u0a01\u0a02",
    "\u0007\u00be\u0002\u0002\u0a02\u0a03\u0007\u00e7\u0002\u0002\u0a03\u0a04",
    "\u0005\u00e0q\u0002\u0a04\u0a05\u0007\u00e8\u0002\u0002\u0a05\u0a07",
    "\u0003\u0002\u0002\u0002\u0a06\u09be\u0003\u0002\u0002\u0002\u0a06\u09bf",
    "\u0003\u0002\u0002\u0002\u0a06\u09c3\u0003\u0002\u0002\u0002\u0a06\u09cc",
    "\u0003\u0002\u0002\u0002\u0a06\u09cf\u0003\u0002\u0002\u0002\u0a06\u09de",
    "\u0003\u0002\u0002\u0002\u0a06\u09e3\u0003\u0002\u0002\u0002\u0a06\u09ed",
    "\u0003\u0002\u0002\u0002\u0a06\u09f2\u0003\u0002\u0002\u0002\u0a06\u09f7",
    "\u0003\u0002\u0002\u0002\u0a06\u09fb\u0003\u0002\u0002\u0002\u0a06\u09ff",
    "\u0003\u0002\u0002\u0002\u0a07\u0103\u0003\u0002\u0002\u0002\u0a08\u0a09",
    "\u0007\u008f\u0002\u0002\u0a09\u0a0a\u0007\u00ce\u0002\u0002\u0a0a\u0a0b",
    "\u0007\u00e5\u0002\u0002\u0a0b\u0a15\u0007\u00be\u0002\u0002\u0a0c\u0a0d",
    "\u0007\u0015\u0002\u0002\u0a0d\u0a0e\u0007\u00ce\u0002\u0002\u0a0e\u0a0f",
    "\u0007\u00e5\u0002\u0002\u0a0f\u0a15\u0007\u00be\u0002\u0002\u0a10\u0a11",
    "\u0007\u0092\u0002\u0002\u0a11\u0a12\u0007\u00ce\u0002\u0002\u0a12\u0a13",
    "\u0007\u00e5\u0002\u0002\u0a13\u0a15\u0007\u00be\u0002\u0002\u0a14\u0a08",
    "\u0003\u0002\u0002\u0002\u0a14\u0a0c\u0003\u0002\u0002\u0002\u0a14\u0a10",
    "\u0003\u0002\u0002\u0002\u0a15\u0105\u0003\u0002\u0002\u0002\u0a16\u0a17",
    "\u0007\u0016\u0002\u0002\u0a17\u0a18\u0007\u00ce\u0002\u0002\u0a18\u0a19",
    "\u0007\u00be\u0002\u0002\u0a19\u0a1a\u0007\u00e7\u0002\u0002\u0a1a\u0a1e",
    "\b\u0084\u0001\u0002\u0a1b\u0a1c\u0005\u0108\u0085\u0002\u0a1c\u0a1d",
    "\b\u0084\u0001\u0002\u0a1d\u0a1f\u0003\u0002\u0002\u0002\u0a1e\u0a1b",
    "\u0003\u0002\u0002\u0002\u0a1f\u0a20\u0003\u0002\u0002\u0002\u0a20\u0a1e",
    "\u0003\u0002\u0002\u0002\u0a20\u0a21\u0003\u0002\u0002\u0002\u0a21\u0a22",
    "\u0003\u0002\u0002\u0002\u0a22\u0a23\u0007\u00e8\u0002\u0002\u0a23\u0a24",
    "\b\u0084\u0001\u0002\u0a24\u0107\u0003\u0002\u0002\u0002\u0a25\u0a28",
    "\u0005\u010a\u0086\u0002\u0a26\u0a28\u0005\u010e\u0088\u0002\u0a27\u0a25",
    "\u0003\u0002\u0002\u0002\u0a27\u0a26\u0003\u0002\u0002\u0002\u0a28\u0109",
    "\u0003\u0002\u0002\u0002\u0a29\u0a2a\u0007\\\u0002\u0002\u0a2a\u0a2b",
    "\u0007\u00ce\u0002\u0002\u0a2b\u0a2c\u0007\u00be\u0002\u0002\u0a2c\u0a2e",
    "\u0007\u00e7\u0002\u0002\u0a2d\u0a2f\u0005\u010c\u0087\u0002\u0a2e\u0a2d",
    "\u0003\u0002\u0002\u0002\u0a2f\u0a30\u0003\u0002\u0002\u0002\u0a30\u0a2e",
    "\u0003\u0002\u0002\u0002\u0a30\u0a31\u0003\u0002\u0002\u0002\u0a31\u0a32",
    "\u0003\u0002\u0002\u0002\u0a32\u0a33\u0007\u00e8\u0002\u0002\u0a33\u010b",
    "\u0003\u0002\u0002\u0002\u0a34\u0a35\u0007\u00d8\u0002\u0002\u0a35\u0a36",
    "\u0007\u00e7\u0002\u0002\u0a36\u0a37\u0007\u00e5\u0002\u0002\u0a37\u0a38",
    "\u0007\u00ce\u0002\u0002\u0a38\u0a39\u0005\u0092J\u0002\u0a39\u0a3a",
    "\u0007\u00be\u0002\u0002\u0a3a\u0a3b\u0007\u00e8\u0002\u0002\u0a3b\u0a44",
    "\u0003\u0002\u0002\u0002\u0a3c\u0a3d\u0007\u00d8\u0002\u0002\u0a3d\u0a3e",
    "\u0007\u00e7\u0002\u0002\u0a3e\u0a3f\u0007\u00e5\u0002\u0002\u0a3f\u0a40",
    "\u0007\u00ce\u0002\u0002\u0a40\u0a41\u0005\u0090I\u0002\u0a41\u0a42",
    "\u0007\u00e8\u0002\u0002\u0a42\u0a44\u0003\u0002\u0002\u0002\u0a43\u0a34",
    "\u0003\u0002\u0002\u0002\u0a43\u0a3c\u0003\u0002\u0002\u0002\u0a44\u010d",
    "\u0003\u0002\u0002\u0002\u0a45\u0a46\u0007\u008e\u0002\u0002\u0a46\u0a47",
    "\u0007\u00ce\u0002\u0002\u0a47\u0a48\u0007\u00be\u0002\u0002\u0a48\u0a4a",
    "\u0007\u00e7\u0002\u0002\u0a49\u0a4b\u0005\u0110\u0089\u0002\u0a4a\u0a49",
    "\u0003\u0002\u0002\u0002\u0a4b\u0a4c\u0003\u0002\u0002\u0002\u0a4c\u0a4a",
    "\u0003\u0002\u0002\u0002\u0a4c\u0a4d\u0003\u0002\u0002\u0002\u0a4d\u0a4e",
    "\u0003\u0002\u0002\u0002\u0a4e\u0a4f\u0007\u00e8\u0002\u0002\u0a4f\u010f",
    "\u0003\u0002\u0002\u0002\u0a50\u0a51\u0007\u00d8\u0002\u0002\u0a51\u0a52",
    "\u0007\u00e7\u0002\u0002\u0a52\u0a53\u0007\u00e5\u0002\u0002\u0a53\u0a54",
    "\u0007\u00ce\u0002\u0002\u0a54\u0a55\u0007\u00e7\u0002\u0002\u0a55\u0a56",
    "\u0005\u010a\u0086\u0002\u0a56\u0a57\u0007\u00e8\u0002\u0002\u0a57\u0a58",
    "\u0007\u00e8\u0002\u0002\u0a58\u0111\u0003\u0002\u0002\u0002\u0a59\u0a5a",
    "\u0007\u00ba\u0002\u0002\u0a5a\u0a5b\u0007\u00ce\u0002\u0002\u0a5b\u0a5c",
    "\u0007\u00be\u0002\u0002\u0a5c\u0a5e\u0007\u00e7\u0002\u0002\u0a5d\u0a5f",
    "\u0005\u0114\u008b\u0002\u0a5e\u0a5d\u0003\u0002\u0002\u0002\u0a5f\u0a60",
    "\u0003\u0002\u0002\u0002\u0a60\u0a5e\u0003\u0002\u0002\u0002\u0a60\u0a61",
    "\u0003\u0002\u0002\u0002\u0a61\u0a62\u0003\u0002\u0002\u0002\u0a62\u0a63",
    "\u0007\u00e8\u0002\u0002\u0a63\u0113\u0003\u0002\u0002\u0002\u0a64\u0a65",
    "\u0007\u00e5\u0002\u0002\u0a65\u0a66\u0007\u00ce\u0002\u0002\u0a66\u0a67",
    "\u0007\u00be\u0002\u0002\u0a67\u0a68\u0007\u00e7\u0002\u0002\u0a68\u0a6c",
    "\b\u008b\u0001\u0002\u0a69\u0a6a\u0005\u0116\u008c\u0002\u0a6a\u0a6b",
    "\b\u008b\u0001\u0002\u0a6b\u0a6d\u0003\u0002\u0002\u0002\u0a6c\u0a69",
    "\u0003\u0002\u0002\u0002\u0a6d\u0a6e\u0003\u0002\u0002\u0002\u0a6e\u0a6c",
    "\u0003\u0002\u0002\u0002\u0a6e\u0a6f\u0003\u0002\u0002\u0002\u0a6f\u0a70",
    "\u0003\u0002\u0002\u0002\u0a70\u0a71\u0007\u00e8\u0002\u0002\u0a71\u0a72",
    "\b\u008b\u0001\u0002\u0a72\u0115\u0003\u0002\u0002\u0002\u0a73\u0a79",
    "\u0005\u0168\u00b5\u0002\u0a74\u0a79\u0005\u009cO\u0002\u0a75\u0a79",
    "\u0005\u0080A\u0002\u0a76\u0a79\u0005\u012a\u0096\u0002\u0a77\u0a79",
    "\u0005\u013e\u00a0\u0002\u0a78\u0a73\u0003\u0002\u0002\u0002\u0a78\u0a74",
    "\u0003\u0002\u0002\u0002\u0a78\u0a75\u0003\u0002\u0002\u0002\u0a78\u0a76",
    "\u0003\u0002\u0002\u0002\u0a78\u0a77\u0003\u0002\u0002\u0002\u0a79\u0117",
    "\u0003\u0002\u0002\u0002\u0a7a\u0a7b\u0007\u00ba\u0002\u0002\u0a7b\u0a7c",
    "\u0007\u00ce\u0002\u0002\u0a7c\u0a7d\u0007\u00be\u0002\u0002\u0a7d\u0a7f",
    "\u0007\u00e7\u0002\u0002\u0a7e\u0a80\u0005\u011a\u008e\u0002\u0a7f\u0a7e",
    "\u0003\u0002\u0002\u0002\u0a80\u0a81\u0003\u0002\u0002\u0002\u0a81\u0a7f",
    "\u0003\u0002\u0002\u0002\u0a81\u0a82\u0003\u0002\u0002\u0002\u0a82\u0a83",
    "\u0003\u0002\u0002\u0002\u0a83\u0a84\u0007\u00e8\u0002\u0002\u0a84\u0119",
    "\u0003\u0002\u0002\u0002\u0a85\u0a86\u0007\u00e5\u0002\u0002\u0a86\u0a87",
    "\u0007\u00ce\u0002\u0002\u0a87\u0a88\u0007\u00be\u0002\u0002\u0a88\u0a89",
    "\u0007\u00e7\u0002\u0002\u0a89\u0a8d\b\u008e\u0001\u0002\u0a8a\u0a8b",
    "\u0005\u011c\u008f\u0002\u0a8b\u0a8c\b\u008e\u0001\u0002\u0a8c\u0a8e",
    "\u0003\u0002\u0002\u0002\u0a8d\u0a8a\u0003\u0002\u0002\u0002\u0a8e\u0a8f",
    "\u0003\u0002\u0002\u0002\u0a8f\u0a8d\u0003\u0002\u0002\u0002\u0a8f\u0a90",
    "\u0003\u0002\u0002\u0002\u0a90\u0a91\u0003\u0002\u0002\u0002\u0a91\u0a92",
    "\u0007\u00e8\u0002\u0002\u0a92\u0a93\b\u008e\u0001\u0002\u0a93\u011b",
    "\u0003\u0002\u0002\u0002\u0a94\u0a9b\u0005\u0168\u00b5\u0002\u0a95\u0a9b",
    "\u0005\u009cO\u0002\u0a96\u0a9b\u0005\u0080A\u0002\u0a97\u0a9b\u0005",
    "\u012a\u0096\u0002\u0a98\u0a9b\u0005\u011e\u0090\u0002\u0a99\u0a9b\u0005",
    "\u0120\u0091\u0002\u0a9a\u0a94\u0003\u0002\u0002\u0002\u0a9a\u0a95\u0003",
    "\u0002\u0002\u0002\u0a9a\u0a96\u0003\u0002\u0002\u0002\u0a9a\u0a97\u0003",
    "\u0002\u0002\u0002\u0a9a\u0a98\u0003\u0002\u0002\u0002\u0a9a\u0a99\u0003",
    "\u0002\u0002\u0002\u0a9b\u011d\u0003\u0002\u0002\u0002\u0a9c\u0a9d\u0007",
    "\u00b9\u0002\u0002\u0a9d\u0a9e\u0007\u00ce\u0002\u0002\u0a9e\u0a9f\u0007",
    "\u00be\u0002\u0002\u0a9f\u0aa1\u0007\u00e7\u0002\u0002\u0aa0\u0aa2\u0005",
    "\u0122\u0092\u0002\u0aa1\u0aa0\u0003\u0002\u0002\u0002\u0aa2\u0aa3\u0003",
    "\u0002\u0002\u0002\u0aa3\u0aa1\u0003\u0002\u0002\u0002\u0aa3\u0aa4\u0003",
    "\u0002\u0002\u0002\u0aa4\u0aa5\u0003\u0002\u0002\u0002\u0aa5\u0aa6\u0007",
    "\u00e8\u0002\u0002\u0aa6\u011f\u0003\u0002\u0002\u0002\u0aa7\u0aa8\u0007",
    "\u00b8\u0002\u0002\u0aa8\u0aa9\u0007\u00ce\u0002\u0002\u0aa9\u0aaa\u0007",
    "\u00be\u0002\u0002\u0aaa\u0aac\u0007\u00e7\u0002\u0002\u0aab\u0aad\u0005",
    "\u0126\u0094\u0002\u0aac\u0aab\u0003\u0002\u0002\u0002\u0aad\u0aae\u0003",
    "\u0002\u0002\u0002\u0aae\u0aac\u0003\u0002\u0002\u0002\u0aae\u0aaf\u0003",
    "\u0002\u0002\u0002\u0aaf\u0ab0\u0003\u0002\u0002\u0002\u0ab0\u0ab1\u0007",
    "\u00e8\u0002\u0002\u0ab1\u0121\u0003\u0002\u0002\u0002\u0ab2\u0ab3\u0007",
    "\u00d8\u0002\u0002\u0ab3\u0ab4\u0007\u00e7\u0002\u0002\u0ab4\u0ab8\b",
    "\u0092\u0001\u0002\u0ab5\u0ab6\u0005\u0124\u0093\u0002\u0ab6\u0ab7\b",
    "\u0092\u0001\u0002\u0ab7\u0ab9\u0003\u0002\u0002\u0002\u0ab8\u0ab5\u0003",
    "\u0002\u0002\u0002\u0ab9\u0aba\u0003\u0002\u0002\u0002\u0aba\u0ab8\u0003",
    "\u0002\u0002\u0002\u0aba\u0abb\u0003\u0002\u0002\u0002\u0abb\u0abc\u0003",
    "\u0002\u0002\u0002\u0abc\u0abd\u0007\u00e8\u0002\u0002\u0abd\u0abe\b",
    "\u0092\u0001\u0002\u0abe\u0123\u0003\u0002\u0002\u0002\u0abf\u0ac0\t",
    "\u0005\u0002\u0002\u0ac0\u0ac1\u0007\u00ce\u0002\u0002\u0ac1\u0ac2\u0005",
    "\u0184\u00c3\u0002\u0ac2\u0ac3\u0007\u00be\u0002\u0002\u0ac3\u0acd\u0003",
    "\u0002\u0002\u0002\u0ac4\u0ac5\t\u0006\u0002\u0002\u0ac5\u0ac6\u0007",
    "\u00ce\u0002\u0002\u0ac6\u0ac7\u0007\u00e5\u0002\u0002\u0ac7\u0acd\u0007",
    "\u00be\u0002\u0002\u0ac8\u0ac9\u0007\u00b7\u0002\u0002\u0ac9\u0aca\u0007",
    "\u00ce\u0002\u0002\u0aca\u0acb\u0007\u00e5\u0002\u0002\u0acb\u0acd\u0007",
    "\u00be\u0002\u0002\u0acc\u0abf\u0003\u0002\u0002\u0002\u0acc\u0ac4\u0003",
    "\u0002\u0002\u0002\u0acc\u0ac8\u0003\u0002\u0002\u0002\u0acd\u0125\u0003",
    "\u0002\u0002\u0002\u0ace\u0acf\u0007\u00d8\u0002\u0002\u0acf\u0ad0\u0007",
    "\u00e7\u0002\u0002\u0ad0\u0ad4\b\u0094\u0001\u0002\u0ad1\u0ad2\u0005",
    "\u0128\u0095\u0002\u0ad2\u0ad3\b\u0094\u0001\u0002\u0ad3\u0ad5\u0003",
    "\u0002\u0002\u0002\u0ad4\u0ad1\u0003\u0002\u0002\u0002\u0ad5\u0ad6\u0003",
    "\u0002\u0002\u0002\u0ad6\u0ad4\u0003\u0002\u0002\u0002\u0ad6\u0ad7\u0003",
    "\u0002\u0002\u0002\u0ad7\u0ad8\u0003\u0002\u0002\u0002\u0ad8\u0ad9\u0007",
    "\u00e8\u0002\u0002\u0ad9\u0ada\b\u0094\u0001\u0002\u0ada\u0127\u0003",
    "\u0002\u0002\u0002\u0adb\u0adc\t\u0005\u0002\u0002\u0adc\u0add\u0007",
    "\u00ce\u0002\u0002\u0add\u0ade\u0005\u0184\u00c3\u0002\u0ade\u0adf\u0007",
    "\u00be\u0002\u0002\u0adf\u0ae8\u0003\u0002\u0002\u0002\u0ae0\u0ae1\t",
    "\u0007\u0002\u0002\u0ae1\u0ae2\u0007\u00ce\u0002\u0002\u0ae2\u0ae3\u0007",
    "\u00e5\u0002\u0002\u0ae3\u0ae8\u0007\u00be\u0002\u0002\u0ae4\u0ae5\u0007",
    "\u00b7\u0002\u0002\u0ae5\u0ae6\u0007\u00ce\u0002\u0002\u0ae6\u0ae8\u0007",
    "\u00e5\u0002\u0002\u0ae7\u0adb\u0003\u0002\u0002\u0002\u0ae7\u0ae0\u0003",
    "\u0002\u0002\u0002\u0ae7\u0ae4\u0003\u0002\u0002\u0002\u0ae8\u0129\u0003",
    "\u0002\u0002\u0002\u0ae9\u0aea\u0007\u0017\u0002\u0002\u0aea\u0aeb\u0007",
    "\u00ce\u0002\u0002\u0aeb\u0aec\u0007\u00be\u0002\u0002\u0aec\u0aee\u0007",
    "\u00e7\u0002\u0002\u0aed\u0aef\u0005\u012c\u0097\u0002\u0aee\u0aed\u0003",
    "\u0002\u0002\u0002\u0aef\u0af0\u0003\u0002\u0002\u0002\u0af0\u0aee\u0003",
    "\u0002\u0002\u0002\u0af0\u0af1\u0003\u0002\u0002\u0002\u0af1\u0af2\u0003",
    "\u0002\u0002\u0002\u0af2\u0af3\u0007\u00e8\u0002\u0002\u0af3\u012b\u0003",
    "\u0002\u0002\u0002\u0af4\u0af5\u0007\u00d8\u0002\u0002\u0af5\u0af6\u0007",
    "\u00e7\u0002\u0002\u0af6\u0afa\b\u0097\u0001\u0002\u0af7\u0af8\u0005",
    "\u012e\u0098\u0002\u0af8\u0af9\b\u0097\u0001\u0002\u0af9\u0afb\u0003",
    "\u0002\u0002\u0002\u0afa\u0af7\u0003\u0002\u0002\u0002\u0afb\u0afc\u0003",
    "\u0002\u0002\u0002\u0afc\u0afa\u0003\u0002\u0002\u0002\u0afc\u0afd\u0003",
    "\u0002\u0002\u0002\u0afd\u0afe\u0003\u0002\u0002\u0002\u0afe\u0aff\u0007",
    "\u00e8\u0002\u0002\u0aff\u0b00\b\u0097\u0001\u0002\u0b00\u012d\u0003",
    "\u0002\u0002\u0002\u0b01\u0b02\u0007\u00a6\u0002\u0002\u0b02\u0b03\u0007",
    "\u00ce\u0002\u0002\u0b03\u0b04\u0007\u00e5\u0002\u0002\u0b04\u0b0b\u0007",
    "\u00be\u0002\u0002\u0b05\u0b06\u0007\u00a7\u0002\u0002\u0b06\u0b07\u0007",
    "\u00ce\u0002\u0002\u0b07\u0b08\u0007\u00e5\u0002\u0002\u0b08\u0b0b\u0007",
    "\u00be\u0002\u0002\u0b09\u0b0b\u0005\u0130\u0099\u0002\u0b0a\u0b01\u0003",
    "\u0002\u0002\u0002\u0b0a\u0b05\u0003\u0002\u0002\u0002\u0b0a\u0b09\u0003",
    "\u0002\u0002\u0002\u0b0b\u012f\u0003\u0002\u0002\u0002\u0b0c\u0b0d\u0007",
    "\u000f\u0002\u0002\u0b0d\u0b0e\u0007\u00ce\u0002\u0002\u0b0e\u0b0f\u0007",
    "\u00be\u0002\u0002\u0b0f\u0b11\u0007\u00e7\u0002\u0002\u0b10\u0b12\u0005",
    "\u0134\u009b\u0002\u0b11\u0b10\u0003\u0002\u0002\u0002\u0b12\u0b13\u0003",
    "\u0002\u0002\u0002\u0b13\u0b11\u0003\u0002\u0002\u0002\u0b13\u0b14\u0003",
    "\u0002\u0002\u0002\u0b14\u0b15\u0003\u0002\u0002\u0002\u0b15\u0b16\u0007",
    "\u00e8\u0002\u0002\u0b16\u0131\u0003\u0002\u0002\u0002\u0b17\u0b18\u0007",
    "\u00a8\u0002\u0002\u0b18\u0b19\u0007\u00ce\u0002\u0002\u0b19\u0b1a\u0007",
    "\u00be\u0002\u0002\u0b1a\u0b1c\u0007\u00e7\u0002\u0002\u0b1b\u0b1d\u0005",
    "\u0134\u009b\u0002\u0b1c\u0b1b\u0003\u0002\u0002\u0002\u0b1d\u0b1e\u0003",
    "\u0002\u0002\u0002\u0b1e\u0b1c\u0003\u0002\u0002\u0002\u0b1e\u0b1f\u0003",
    "\u0002\u0002\u0002\u0b1f\u0b20\u0003\u0002\u0002\u0002\u0b20\u0b21\u0007",
    "\u00e8\u0002\u0002\u0b21\u0133\u0003\u0002\u0002\u0002\u0b22\u0b26\u0005",
    "\u0136\u009c\u0002\u0b23\u0b26\u0005\u0138\u009d\u0002\u0b24\u0b26\u0005",
    "\u013a\u009e\u0002\u0b25\u0b22\u0003\u0002\u0002\u0002\u0b25\u0b23\u0003",
    "\u0002\u0002\u0002\u0b25\u0b24\u0003\u0002\u0002\u0002\u0b26\u0135\u0003",
    "\u0002\u0002\u0002\u0b27\u0b28\u0007\u00d8\u0002\u0002\u0b28\u0b29\u0007",
    "\u00e7\u0002\u0002\u0b29\u0b2a\u0007\u00ae\u0002\u0002\u0b2a\u0b2b\u0007",
    "\u00ce\u0002\u0002\u0b2b\u0b2c\u0007\u00be\u0002\u0002\u0b2c\u0b2e\u0007",
    "\u00e7\u0002\u0002\u0b2d\u0b2f\u0005\u0134\u009b\u0002\u0b2e\u0b2d\u0003",
    "\u0002\u0002\u0002\u0b2f\u0b30\u0003\u0002\u0002\u0002\u0b30\u0b2e\u0003",
    "\u0002\u0002\u0002\u0b30\u0b31\u0003\u0002\u0002\u0002\u0b31\u0b32\u0003",
    "\u0002\u0002\u0002\u0b32\u0b33\u0007\u00e8\u0002\u0002\u0b33\u0b34\u0007",
    "\u00e8\u0002\u0002\u0b34\u0137\u0003\u0002\u0002\u0002\u0b35\u0b36\u0007",
    "\u00d8\u0002\u0002\u0b36\u0b37\u0007\u00e7\u0002\u0002\u0b37\u0b38\u0007",
    "\u00af\u0002\u0002\u0b38\u0b39\u0007\u00ce\u0002\u0002\u0b39\u0b3a\u0007",
    "\u00be\u0002\u0002\u0b3a\u0b3c\u0007\u00e7\u0002\u0002\u0b3b\u0b3d\u0005",
    "\u0134\u009b\u0002\u0b3c\u0b3b\u0003\u0002\u0002\u0002\u0b3d\u0b3e\u0003",
    "\u0002\u0002\u0002\u0b3e\u0b3c\u0003\u0002\u0002\u0002\u0b3e\u0b3f\u0003",
    "\u0002\u0002\u0002\u0b3f\u0b40\u0003\u0002\u0002\u0002\u0b40\u0b41\u0007",
    "\u00e8\u0002\u0002\u0b41\u0b42\u0007\u00e8\u0002\u0002\u0b42\u0139\u0003",
    "\u0002\u0002\u0002\u0b43\u0b44\u0007\u00d8\u0002\u0002\u0b44\u0b45\u0007",
    "\u00e7\u0002\u0002\u0b45\u0b46\u0007\u00ad\u0002\u0002\u0b46\u0b47\u0007",
    "\u00ce\u0002\u0002\u0b47\u0b48\u0007\u00d2\u0002\u0002\u0b48\u0b4d\u0005",
    "\u013c\u009f\u0002\u0b49\u0b4a\u0007\u00cd\u0002\u0002\u0b4a\u0b4c\u0005",
    "\u013c\u009f\u0002\u0b4b\u0b49\u0003\u0002\u0002\u0002\u0b4c\u0b4f\u0003",
    "\u0002\u0002\u0002\u0b4d\u0b4b\u0003\u0002\u0002\u0002\u0b4d\u0b4e\u0003",
    "\u0002\u0002\u0002\u0b4e\u0b50\u0003\u0002\u0002\u0002\u0b4f\u0b4d\u0003",
    "\u0002\u0002\u0002\u0b50\u0b51\u0007\u00d3\u0002\u0002\u0b51\u0b52\u0007",
    "\u00be\u0002\u0002\u0b52\u0b53\u0007\u00e8\u0002\u0002\u0b53\u0b63\u0003",
    "\u0002\u0002\u0002\u0b54\u0b55\u0007\u00d8\u0002\u0002\u0b55\u0b56\u0007",
    "\u00e7\u0002\u0002\u0b56\u0b57\u0007\u00ad\u0002\u0002\u0b57\u0b58\u0007",
    "\u00ce\u0002\u0002\u0b58\u0b59\u0007\u00be\u0002\u0002\u0b59\u0b5b\u0007",
    "\u00e7\u0002\u0002\u0b5a\u0b5c\u0005\u013c\u009f\u0002\u0b5b\u0b5a\u0003",
    "\u0002\u0002\u0002\u0b5c\u0b5d\u0003\u0002\u0002\u0002\u0b5d\u0b5b\u0003",
    "\u0002\u0002\u0002\u0b5d\u0b5e\u0003\u0002\u0002\u0002\u0b5e\u0b5f\u0003",
    "\u0002\u0002\u0002\u0b5f\u0b60\u0007\u00e8\u0002\u0002\u0b60\u0b61\u0007",
    "\u00e8\u0002\u0002\u0b61\u0b63\u0003\u0002\u0002\u0002\u0b62\u0b43\u0003",
    "\u0002\u0002\u0002\u0b62\u0b54\u0003\u0002\u0002\u0002\u0b63\u013b\u0003",
    "\u0002\u0002\u0002\u0b64\u0b65\u0007\u00e5\u0002\u0002\u0b65\u0b66\u0007",
    "\u00ce\u0002\u0002\u0b66\u0b67\u0007\u00d2\u0002\u0002\u0b67\u0b68\u0007",
    "\u00dc\u0002\u0002\u0b68\u0b69\u0005\u0092J\u0002\u0b69\u0b71\u0007",
    "\u00dd\u0002\u0002\u0b6a\u0b6b\u0007\u00cd\u0002\u0002\u0b6b\u0b6c\u0007",
    "\u00dc\u0002\u0002\u0b6c\u0b6d\u0005\u0092J\u0002\u0b6d\u0b6e\u0007",
    "\u00dd\u0002\u0002\u0b6e\u0b70\u0003\u0002\u0002\u0002\u0b6f\u0b6a\u0003",
    "\u0002\u0002\u0002\u0b70\u0b73\u0003\u0002\u0002\u0002\u0b71\u0b6f\u0003",
    "\u0002\u0002\u0002\u0b71\u0b72\u0003\u0002\u0002\u0002\u0b72\u0b74\u0003",
    "\u0002\u0002\u0002\u0b73\u0b71\u0003\u0002\u0002\u0002\u0b74\u0b75\u0007",
    "\u00d3\u0002\u0002\u0b75\u0b76\u0007\u00be\u0002\u0002\u0b76\u0b84\u0003",
    "\u0002\u0002\u0002\u0b77\u0b78\u0007\u00e5\u0002\u0002\u0b78\u0b79\u0007",
    "\u00ce\u0002\u0002\u0b79\u0b7a\u0007\u00be\u0002\u0002\u0b7a\u0b7d\u0007",
    "\u00e7\u0002\u0002\u0b7b\u0b7c\u0007\u00d8\u0002\u0002\u0b7c\u0b7e\u0005",
    "\u0092J\u0002\u0b7d\u0b7b\u0003\u0002\u0002\u0002\u0b7e\u0b7f\u0003",
    "\u0002\u0002\u0002\u0b7f\u0b7d\u0003\u0002\u0002\u0002\u0b7f\u0b80\u0003",
    "\u0002\u0002\u0002\u0b80\u0b81\u0003\u0002\u0002\u0002\u0b81\u0b82\u0007",
    "\u00e8\u0002\u0002\u0b82\u0b84\u0003\u0002\u0002\u0002\u0b83\u0b64\u0003",
    "\u0002\u0002\u0002\u0b83\u0b77\u0003\u0002\u0002\u0002\u0b84\u013d\u0003",
    "\u0002\u0002\u0002\u0b85\u0b86\u0007\u0018\u0002\u0002\u0b86\u0b87\u0007",
    "\u00ce\u0002\u0002\u0b87\u0b89\u0007\u00e7\u0002\u0002\u0b88\u0b8a\u0005",
    "\u0140\u00a1\u0002\u0b89\u0b88\u0003\u0002\u0002\u0002\u0b8a\u0b8b\u0003",
    "\u0002\u0002\u0002\u0b8b\u0b89\u0003\u0002\u0002\u0002\u0b8b\u0b8c\u0003",
    "\u0002\u0002\u0002\u0b8c\u0b8d\u0003\u0002\u0002\u0002\u0b8d\u0b8e\u0007",
    "\u00e8\u0002\u0002\u0b8e\u013f\u0003\u0002\u0002\u0002\u0b8f\u0b90\u0007",
    "\u00e5\u0002\u0002\u0b90\u0b91\u0007\u00ce\u0002\u0002\u0b91\u0b92\u0007",
    "\u00be\u0002\u0002\u0b92\u0b94\u0007\u00e7\u0002\u0002\u0b93\u0b95\u0005",
    "\u0142\u00a2\u0002\u0b94\u0b93\u0003\u0002\u0002\u0002\u0b95\u0b96\u0003",
    "\u0002\u0002\u0002\u0b96\u0b94\u0003\u0002\u0002\u0002\u0b96\u0b97\u0003",
    "\u0002\u0002\u0002\u0b97\u0b98\u0003\u0002\u0002\u0002\u0b98\u0b99\u0007",
    "\u00e8\u0002\u0002\u0b99\u0141\u0003\u0002\u0002\u0002\u0b9a\u0b9b\u0007",
    "\u00a6\u0002\u0002\u0b9b\u0b9c\u0007\u00ce\u0002\u0002\u0b9c\u0b9d\u0007",
    "\u00e5\u0002\u0002\u0b9d\u0bdf\u0007\u00be\u0002\u0002\u0b9e\u0b9f\u0007",
    "\u00a7\u0002\u0002\u0b9f\u0ba0\u0007\u00ce\u0002\u0002\u0ba0\u0ba1\u0007",
    "\u00e5\u0002\u0002\u0ba1\u0bdf\u0007\u00be\u0002\u0002\u0ba2\u0bdf\u0005",
    "\u0132\u009a\u0002\u0ba3\u0bdf\u0005\u0144\u00a3\u0002\u0ba4\u0ba5\u0007",
    "\u00aa\u0002\u0002\u0ba5\u0ba6\u0007\u00ce\u0002\u0002\u0ba6\u0ba7\u0007",
    "\u00e5\u0002\u0002\u0ba7\u0bdf\u0007\u00be\u0002\u0002\u0ba8\u0ba9\u0007",
    "\u00ab\u0002\u0002\u0ba9\u0baa\u0007\u00ce\u0002\u0002\u0baa\u0bab\u0007",
    "\u00d2\u0002\u0002\u0bab\u0bb0\u0007\u00e5\u0002\u0002\u0bac\u0bad\u0007",
    "\u00cd\u0002\u0002\u0bad\u0baf\u0007\u00e5\u0002\u0002\u0bae\u0bac\u0003",
    "\u0002\u0002\u0002\u0baf\u0bb2\u0003\u0002\u0002\u0002\u0bb0\u0bae\u0003",
    "\u0002\u0002\u0002\u0bb0\u0bb1\u0003\u0002\u0002\u0002\u0bb1\u0bb3\u0003",
    "\u0002\u0002\u0002\u0bb2\u0bb0\u0003\u0002\u0002\u0002\u0bb3\u0bb4\u0007",
    "\u00d3\u0002\u0002\u0bb4\u0bdf\u0007\u00be\u0002\u0002\u0bb5\u0bb6\u0007",
    "\u00ab\u0002\u0002\u0bb6\u0bb7\u0007\u00ce\u0002\u0002\u0bb7\u0bb8\u0007",
    "\u00be\u0002\u0002\u0bb8\u0bbe\u0007\u00e7\u0002\u0002\u0bb9\u0bba\u0007",
    "\u00d8\u0002\u0002\u0bba\u0bbb\u0007\u00e7\u0002\u0002\u0bbb\u0bbc\u0007",
    "\u00e5\u0002\u0002\u0bbc\u0bbd\u0007\u00be\u0002\u0002\u0bbd\u0bbf\u0007",
    "\u00e8\u0002\u0002\u0bbe\u0bb9\u0003\u0002\u0002\u0002\u0bbf\u0bc0\u0003",
    "\u0002\u0002\u0002\u0bc0\u0bbe\u0003\u0002\u0002\u0002\u0bc0\u0bc1\u0003",
    "\u0002\u0002\u0002\u0bc1\u0bc2\u0003\u0002\u0002\u0002\u0bc2\u0bdf\u0007",
    "\u00e8\u0002\u0002\u0bc3\u0bc4\u0007\u00ac\u0002\u0002\u0bc4\u0bc5\u0007",
    "\u00ce\u0002\u0002\u0bc5\u0bc6\u0007\u00d2\u0002\u0002\u0bc6\u0bcb\u0007",
    "\u00e5\u0002\u0002\u0bc7\u0bc8\u0007\u00cd\u0002\u0002\u0bc8\u0bca\u0007",
    "\u00e5\u0002\u0002\u0bc9\u0bc7\u0003\u0002\u0002\u0002\u0bca\u0bcd\u0003",
    "\u0002\u0002\u0002\u0bcb\u0bc9\u0003\u0002\u0002\u0002\u0bcb\u0bcc\u0003",
    "\u0002\u0002\u0002\u0bcc\u0bce\u0003\u0002\u0002\u0002\u0bcd\u0bcb\u0003",
    "\u0002\u0002\u0002\u0bce\u0bcf\u0007\u00d3\u0002\u0002\u0bcf\u0bdf\u0007",
    "\u00be\u0002\u0002\u0bd0\u0bd1\u0007\u00ac\u0002\u0002\u0bd1\u0bd2\u0007",
    "\u00ce\u0002\u0002\u0bd2\u0bd3\u0007\u00be\u0002\u0002\u0bd3\u0bd9\u0007",
    "\u00e7\u0002\u0002\u0bd4\u0bd5\u0007\u00d8\u0002\u0002\u0bd5\u0bd6\u0007",
    "\u00e7\u0002\u0002\u0bd6\u0bd7\u0007\u00e5\u0002\u0002\u0bd7\u0bd8\u0007",
    "\u00be\u0002\u0002\u0bd8\u0bda\u0007\u00e8\u0002\u0002\u0bd9\u0bd4\u0003",
    "\u0002\u0002\u0002\u0bda\u0bdb\u0003\u0002\u0002\u0002\u0bdb\u0bd9\u0003",
    "\u0002\u0002\u0002\u0bdb\u0bdc\u0003\u0002\u0002\u0002\u0bdc\u0bdd\u0003",
    "\u0002\u0002\u0002\u0bdd\u0bdf\u0007\u00e8\u0002\u0002\u0bde\u0b9a\u0003",
    "\u0002\u0002\u0002\u0bde\u0b9e\u0003\u0002\u0002\u0002\u0bde\u0ba2\u0003",
    "\u0002\u0002\u0002\u0bde\u0ba3\u0003\u0002\u0002\u0002\u0bde\u0ba4\u0003",
    "\u0002\u0002\u0002\u0bde\u0ba8\u0003\u0002\u0002\u0002\u0bde\u0bb5\u0003",
    "\u0002\u0002\u0002\u0bde\u0bc3\u0003\u0002\u0002\u0002\u0bde\u0bd0\u0003",
    "\u0002\u0002\u0002\u0bdf\u0143\u0003\u0002\u0002\u0002\u0be0\u0be1\u0007",
    "\u00a9\u0002\u0002\u0be1\u0be2\u0007\u00ce\u0002\u0002\u0be2\u0be3\u0007",
    "\u00d2\u0002\u0002\u0be3\u0be8\u0005\u0146\u00a4\u0002\u0be4\u0be5\u0007",
    "\u00cd\u0002\u0002\u0be5\u0be7\u0005\u0146\u00a4\u0002\u0be6\u0be4\u0003",
    "\u0002\u0002\u0002\u0be7\u0bea\u0003\u0002\u0002\u0002\u0be8\u0be6\u0003",
    "\u0002\u0002\u0002\u0be8\u0be9\u0003\u0002\u0002\u0002\u0be9\u0beb\u0003",
    "\u0002\u0002\u0002\u0bea\u0be8\u0003\u0002\u0002\u0002\u0beb\u0bec\u0007",
    "\u00d3\u0002\u0002\u0bec\u0bed\u0007\u00be\u0002\u0002\u0bed\u0bfe\u0003",
    "\u0002\u0002\u0002\u0bee\u0bef\u0007\u00a9\u0002\u0002\u0bef\u0bf0\u0007",
    "\u00ce\u0002\u0002\u0bf0\u0bf1\u0007\u00be\u0002\u0002\u0bf1\u0bf7\u0007",
    "\u00e7\u0002\u0002\u0bf2\u0bf3\u0007\u00d8\u0002\u0002\u0bf3\u0bf4\u0007",
    "\u00e7\u0002\u0002\u0bf4\u0bf5\u0005\u0146\u00a4\u0002\u0bf5\u0bf6\u0007",
    "\u00e8\u0002\u0002\u0bf6\u0bf8\u0003\u0002\u0002\u0002\u0bf7\u0bf2\u0003",
    "\u0002\u0002\u0002\u0bf8\u0bf9\u0003\u0002\u0002\u0002\u0bf9\u0bf7\u0003",
    "\u0002\u0002\u0002\u0bf9\u0bfa\u0003\u0002\u0002\u0002\u0bfa\u0bfb\u0003",
    "\u0002\u0002\u0002\u0bfb\u0bfc\u0007\u00e8\u0002\u0002\u0bfc\u0bfe\u0003",
    "\u0002\u0002\u0002\u0bfd\u0be0\u0003\u0002\u0002\u0002\u0bfd\u0bee\u0003",
    "\u0002\u0002\u0002\u0bfe\u0145\u0003\u0002\u0002\u0002\u0bff\u0c00\u0007",
    "\u00a1\u0002\u0002\u0c00\u0c01\u0007\u00ce\u0002\u0002\u0c01\u0c02\u0007",
    "\u00e5\u0002\u0002\u0c02\u0c11\u0007\u00be\u0002\u0002\u0c03\u0c04\u0007",
    "\u00a2\u0002\u0002\u0c04\u0c05\u0007\u00ce\u0002\u0002\u0c05\u0c06\u0005",
    "\u0184\u00c3\u0002\u0c06\u0c07\u0007\u00be\u0002\u0002\u0c07\u0c11\u0003",
    "\u0002\u0002\u0002\u0c08\u0c09\u0007\u00a3\u0002\u0002\u0c09\u0c0a\u0007",
    "\u00ce\u0002\u0002\u0c0a\u0c0b\u0007\u00e5\u0002\u0002\u0c0b\u0c11\u0007",
    "\u00be\u0002\u0002\u0c0c\u0c0d\u0007\u00a5\u0002\u0002\u0c0d\u0c0e\u0007",
    "\u00ce\u0002\u0002\u0c0e\u0c0f\u0007\u00e5\u0002\u0002\u0c0f\u0c11\u0007",
    "\u00be\u0002\u0002\u0c10\u0bff\u0003\u0002\u0002\u0002\u0c10\u0c03\u0003",
    "\u0002\u0002\u0002\u0c10\u0c08\u0003\u0002\u0002\u0002\u0c10\u0c0c\u0003",
    "\u0002\u0002\u0002\u0c11\u0147\u0003\u0002\u0002\u0002\u0c12\u0c13\u0007",
    "\u00ba\u0002\u0002\u0c13\u0c14\u0007\u00ce\u0002\u0002\u0c14\u0c15\u0007",
    "\u00be\u0002\u0002\u0c15\u0c17\u0007\u00e7\u0002\u0002\u0c16\u0c18\u0005",
    "\u014a\u00a6\u0002\u0c17\u0c16\u0003\u0002\u0002\u0002\u0c18\u0c19\u0003",
    "\u0002\u0002\u0002\u0c19\u0c17\u0003\u0002\u0002\u0002\u0c19\u0c1a\u0003",
    "\u0002\u0002\u0002\u0c1a\u0c1b\u0003\u0002\u0002\u0002\u0c1b\u0c1c\u0007",
    "\u00e8\u0002\u0002\u0c1c\u0149\u0003\u0002\u0002\u0002\u0c1d\u0c1e\u0007",
    "\u00e5\u0002\u0002\u0c1e\u0c1f\u0007\u00ce\u0002\u0002\u0c1f\u0c20\u0007",
    "\u00be\u0002\u0002\u0c20\u0c22\u0007\u00e7\u0002\u0002\u0c21\u0c23\u0005",
    "\u014c\u00a7\u0002\u0c22\u0c21\u0003\u0002\u0002\u0002\u0c23\u0c24\u0003",
    "\u0002\u0002\u0002\u0c24\u0c22\u0003\u0002\u0002\u0002\u0c24\u0c25\u0003",
    "\u0002\u0002\u0002\u0c25\u0c26\u0003\u0002\u0002\u0002\u0c26\u0c27\u0007",
    "\u00e8\u0002\u0002\u0c27\u014b\u0003\u0002\u0002\u0002\u0c28\u0c2e\u0005",
    "\u0168\u00b5\u0002\u0c29\u0c2e\u0005\u009cO\u0002\u0c2a\u0c2e\u0005",
    "\u0080A\u0002\u0c2b\u0c2e\u0005\u012a\u0096\u0002\u0c2c\u0c2e\u0005",
    "\u013e\u00a0\u0002\u0c2d\u0c28\u0003\u0002\u0002\u0002\u0c2d\u0c29\u0003",
    "\u0002\u0002\u0002\u0c2d\u0c2a\u0003\u0002\u0002\u0002\u0c2d\u0c2b\u0003",
    "\u0002\u0002\u0002\u0c2d\u0c2c\u0003\u0002\u0002\u0002\u0c2e\u014d\u0003",
    "\u0002\u0002\u0002\u0c2f\u0c30\u0007\u00dc\u0002\u0002\u0c30\u0c31\u0005",
    "\u0150\u00a9\u0002\u0c31\u0c32\u0007\u00dd\u0002\u0002\u0c32\u014f\u0003",
    "\u0002\u0002\u0002\u0c33\u0c3d\u0005\u0154\u00ab\u0002\u0c34\u0c3d\u0005",
    "\u0158\u00ad\u0002\u0c35\u0c3d\u0005\u0156\u00ac\u0002\u0c36\u0c3d\u0005",
    "\u015a\u00ae\u0002\u0c37\u0c3d\u0005\u015c\u00af\u0002\u0c38\u0c3d\u0005",
    "\u015e\u00b0\u0002\u0c39\u0c3d\u0005\u0160\u00b1\u0002\u0c3a\u0c3d\u0005",
    "\u0162\u00b2\u0002\u0c3b\u0c3d\u0005\u0164\u00b3\u0002\u0c3c\u0c33\u0003",
    "\u0002\u0002\u0002\u0c3c\u0c34\u0003\u0002\u0002\u0002\u0c3c\u0c35\u0003",
    "\u0002\u0002\u0002\u0c3c\u0c36\u0003\u0002\u0002\u0002\u0c3c\u0c37\u0003",
    "\u0002\u0002\u0002\u0c3c\u0c38\u0003\u0002\u0002\u0002\u0c3c\u0c39\u0003",
    "\u0002\u0002\u0002\u0c3c\u0c3a\u0003\u0002\u0002\u0002\u0c3c\u0c3b\u0003",
    "\u0002\u0002\u0002\u0c3d\u0151\u0003\u0002\u0002\u0002\u0c3e\u0c41\u0005",
    "\u014e\u00a8\u0002\u0c3f\u0c41\u0005\u0172\u00ba\u0002\u0c40\u0c3e\u0003",
    "\u0002\u0002\u0002\u0c40\u0c3f\u0003\u0002\u0002\u0002\u0c41\u0153\u0003",
    "\u0002\u0002\u0002\u0c42\u0c43\u0007\u00a0\u0002\u0002\u0c43\u0c44\u0007",
    "\u00ce\u0002\u0002\u0c44\u0c45\u0007\u00d2\u0002\u0002\u0c45\u0c48\u0005",
    "\u0152\u00aa\u0002\u0c46\u0c47\u0007\u00cd\u0002\u0002\u0c47\u0c49\u0005",
    "\u0152\u00aa\u0002\u0c48\u0c46\u0003\u0002\u0002\u0002\u0c49\u0c4a\u0003",
    "\u0002\u0002\u0002\u0c4a\u0c48\u0003\u0002\u0002\u0002\u0c4a\u0c4b\u0003",
    "\u0002\u0002\u0002\u0c4b\u0c4c\u0003\u0002\u0002\u0002\u0c4c\u0c4d\u0007",
    "\u00d3\u0002\u0002\u0c4d\u0155\u0003\u0002\u0002\u0002\u0c4e\u0c4f\u0007",
    "\u0019\u0002\u0002\u0c4f\u0c50\u0007\u00ce\u0002\u0002\u0c50\u0c51\u0007",
    "\u00d2\u0002\u0002\u0c51\u0c52\u0007\u00d2\u0002\u0002\u0c52\u0c55\u0005",
    "\u0172\u00ba\u0002\u0c53\u0c54\u0007\u00cd\u0002\u0002\u0c54\u0c56\u0005",
    "\u0172\u00ba\u0002\u0c55\u0c53\u0003\u0002\u0002\u0002\u0c56\u0c57\u0003",
    "\u0002\u0002\u0002\u0c57\u0c55\u0003\u0002\u0002\u0002\u0c57\u0c58\u0003",
    "\u0002\u0002\u0002\u0c58\u0c59\u0003\u0002\u0002\u0002\u0c59\u0c5a\u0007",
    "\u00d3\u0002\u0002\u0c5a\u0c63\u0003\u0002\u0002\u0002\u0c5b\u0c5e\u0005",
    "\u0152\u00aa\u0002\u0c5c\u0c5d\u0007\u00cd\u0002\u0002\u0c5d\u0c5f\u0005",
    "\u0172\u00ba\u0002\u0c5e\u0c5c\u0003\u0002\u0002\u0002\u0c5e\u0c5f\u0003",
    "\u0002\u0002\u0002\u0c5f\u0c60\u0003\u0002\u0002\u0002\u0c60\u0c61\u0007",
    "\u00d3\u0002\u0002\u0c61\u0c63\u0003\u0002\u0002\u0002\u0c62\u0c4e\u0003",
    "\u0002\u0002\u0002\u0c62\u0c5b\u0003\u0002\u0002\u0002\u0c63\u0157\u0003",
    "\u0002\u0002\u0002\u0c64\u0c65\u0007e\u0002\u0002\u0c65\u0c66\u0007",
    "\u00ce\u0002\u0002\u0c66\u0c67\u0007\u00d2\u0002\u0002\u0c67\u0c68\u0005",
    "\u0152\u00aa\u0002\u0c68\u0c69\u0007\u00cd\u0002\u0002\u0c69\u0c6a\u0005",
    "\u0172\u00ba\u0002\u0c6a\u0c6b\u0007\u00cd\u0002\u0002\u0c6b\u0c6c\u0005",
    "\u017c\u00bf\u0002\u0c6c\u0c6d\u0007\u00d3\u0002\u0002\u0c6d\u0159\u0003",
    "\u0002\u0002\u0002\u0c6e\u0c6f\u0007\u009a\u0002\u0002\u0c6f\u0c70\u0007",
    "\u00ce\u0002\u0002\u0c70\u0c71\u0007\u00e5\u0002\u0002\u0c71\u015b\u0003",
    "\u0002\u0002\u0002\u0c72\u0c73\u0007\u009b\u0002\u0002\u0c73\u0c74\u0007",
    "\u00ce\u0002\u0002\u0c74\u0c77\u0007\u00d2\u0002\u0002\u0c75\u0c78\t",
    "\b\u0002\u0002\u0c76\u0c78\u0007\u00e5\u0002\u0002\u0c77\u0c75\u0003",
    "\u0002\u0002\u0002\u0c77\u0c76\u0003\u0002\u0002\u0002\u0c78\u0c79\u0003",
    "\u0002\u0002\u0002\u0c79\u0c7a\u0007\u00cd\u0002\u0002\u0c7a\u0c80\u0007",
    "\u00e5\u0002\u0002\u0c7b\u0c7e\u0007\u00cd\u0002\u0002\u0c7c\u0c7f\u0007",
    "\u00e5\u0002\u0002\u0c7d\u0c7f\u0005\u017c\u00bf\u0002\u0c7e\u0c7c\u0003",
    "\u0002\u0002\u0002\u0c7e\u0c7d\u0003\u0002\u0002\u0002\u0c7f\u0c81\u0003",
    "\u0002\u0002\u0002\u0c80\u0c7b\u0003\u0002\u0002\u0002\u0c81\u0c82\u0003",
    "\u0002\u0002\u0002\u0c82\u0c80\u0003\u0002\u0002\u0002\u0c82\u0c83\u0003",
    "\u0002\u0002\u0002\u0c83\u0c84\u0003\u0002\u0002\u0002\u0c84\u0c85\u0007",
    "\u00d3\u0002\u0002\u0c85\u015d\u0003\u0002\u0002\u0002\u0c86\u0c87\u0007",
    "\u009c\u0002\u0002\u0c87\u0c88\u0007\u00ce\u0002\u0002\u0c88\u0c8b\u0007",
    "\u00d2\u0002\u0002\u0c89\u0c8c\t\t\u0002\u0002\u0c8a\u0c8c\u0007\u00e5",
    "\u0002\u0002\u0c8b\u0c89\u0003\u0002\u0002\u0002\u0c8b\u0c8a\u0003\u0002",
    "\u0002\u0002\u0c8c\u0c8d\u0003\u0002\u0002\u0002\u0c8d\u0c8e\u0007\u00cd",
    "\u0002\u0002\u0c8e\u0c94\u0007\u00e5\u0002\u0002\u0c8f\u0c92\u0007\u00cd",
    "\u0002\u0002\u0c90\u0c93\u0007\u00e5\u0002\u0002\u0c91\u0c93\u0005\u017c",
    "\u00bf\u0002\u0c92\u0c90\u0003\u0002\u0002\u0002\u0c92\u0c91\u0003\u0002",
    "\u0002\u0002\u0c93\u0c95\u0003\u0002\u0002\u0002\u0c94\u0c8f\u0003\u0002",
    "\u0002\u0002\u0c95\u0c96\u0003\u0002\u0002\u0002\u0c96\u0c94\u0003\u0002",
    "\u0002\u0002\u0c96\u0c97\u0003\u0002\u0002\u0002\u0c97\u0c98\u0003\u0002",
    "\u0002\u0002\u0c98\u0c99\u0007\u00d3\u0002\u0002\u0c99\u015f\u0003\u0002",
    "\u0002\u0002\u0c9a\u0c9b\u0007\u001b\u0002\u0002\u0c9b\u0c9c\u0007\u00ce",
    "\u0002\u0002\u0c9c\u0c9f\u0007\u00d2\u0002\u0002\u0c9d\u0ca0\t\b\u0002",
    "\u0002\u0c9e\u0ca0\u0007\u00e5\u0002\u0002\u0c9f\u0c9d\u0003\u0002\u0002",
    "\u0002\u0c9f\u0c9e\u0003\u0002\u0002\u0002\u0ca0\u0ca1\u0003\u0002\u0002",
    "\u0002\u0ca1\u0ca2\u0007\u00cd\u0002\u0002\u0ca2\u0ca3\u0007\u00e5\u0002",
    "\u0002\u0ca3\u0ca4\u0007\u00cd\u0002\u0002\u0ca4\u0ca5\u0007\u00e5\u0002",
    "\u0002\u0ca5\u0ca6\u0007\u00cd\u0002\u0002\u0ca6\u0ca7\u0007\u00e5\u0002",
    "\u0002\u0ca7\u0ca8\u0007\u00d3\u0002\u0002\u0ca8\u0161\u0003\u0002\u0002",
    "\u0002\u0ca9\u0caa\u0007\u009e\u0002\u0002\u0caa\u0cab\u0007\u00ce\u0002",
    "\u0002\u0cab\u0cac\u0007\u00e5\u0002\u0002\u0cac\u0163\u0003\u0002\u0002",
    "\u0002\u0cad\u0cae\u0007\u009f\u0002\u0002\u0cae\u0caf\u0007\u00ce\u0002",
    "\u0002\u0caf\u0cb2\u0007\u00d2\u0002\u0002\u0cb0\u0cb3\t\b\u0002\u0002",
    "\u0cb1\u0cb3\u0007\u00e5\u0002\u0002\u0cb2\u0cb0\u0003\u0002\u0002\u0002",
    "\u0cb2\u0cb1\u0003\u0002\u0002\u0002\u0cb3\u0cb4\u0003\u0002\u0002\u0002",
    "\u0cb4\u0cb5\u0007\u00cd\u0002\u0002\u0cb5\u0cbb\u0007\u00e5\u0002\u0002",
    "\u0cb6\u0cb9\u0007\u00cd\u0002\u0002\u0cb7\u0cba\u0005\u0172\u00ba\u0002",
    "\u0cb8\u0cba\u0007\u001c\u0002\u0002\u0cb9\u0cb7\u0003\u0002\u0002\u0002",
    "\u0cb9\u0cb8\u0003\u0002\u0002\u0002\u0cba\u0cbc\u0003\u0002\u0002\u0002",
    "\u0cbb\u0cb6\u0003\u0002\u0002\u0002\u0cbb\u0cbc\u0003\u0002\u0002\u0002",
    "\u0cbc\u0cbf\u0003\u0002\u0002\u0002\u0cbd\u0cbe\u0007\u00cd\u0002\u0002",
    "\u0cbe\u0cc0\u0005\u017a\u00be\u0002\u0cbf\u0cbd\u0003\u0002\u0002\u0002",
    "\u0cbf\u0cc0\u0003\u0002\u0002\u0002\u0cc0\u0cc1\u0003\u0002\u0002\u0002",
    "\u0cc1\u0cc2\u0007\u00d3\u0002\u0002\u0cc2\u0165\u0003\u0002\u0002\u0002",
    "\u0cc3\u0cd2\u0005\u017e\u00c0\u0002\u0cc4\u0cd2\u0005\u0180\u00c1\u0002",
    "\u0cc5\u0cd2\u0005\u0182\u00c2\u0002\u0cc6\u0cd2\u0007\u00df\u0002\u0002",
    "\u0cc7\u0cd2\u0005\u0178\u00bd\u0002\u0cc8\u0cd2\u0007\u00e0\u0002\u0002",
    "\u0cc9\u0cd2\u0007\u00e2\u0002\u0002\u0cca\u0cd2\u0007\u00e3\u0002\u0002",
    "\u0ccb\u0cd2\u0007\u00e4\u0002\u0002\u0ccc\u0cd2\u0005\u016a\u00b6\u0002",
    "\u0ccd\u0cd2\u0005\u016c\u00b7\u0002\u0cce\u0cd2\u0005\u0170\u00b9\u0002",
    "\u0ccf\u0cd2\u0005\u017a\u00be\u0002\u0cd0\u0cd2\u0005\u0172\u00ba\u0002",
    "\u0cd1\u0cc3\u0003\u0002\u0002\u0002\u0cd1\u0cc4\u0003\u0002\u0002\u0002",
    "\u0cd1\u0cc5\u0003\u0002\u0002\u0002\u0cd1\u0cc6\u0003\u0002\u0002\u0002",
    "\u0cd1\u0cc7\u0003\u0002\u0002\u0002\u0cd1\u0cc8\u0003\u0002\u0002\u0002",
    "\u0cd1\u0cc9\u0003\u0002\u0002\u0002\u0cd1\u0cca\u0003\u0002\u0002\u0002",
    "\u0cd1\u0ccb\u0003\u0002\u0002\u0002\u0cd1\u0ccc\u0003\u0002\u0002\u0002",
    "\u0cd1\u0ccd\u0003\u0002\u0002\u0002\u0cd1\u0cce\u0003\u0002\u0002\u0002",
    "\u0cd1\u0ccf\u0003\u0002\u0002\u0002\u0cd1\u0cd0\u0003\u0002\u0002\u0002",
    "\u0cd2\u0167\u0003\u0002\u0002\u0002\u0cd3\u0cd4\u0007c\u0002\u0002",
    "\u0cd4\u0cd5\u0007\u00ce\u0002\u0002\u0cd5\u0cd6\u0005\u0174\u00bb\u0002",
    "\u0cd6\u0169\u0003\u0002\u0002\u0002\u0cd7\u0cd9\u0007\u00d2\u0002\u0002",
    "\u0cd8\u0cda\u0007\u00be\u0002\u0002\u0cd9\u0cd8\u0003\u0002\u0002\u0002",
    "\u0cd9\u0cda\u0003\u0002\u0002\u0002\u0cda\u0ce2\u0003\u0002\u0002\u0002",
    "\u0cdb\u0cdc\u0005\u0166\u00b4\u0002\u0cdc\u0cde\u0007\u00cd\u0002\u0002",
    "\u0cdd\u0cdf\u0007\u00be\u0002\u0002\u0cde\u0cdd\u0003\u0002\u0002\u0002",
    "\u0cde\u0cdf\u0003\u0002\u0002\u0002\u0cdf\u0ce1\u0003\u0002\u0002\u0002",
    "\u0ce0\u0cdb\u0003\u0002\u0002\u0002\u0ce1\u0ce4\u0003\u0002\u0002\u0002",
    "\u0ce2\u0ce0\u0003\u0002\u0002\u0002\u0ce2\u0ce3\u0003\u0002\u0002\u0002",
    "\u0ce3\u0ce5\u0003\u0002\u0002\u0002\u0ce4\u0ce2\u0003\u0002\u0002\u0002",
    "\u0ce5\u0ce7\u0005\u0166\u00b4\u0002\u0ce6\u0ce8\u0007\u00be\u0002\u0002",
    "\u0ce7\u0ce6\u0003\u0002\u0002\u0002\u0ce7\u0ce8\u0003\u0002\u0002\u0002",
    "\u0ce8\u0ce9\u0003\u0002\u0002\u0002\u0ce9\u0cea\u0007\u00d3\u0002\u0002",
    "\u0cea\u0cfb\u0003\u0002\u0002\u0002\u0ceb\u0ced\u0007\u00d2\u0002\u0002",
    "\u0cec\u0cee\u0007\u00be\u0002\u0002\u0ced\u0cec\u0003\u0002\u0002\u0002",
    "\u0ced\u0cee\u0003\u0002\u0002\u0002\u0cee\u0cef\u0003\u0002\u0002\u0002",
    "\u0cef\u0cfb\u0007\u00d3\u0002\u0002\u0cf0\u0cf1\u0007\u00d8\u0002\u0002",
    "\u0cf1\u0cf2\u0007\u00e7\u0002\u0002\u0cf2\u0cf3\u0005\u0166\u00b4\u0002",
    "\u0cf3\u0cf4\u0007\u00e8\u0002\u0002\u0cf4\u0cf5\u0007\u00be\u0002\u0002",
    "\u0cf5\u0cf7\u0003\u0002\u0002\u0002\u0cf6\u0cf0\u0003\u0002\u0002\u0002",
    "\u0cf7\u0cf8\u0003\u0002\u0002\u0002\u0cf8\u0cf6\u0003\u0002\u0002\u0002",
    "\u0cf8\u0cf9\u0003\u0002\u0002\u0002\u0cf9\u0cfb\u0003\u0002\u0002\u0002",
    "\u0cfa\u0cd7\u0003\u0002\u0002\u0002\u0cfa\u0ceb\u0003\u0002\u0002\u0002",
    "\u0cfa\u0cf6\u0003\u0002\u0002\u0002\u0cfb\u016b\u0003\u0002\u0002\u0002",
    "\u0cfc\u0cfe\u0007\u00dc\u0002\u0002\u0cfd\u0cff\u0007\u00be\u0002\u0002",
    "\u0cfe\u0cfd\u0003\u0002\u0002\u0002\u0cfe\u0cff\u0003\u0002\u0002\u0002",
    "\u0cff\u0d07\u0003\u0002\u0002\u0002\u0d00\u0d01\u0005\u016e\u00b8\u0002",
    "\u0d01\u0d03\u0007\u00cd\u0002\u0002\u0d02\u0d04\u0007\u00be\u0002\u0002",
    "\u0d03\u0d02\u0003\u0002\u0002\u0002\u0d03\u0d04\u0003\u0002\u0002\u0002",
    "\u0d04\u0d06\u0003\u0002\u0002\u0002\u0d05\u0d00\u0003\u0002\u0002\u0002",
    "\u0d06\u0d09\u0003\u0002\u0002\u0002\u0d07\u0d05\u0003\u0002\u0002\u0002",
    "\u0d07\u0d08\u0003\u0002\u0002\u0002\u0d08\u0d0a\u0003\u0002\u0002\u0002",
    "\u0d09\u0d07\u0003\u0002\u0002\u0002\u0d0a\u0d0c\u0005\u016e\u00b8\u0002",
    "\u0d0b\u0d0d\u0007\u00be\u0002\u0002\u0d0c\u0d0b\u0003\u0002\u0002\u0002",
    "\u0d0c\u0d0d\u0003\u0002\u0002\u0002\u0d0d\u0d0e\u0003\u0002\u0002\u0002",
    "\u0d0e\u0d0f\u0007\u00dd\u0002\u0002\u0d0f\u0d1d\u0003\u0002\u0002\u0002",
    "\u0d10\u0d12\u0007\u00dc\u0002\u0002\u0d11\u0d13\u0007\u00be\u0002\u0002",
    "\u0d12\u0d11\u0003\u0002\u0002\u0002\u0d12\u0d13\u0003\u0002\u0002\u0002",
    "\u0d13\u0d14\u0003\u0002\u0002\u0002\u0d14\u0d1d\u0007\u00dd\u0002\u0002",
    "\u0d15\u0d16\u0005\u016e\u00b8\u0002\u0d16\u0d17\u0007\u00be\u0002\u0002",
    "\u0d17\u0d19\u0003\u0002\u0002\u0002\u0d18\u0d15\u0003\u0002\u0002\u0002",
    "\u0d19\u0d1a\u0003\u0002\u0002\u0002\u0d1a\u0d18\u0003\u0002\u0002\u0002",
    "\u0d1a\u0d1b\u0003\u0002\u0002\u0002\u0d1b\u0d1d\u0003\u0002\u0002\u0002",
    "\u0d1c\u0cfc\u0003\u0002\u0002\u0002\u0d1c\u0d10\u0003\u0002\u0002\u0002",
    "\u0d1c\u0d18\u0003\u0002\u0002\u0002\u0d1d\u016d\u0003\u0002\u0002\u0002",
    "\u0d1e\u0d1f\u0007\u00e5\u0002\u0002\u0d1f\u0d20\u0007\u00ce\u0002\u0002",
    "\u0d20\u0d21\u0005\u0166\u00b4\u0002\u0d21\u016f\u0003\u0002\u0002\u0002",
    "\u0d22\u0d25\u0007\u00d2\u0002\u0002\u0d23\u0d26\u0005\u0166\u00b4\u0002",
    "\u0d24\u0d26\u0007\u00e1\u0002\u0002\u0d25\u0d23\u0003\u0002\u0002\u0002",
    "\u0d25\u0d24\u0003\u0002\u0002\u0002\u0d26\u0d27\u0003\u0002\u0002\u0002",
    "\u0d27\u0d2a\u0007\u00cd\u0002\u0002\u0d28\u0d2b\u0005\u0166\u00b4\u0002",
    "\u0d29\u0d2b\u0007\u00e1\u0002\u0002\u0d2a\u0d28\u0003\u0002\u0002\u0002",
    "\u0d2a\u0d29\u0003\u0002\u0002\u0002\u0d2b\u0d2c\u0003\u0002\u0002\u0002",
    "\u0d2c\u0d2d\u0007\u00d3\u0002\u0002\u0d2d\u0171\u0003\u0002\u0002\u0002",
    "\u0d2e\u0d36\u0007\u00c0\u0002\u0002\u0d2f\u0d31\u0005\u0186\u00c4\u0002",
    "\u0d30\u0d2f\u0003\u0002\u0002\u0002\u0d31\u0d34\u0003\u0002\u0002\u0002",
    "\u0d32\u0d30\u0003\u0002\u0002\u0002\u0d32\u0d33\u0003\u0002\u0002\u0002",
    "\u0d33\u0d36\u0003\u0002\u0002\u0002\u0d34\u0d32\u0003\u0002\u0002\u0002",
    "\u0d35\u0d2e\u0003\u0002\u0002\u0002\u0d35\u0d32\u0003\u0002\u0002\u0002",
    "\u0d36\u0173\u0003\u0002\u0002\u0002\u0d37\u0d38\u0005\u0172\u00ba\u0002",
    "\u0d38\u0d39\u0007\u00be\u0002\u0002\u0d39\u0d4b\u0003\u0002\u0002\u0002",
    "\u0d3a\u0d3e\u0007\u00c7\u0002\u0002\u0d3b\u0d3d\u0005\u0186\u00c4\u0002",
    "\u0d3c\u0d3b\u0003\u0002\u0002\u0002\u0d3d\u0d40\u0003\u0002\u0002\u0002",
    "\u0d3e\u0d3c\u0003\u0002\u0002\u0002\u0d3e\u0d3f\u0003\u0002\u0002\u0002",
    "\u0d3f\u0d41\u0003\u0002\u0002\u0002\u0d40\u0d3e\u0003\u0002\u0002\u0002",
    "\u0d41\u0d42\u0007\u00be\u0002\u0002\u0d42\u0d44\u0007\u00e7\u0002\u0002",
    "\u0d43\u0d45\u0005\u0176\u00bc\u0002\u0d44\u0d43\u0003\u0002\u0002\u0002",
    "\u0d45\u0d46\u0003\u0002\u0002\u0002\u0d46\u0d44\u0003\u0002\u0002\u0002",
    "\u0d46\u0d47\u0003\u0002\u0002\u0002\u0d47\u0d48\u0003\u0002\u0002\u0002",
    "\u0d48\u0d49\u0007\u00e8\u0002\u0002\u0d49\u0d4b\u0003\u0002\u0002\u0002",
    "\u0d4a\u0d37\u0003\u0002\u0002\u0002\u0d4a\u0d3a\u0003\u0002\u0002\u0002",
    "\u0d4b\u0175\u0003\u0002\u0002\u0002\u0d4c\u0d4e\u0005\u0186\u00c4\u0002",
    "\u0d4d\u0d4c\u0003\u0002\u0002\u0002\u0d4e\u0d51\u0003\u0002\u0002\u0002",
    "\u0d4f\u0d4d\u0003\u0002\u0002\u0002\u0d4f\u0d50\u0003\u0002\u0002\u0002",
    "\u0d50\u0d52\u0003\u0002\u0002\u0002\u0d51\u0d4f\u0003\u0002\u0002\u0002",
    "\u0d52\u0d5c\u0007\u00be\u0002\u0002\u0d53\u0d55\u0007\u00e7\u0002\u0002",
    "\u0d54\u0d56\u0005\u0176\u00bc\u0002\u0d55\u0d54\u0003\u0002\u0002\u0002",
    "\u0d56\u0d57\u0003\u0002\u0002\u0002\u0d57\u0d55\u0003\u0002\u0002\u0002",
    "\u0d57\u0d58\u0003\u0002\u0002\u0002\u0d58\u0d59\u0003\u0002\u0002\u0002",
    "\u0d59\u0d5a\u0007\u00e8\u0002\u0002\u0d5a\u0d5c\u0003\u0002\u0002\u0002",
    "\u0d5b\u0d4f\u0003\u0002\u0002\u0002\u0d5b\u0d53\u0003\u0002\u0002\u0002",
    "\u0d5c\u0177\u0003\u0002\u0002\u0002\u0d5d\u0d61\u0005\u017c\u00bf\u0002",
    "\u0d5e\u0d61\u0007\u00c5\u0002\u0002\u0d5f\u0d61\u0007\u00c6\u0002\u0002",
    "\u0d60\u0d5d\u0003\u0002\u0002\u0002\u0d60\u0d5e\u0003\u0002\u0002\u0002",
    "\u0d60\u0d5f\u0003\u0002\u0002\u0002\u0d61\u0179\u0003\u0002\u0002\u0002",
    "\u0d62\u0d63\t\n\u0002\u0002\u0d63\u017b\u0003\u0002\u0002\u0002\u0d64",
    "\u0d65\t\u000b\u0002\u0002\u0d65\u017d\u0003\u0002\u0002\u0002\u0d66",
    "\u0d67\t\f\u0002\u0002\u0d67\u0d68\t\r\u0002\u0002\u0d68\u017f\u0003",
    "\u0002\u0002\u0002\u0d69\u0d6a\t\f\u0002\u0002\u0d6a\u0d6b\t\u000e\u0002",
    "\u0002\u0d6b\u0181\u0003\u0002\u0002\u0002\u0d6c\u0d6d\t\f\u0002\u0002",
    "\u0d6d\u0d6e\t\u000f\u0002\u0002\u0d6e\u0183\u0003\u0002\u0002\u0002",
    "\u0d6f\u0d70\t\u0010\u0002\u0002\u0d70\u0185\u0003\u0002\u0002\u0002",
    "\u0d71\u0d72\t\u0011\u0002\u0002\u0d72\u0187\u0003\u0002\u0002\u0002",
    "\u00fc\u018a\u018c\u0196\u019e\u01b0\u01bc\u01ca\u01d3\u01e1\u01eb\u01f4",
    "\u0219\u0236\u023f\u0264\u0281\u028a\u029c\u02ae\u02ba\u02be\u02c7\u02d9",
    "\u02eb\u02f7\u02fb\u030d\u0318\u0326\u0338\u034a\u035a\u0363\u0371\u0383",
    "\u0394\u03a5\u03ae\u03b4\u03c5\u03cd\u03dc\u03ec\u03f1\u0403\u040c\u042a",
    "\u0430\u0439\u044b\u0450\u0462\u046b\u0482\u0488\u049c\u04a5\u04b3\u04cc",
    "\u04d4\u04ec\u04f1\u04fa\u0503\u0512\u0525\u052e\u0546\u054b\u0554\u0562",
    "\u0569\u0572\u057b\u0586\u0591\u05a0\u05bc\u05c5\u05d4\u05f1\u05f3\u0601",
    "\u0626\u062d\u0639\u0645\u0659\u0665\u0679\u0682\u0690\u069c\u06a5\u06b3",
    "\u06c3\u06d3\u06d7\u06e0\u06ee\u06fc\u0708\u0711\u071f\u0727\u0730\u073e",
    "\u074e\u075e\u0761\u076a\u077c\u0781\u0792\u07a2\u07a5\u07ae\u07c5\u07cb",
    "\u07e8\u07ed\u07f4\u07fd\u080b\u0813\u081c\u082a\u0835\u083e\u084c\u0857",
    "\u0867\u086c\u087e\u0883\u0894\u0897\u089f\u08ad\u08c8\u08d8\u08db\u08e4",
    "\u08f2\u0906\u0916\u091a\u0923\u0931\u0949\u095b\u0960\u0969\u0979\u098e",
    "\u099e\u09a2\u09ab\u09b9\u09d9\u0a06\u0a14\u0a20\u0a27\u0a30\u0a43\u0a4c",
    "\u0a60\u0a6e\u0a78\u0a81\u0a8f\u0a9a\u0aa3\u0aae\u0aba\u0acc\u0ad6\u0ae7",
    "\u0af0\u0afc\u0b0a\u0b13\u0b1e\u0b25\u0b30\u0b3e\u0b4d\u0b5d\u0b62\u0b71",
    "\u0b7f\u0b83\u0b8b\u0b96\u0bb0\u0bc0\u0bcb\u0bdb\u0bde\u0be8\u0bf9\u0bfd",
    "\u0c10\u0c19\u0c24\u0c2d\u0c3c\u0c40\u0c4a\u0c57\u0c5e\u0c62\u0c77\u0c7e",
    "\u0c82\u0c8b\u0c92\u0c96\u0c9f\u0cb2\u0cb9\u0cbb\u0cbf\u0cd1\u0cd9\u0cde",
    "\u0ce2\u0ce7\u0ced\u0cf8\u0cfa\u0cfe\u0d03\u0d07\u0d0c\u0d12\u0d1a\u0d1c",
    "\u0d25\u0d2a\u0d32\u0d35\u0d3e\u0d46\u0d4a\u0d4f\u0d57\u0d5b\u0d60"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'substitution_mappings'", "'node_type'", "'mapping'", 
                     "'node_templates'", "'artifacts'", "'name'", "'targets'", 
                     "'policies'", "'triggers'", "'event'", "'schedule'", 
                     "'target_filter'", "'condition'", "'constraint'", "'period'", 
                     "'evaluations'", "'method'", "'action'", "'requirement'", 
                     "'node_filter'", "'preconditions'", "'steps'", "'join'", 
                     "'TARGER'", "'get_operation_output'", "'local_file'", 
                     null, "'tosca_simple_yaml_1_0'", "'tosca_simple_yaml_1_1'", 
                     "'supported'", "'unsupported'", "'experimental'", "'deprecated'", 
                     "'B'", "'kB'", "'KiB'", "'MB'", "'MiB'", "'GB'", "'GiB'", 
                     "'TB'", "'TiB'", "'d'", "'h'", "'m'", "'s'", "'ms'", 
                     "'us'", "'ns'", "'Hz'", "'kHz'", "'MHz'", "'GHz'", 
                     "'initial'", "'creating'", "'created'", "'configuring'", 
                     "'configured'", "'starting'", "'started'", "'stopping'", 
                     "'stopped'", "'deleting'", "'error'", "'available'", 
                     "'string'", "'boolean'", "'list'", "'map'", "'range'", 
                     "'integer'", "'float'", "'scalar-unit.size'", "'size'", 
                     "'scalar-unit.time'", "'time'", "'scalar-unit.frequency'", 
                     "'frequency'", "'tosca_definition_version'", "'version'", 
                     "'metadata'", "'template_name'", "'template_author'", 
                     "'template_version'", "'artifact_types'", "'derived_from'", 
                     "'mime_type'", "'file_ext'", "'data_types'", "'properties'", 
                     "'type'", "'required'", "'status'", "'default'", "'repositories'", 
                     "'url'", "'description'", "'credential'", "'token'", 
                     "'protocol'", "'token_type'", "'user'", "'imports'", 
                     "'file'", "'repository'", "'namespace_prefix'", "'namespace_uri'", 
                     "'capability_types'", "'node_types'", "'interface_types'", 
                     "'relationship_types'", "'group_types'", "'groups'", 
                     "'copy'", "'policy_types'", "'topology_template'", 
                     "'relationship_templates'", "'constraints'", "'equal'", 
                     "'greater_than'", "'greater_or_equal'", "'less_than'", 
                     "'less_or_equal'", "'in_range'", "'valid_values'", 
                     "'value'", "'length'", "'min_length'", "'max_length'", 
                     "'pattern'", "'entry_schema'", "'attributes'", "'valid_source_types'", 
                     "'valid_target_types'", "'inputs'", "'interfaces'", 
                     "'relationship'", "'occurences'", "'deploy_path'", 
                     "'capabilities'", "'node'", "'implementation'", "'dependencies'", 
                     "'capability'", "'requirements'", "'primary'", "'SELF'", 
                     "'HOST'", "'SOURCE'", "'TARGET'", "'LOCAL_FILE'", "'get_input'", 
                     "'get_property'", "'get_attribute'", "'get_operation_attribute'", 
                     "'get_nodes_of_types'", "'get_artifact'", "'concat'", 
                     "'delegate'", "'set_state'", "'call_operation'", "'directives'", 
                     "'inline'", "'target'", "'target_relationship'", "'filter'", 
                     "'activities'", "'operation_host'", "'on_success'", 
                     "'on_failure'", "'assert'", "'or'", "'and'", "'not'", 
                     "'after'", "'before'", "'wait_source'", "'after_source'", 
                     "'wait_target'", "'after_target'", "'activity'", "'target_weaving'", 
                     "'source_weaving'", "'workflows'", "'members'", null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, "'.'", "'...'", "'*'", "'('", "')'", "','", 
                     "':'", "';'", "'**'", "'='", "'['", "']'", "'^'", "'<<'", 
                     "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'{'", 
                     "'}'", null, null, null, "'UNBOUNDED'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      "BASETYPE_NAMES", "TOSCA_SIMPLE_YAML_1_0", "TOSCA_SIMPLE_YAML_1_1", 
                      "SUPPORTED", "UNSUPPORTED", "EXPERIMENTAL", "DEPRECATED", 
                      "S_B", "S_KB", "S_KIB", "S_MB", "S_MIB", "S_GB", "S_GIB", 
                      "S_TB", "S_TIB", "T_D", "T_H", "T_M", "T_S", "T_MS", 
                      "T_US", "T_NS", "F_HZ", "F_KHZ", "F_MHZ", "F_GHZ", 
                      "INITIAL", "CREATING", "CREATED", "CONFIGURING", "CONFIGURED", 
                      "STARTING", "STARTED", "STOPPING", "STOPPED", "DELETING", 
                      "ERROR", "AVAILABLE", "STRING", "BOOLEAN", "LIST", 
                      "MAP", "RANGE", "INTEGER", "FLOAT", "SCALAR_UNIT_SIZE", 
                      "LSIZE", "SCALAR_UNIT_TIME", "LTIME", "SCALAR_UNIT_FREQUENCY", 
                      "LFREQUENCY", "TOSCA_DEFINITION_VERSION", "LVERSION", 
                      "METADATA", "TEMPLATE_NAME", "TEMPLATE_AUTHOR", "TEMPLATE_VERSION", 
                      "ARTIFACT_TYPES", "DERIVED_FROM", "MIME_TYPE", "FILE_EXT", 
                      "DATA_TYPES", "PROPERTIES", "TYPE", "REQUIRED", "STATUS", 
                      "DEFAULT", "REPOSITORIES", "URL", "DESCRIPTION", "CREDENTIAL", 
                      "TOKEN", "PROTOCOL", "TOKEN_TYPE", "USER", "IMPORTS", 
                      "FILE", "REPOSITORY", "NAMESPACE_PREFIX", "NAMESPACE_URI", 
                      "CAPABILITY_TYPES", "NODE_TYPES", "INTERFACE_TYPES", 
                      "RELATIONSHIP_TYPES", "GROUP_TYPES", "GROUPS", "COPY", 
                      "POLICY_TYPES", "TOPOLOGY_TYPES", "RELATIONSHIP_TEMPLATES", 
                      "CONSTRAINTS", "EQUAL", "GREATER_THAN", "GREATER_OR_EQUAL", 
                      "LESS_THAN", "LESS_OR_EQUAL", "IN_RANGE", "VALID_VALUES", 
                      "VALUE", "LENGTH", "MIN_LENGTH", "MAX_LENGTH", "PATTERN", 
                      "ENTRY_SCHEMA", "ATTRIBUTES", "VALID_SOURCE_TYPES", 
                      "VALID_TARGET_TYPES", "INPUTS", "INTERFACES", "RELATIONSHIP", 
                      "OCCURENCES", "DEPLOY_PATH", "CAPABILITIES", "NODE", 
                      "IMPLEMENTATION", "DEPENDENCIES", "CAPABILITY", "REQUIREMENTS", 
                      "PRIMARY", "K_SELF", "K_HOST", "K_SOURCE", "K_TARGET", 
                      "LOCAL_FILE", "GET_INPUT", "GET_PROPERTY", "GET_ATTRIBUTE", 
                      "GET_OPERATION_ATTRIBUTE", "GET_NODES_OF_TYPES", "GET_ARTIFACT", 
                      "CONCAT", "DELEGATE", "SET_STATE", "CALL_OPERATION", 
                      "DIRECTIVES", "INLINE", "TARGET", "TARGET_RELATIONSHIP", 
                      "FILTER", "ACTIVITIES", "OPERATION_HOST", "ON_SUCCESS", 
                      "ON_FAILURE", "ASSERT", "OR", "AND", "NOT", "AFTER", 
                      "BEFORE", "WAIT_SOURCE", "AFTER_SOURCE", "WAIT_TARGET", 
                      "AFTER_TARGET", "ACTIVITY", "TARGET_WEAVING", "SOURCE_WEAVING", 
                      "WORKFLOWS", "MEMBERS", "TRUE", "FALSE", "NEWLINE", 
                      "LITEM", "STRING_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "MLPREF", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", 
                      "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", 
                      "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "XOR", "LEFT_SHIFT", 
                      "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", 
                      "OPEN_BRACE", "CLOSE_BRACE", "IGNORER", "INFINITY", 
                      "VERSION", "UNBOUNDED", "NULL", "NAN", "TIMESTAMP", 
                      "ID", "UNKNOWN_CHAR", "INDENT", "DEDENT" ];

var ruleNames =  [ "file_input", "stmt", "service_template", "service_template_clause", 
                   "topology_template", "topology_template_clause", "substitution_mapping", 
                   "substitution_mapping_node_type", "substitution_mapping_clause", 
                   "properties_mapping", "property_mapping", "property_mapping_clause", 
                   "attributes_mapping", "attribute_mapping", "attribute_mapping_clause", 
                   "capabilities_mapping", "capability_mapping", "capability_mapping_clause", 
                   "requirements_mapping", "requirement_mapping", "requirement_mapping_clause", 
                   "interfaces_mapping", "interface_mapping", "node_templates", 
                   "node_template", "node_template_clause", "relationship_templates", 
                   "relationship_template", "relationship_template_clause", 
                   "tosca_definition_version", "metadata", "metadata_clause", 
                   "repositories", "repository", "repository_short", "repository_detail", 
                   "repository_clause", "repository_url", "repository_cred", 
                   "cred_ele", "file_imports", "file_import", "artifact_defs", 
                   "artifact_def", "artifact_def_clause", "node_requirement_assignments", 
                   "node_requirement_assignment", "node_requirement_assignment_clause", 
                   "properties", "property", "property_clause", "property_assignments", 
                   "property_assignment", "property_assignment_clause", 
                   "attributes", "attribute", "attribute_clause", "attribute_assignments", 
                   "attribute_assignment", "capability_assignments", "capability_assignment", 
                   "capability_assignment_clause", "attribute_assignment_clause", 
                   "inputs", "input_assignments", "input_parameters", "input_parameter", 
                   "input_parameter_clause", "output_parameters", "output_parameter", 
                   "output_parameter_clause", "constraints", "constraint_clause", 
                   "entry_decl", "entry_detailed", "entry_clause", "file_import_clause", 
                   "entity_metadata", "entity_metadata_clause", "entity_clause", 
                   "node_types", "node_type", "node_type_clause", "relationship_types", 
                   "relationship_type", "relationship_type_clause", "artifact_types", 
                   "artifact_type", "artifact_type_clause", "data_types", 
                   "data_type", "data_type_clause", "capability_types", 
                   "capability_type", "capability_type_clause", "capability_defs", 
                   "capability_def", "capability_def_clause", "requirement_defs", 
                   "requirement_def", "requirement_def_clause", "requirement_def_relation_clause", 
                   "interface_types", "interface_type", "interface_type_clause", 
                   "interface_defs", "interface_def", "interface_def_clause", 
                   "interface_defs_template", "interface_def_template", 
                   "interface_def_template_clause", "operation_def", "operation_def_clause", 
                   "implementation_clause", "group_types", "group_type", 
                   "group_type_clause", "group_defs", "group_def", "group_def_clause", 
                   "policy_types", "policy_type", "policy_type_clause", 
                   "policy_defs", "policy_def", "policy_def_clause", "trigger_defs", 
                   "trigger_def", "trigger_def_clause", "target_filter_clause", 
                   "node_filter", "node_filter_clause", "properties_filter", 
                   "property_filter", "capabilities_filter", "capability_filter", 
                   "declarative_node_workflows", "declarative_node_workflow", 
                   "declarative_node_workflow_clause", "declarative_rel_workflows", 
                   "declarative_rel_workflow", "declarative_rel_workflow_clause", 
                   "workflow_source_weavings", "workflow_target_weavings", 
                   "workflow_source_weaving", "workflow_source_weaving_clause", 
                   "workflow_target_weaving", "workflow_target_weaving_clause", 
                   "workflow_preconditions", "workflow_precondition", "workflow_precondition_clause", 
                   "workflow_condition_clauses", "workflow_filter_clauses", 
                   "workflow_condition_clause", "workflow_condition_or_clause", 
                   "workflow_condition_and_clause", "workflow_condition_assert_clause", 
                   "workflow_assertion", "workflow_steps", "workflow_step", 
                   "workflow_step_clause", "workflow_activities", "workflow_activity", 
                   "imperative_workflows", "imperative_workflow", "imperative_workflow_clause", 
                   "value_expr", "func_expr", "func_arg", "func_concat", 
                   "func_join", "func_token", "func_get_input", "func_get_property", 
                   "func_get_attribute", "func_get_operation_output", "func_get_nodes_of_types", 
                   "func_get_artifact", "value", "descr", "list", "map", 
                   "value_assoc", "range", "short_str", "str", "sub_mlstring", 
                   "number", "bool", "integer", "size", "time", "freq", 
                   "workflow_state", "alltoken" ];

function ToscaParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ToscaParser.prototype = Object.create(antlr4.Parser.prototype);
ToscaParser.prototype.constructor = ToscaParser;

Object.defineProperty(ToscaParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ToscaParser.EOF = antlr4.Token.EOF;
ToscaParser.T__0 = 1;
ToscaParser.T__1 = 2;
ToscaParser.T__2 = 3;
ToscaParser.T__3 = 4;
ToscaParser.T__4 = 5;
ToscaParser.T__5 = 6;
ToscaParser.T__6 = 7;
ToscaParser.T__7 = 8;
ToscaParser.T__8 = 9;
ToscaParser.T__9 = 10;
ToscaParser.T__10 = 11;
ToscaParser.T__11 = 12;
ToscaParser.T__12 = 13;
ToscaParser.T__13 = 14;
ToscaParser.T__14 = 15;
ToscaParser.T__15 = 16;
ToscaParser.T__16 = 17;
ToscaParser.T__17 = 18;
ToscaParser.T__18 = 19;
ToscaParser.T__19 = 20;
ToscaParser.T__20 = 21;
ToscaParser.T__21 = 22;
ToscaParser.T__22 = 23;
ToscaParser.T__23 = 24;
ToscaParser.T__24 = 25;
ToscaParser.T__25 = 26;
ToscaParser.BASETYPE_NAMES = 27;
ToscaParser.TOSCA_SIMPLE_YAML_1_0 = 28;
ToscaParser.TOSCA_SIMPLE_YAML_1_1 = 29;
ToscaParser.SUPPORTED = 30;
ToscaParser.UNSUPPORTED = 31;
ToscaParser.EXPERIMENTAL = 32;
ToscaParser.DEPRECATED = 33;
ToscaParser.S_B = 34;
ToscaParser.S_KB = 35;
ToscaParser.S_KIB = 36;
ToscaParser.S_MB = 37;
ToscaParser.S_MIB = 38;
ToscaParser.S_GB = 39;
ToscaParser.S_GIB = 40;
ToscaParser.S_TB = 41;
ToscaParser.S_TIB = 42;
ToscaParser.T_D = 43;
ToscaParser.T_H = 44;
ToscaParser.T_M = 45;
ToscaParser.T_S = 46;
ToscaParser.T_MS = 47;
ToscaParser.T_US = 48;
ToscaParser.T_NS = 49;
ToscaParser.F_HZ = 50;
ToscaParser.F_KHZ = 51;
ToscaParser.F_MHZ = 52;
ToscaParser.F_GHZ = 53;
ToscaParser.INITIAL = 54;
ToscaParser.CREATING = 55;
ToscaParser.CREATED = 56;
ToscaParser.CONFIGURING = 57;
ToscaParser.CONFIGURED = 58;
ToscaParser.STARTING = 59;
ToscaParser.STARTED = 60;
ToscaParser.STOPPING = 61;
ToscaParser.STOPPED = 62;
ToscaParser.DELETING = 63;
ToscaParser.ERROR = 64;
ToscaParser.AVAILABLE = 65;
ToscaParser.STRING = 66;
ToscaParser.BOOLEAN = 67;
ToscaParser.LIST = 68;
ToscaParser.MAP = 69;
ToscaParser.RANGE = 70;
ToscaParser.INTEGER = 71;
ToscaParser.FLOAT = 72;
ToscaParser.SCALAR_UNIT_SIZE = 73;
ToscaParser.LSIZE = 74;
ToscaParser.SCALAR_UNIT_TIME = 75;
ToscaParser.LTIME = 76;
ToscaParser.SCALAR_UNIT_FREQUENCY = 77;
ToscaParser.LFREQUENCY = 78;
ToscaParser.TOSCA_DEFINITION_VERSION = 79;
ToscaParser.LVERSION = 80;
ToscaParser.METADATA = 81;
ToscaParser.TEMPLATE_NAME = 82;
ToscaParser.TEMPLATE_AUTHOR = 83;
ToscaParser.TEMPLATE_VERSION = 84;
ToscaParser.ARTIFACT_TYPES = 85;
ToscaParser.DERIVED_FROM = 86;
ToscaParser.MIME_TYPE = 87;
ToscaParser.FILE_EXT = 88;
ToscaParser.DATA_TYPES = 89;
ToscaParser.PROPERTIES = 90;
ToscaParser.TYPE = 91;
ToscaParser.REQUIRED = 92;
ToscaParser.STATUS = 93;
ToscaParser.DEFAULT = 94;
ToscaParser.REPOSITORIES = 95;
ToscaParser.URL = 96;
ToscaParser.DESCRIPTION = 97;
ToscaParser.CREDENTIAL = 98;
ToscaParser.TOKEN = 99;
ToscaParser.PROTOCOL = 100;
ToscaParser.TOKEN_TYPE = 101;
ToscaParser.USER = 102;
ToscaParser.IMPORTS = 103;
ToscaParser.FILE = 104;
ToscaParser.REPOSITORY = 105;
ToscaParser.NAMESPACE_PREFIX = 106;
ToscaParser.NAMESPACE_URI = 107;
ToscaParser.CAPABILITY_TYPES = 108;
ToscaParser.NODE_TYPES = 109;
ToscaParser.INTERFACE_TYPES = 110;
ToscaParser.RELATIONSHIP_TYPES = 111;
ToscaParser.GROUP_TYPES = 112;
ToscaParser.GROUPS = 113;
ToscaParser.COPY = 114;
ToscaParser.POLICY_TYPES = 115;
ToscaParser.TOPOLOGY_TYPES = 116;
ToscaParser.RELATIONSHIP_TEMPLATES = 117;
ToscaParser.CONSTRAINTS = 118;
ToscaParser.EQUAL = 119;
ToscaParser.GREATER_THAN = 120;
ToscaParser.GREATER_OR_EQUAL = 121;
ToscaParser.LESS_THAN = 122;
ToscaParser.LESS_OR_EQUAL = 123;
ToscaParser.IN_RANGE = 124;
ToscaParser.VALID_VALUES = 125;
ToscaParser.VALUE = 126;
ToscaParser.LENGTH = 127;
ToscaParser.MIN_LENGTH = 128;
ToscaParser.MAX_LENGTH = 129;
ToscaParser.PATTERN = 130;
ToscaParser.ENTRY_SCHEMA = 131;
ToscaParser.ATTRIBUTES = 132;
ToscaParser.VALID_SOURCE_TYPES = 133;
ToscaParser.VALID_TARGET_TYPES = 134;
ToscaParser.INPUTS = 135;
ToscaParser.INTERFACES = 136;
ToscaParser.RELATIONSHIP = 137;
ToscaParser.OCCURENCES = 138;
ToscaParser.DEPLOY_PATH = 139;
ToscaParser.CAPABILITIES = 140;
ToscaParser.NODE = 141;
ToscaParser.IMPLEMENTATION = 142;
ToscaParser.DEPENDENCIES = 143;
ToscaParser.CAPABILITY = 144;
ToscaParser.REQUIREMENTS = 145;
ToscaParser.PRIMARY = 146;
ToscaParser.K_SELF = 147;
ToscaParser.K_HOST = 148;
ToscaParser.K_SOURCE = 149;
ToscaParser.K_TARGET = 150;
ToscaParser.LOCAL_FILE = 151;
ToscaParser.GET_INPUT = 152;
ToscaParser.GET_PROPERTY = 153;
ToscaParser.GET_ATTRIBUTE = 154;
ToscaParser.GET_OPERATION_ATTRIBUTE = 155;
ToscaParser.GET_NODES_OF_TYPES = 156;
ToscaParser.GET_ARTIFACT = 157;
ToscaParser.CONCAT = 158;
ToscaParser.DELEGATE = 159;
ToscaParser.SET_STATE = 160;
ToscaParser.CALL_OPERATION = 161;
ToscaParser.DIRECTIVES = 162;
ToscaParser.INLINE = 163;
ToscaParser.TARGET = 164;
ToscaParser.TARGET_RELATIONSHIP = 165;
ToscaParser.FILTER = 166;
ToscaParser.ACTIVITIES = 167;
ToscaParser.OPERATION_HOST = 168;
ToscaParser.ON_SUCCESS = 169;
ToscaParser.ON_FAILURE = 170;
ToscaParser.ASSERT = 171;
ToscaParser.OR = 172;
ToscaParser.AND = 173;
ToscaParser.NOT = 174;
ToscaParser.AFTER = 175;
ToscaParser.BEFORE = 176;
ToscaParser.WAIT_SOURCE = 177;
ToscaParser.AFTER_SOURCE = 178;
ToscaParser.WAIT_TARGET = 179;
ToscaParser.AFTER_TARGET = 180;
ToscaParser.ACTIVITY = 181;
ToscaParser.TARGET_WEAVING = 182;
ToscaParser.SOURCE_WEAVING = 183;
ToscaParser.WORKFLOWS = 184;
ToscaParser.MEMBERS = 185;
ToscaParser.TRUE = 186;
ToscaParser.FALSE = 187;
ToscaParser.NEWLINE = 188;
ToscaParser.LITEM = 189;
ToscaParser.STRING_LITERAL = 190;
ToscaParser.DECIMAL_INTEGER = 191;
ToscaParser.OCT_INTEGER = 192;
ToscaParser.HEX_INTEGER = 193;
ToscaParser.BIN_INTEGER = 194;
ToscaParser.FLOAT_NUMBER = 195;
ToscaParser.IMAG_NUMBER = 196;
ToscaParser.MLPREF = 197;
ToscaParser.DOT = 198;
ToscaParser.ELLIPSIS = 199;
ToscaParser.STAR = 200;
ToscaParser.OPEN_PAREN = 201;
ToscaParser.CLOSE_PAREN = 202;
ToscaParser.COMMA = 203;
ToscaParser.COLON = 204;
ToscaParser.SEMI_COLON = 205;
ToscaParser.POWER = 206;
ToscaParser.ASSIGN = 207;
ToscaParser.OPEN_BRACK = 208;
ToscaParser.CLOSE_BRACK = 209;
ToscaParser.XOR = 210;
ToscaParser.LEFT_SHIFT = 211;
ToscaParser.RIGHT_SHIFT = 212;
ToscaParser.ADD = 213;
ToscaParser.MINUS = 214;
ToscaParser.DIV = 215;
ToscaParser.MOD = 216;
ToscaParser.IDIV = 217;
ToscaParser.OPEN_BRACE = 218;
ToscaParser.CLOSE_BRACE = 219;
ToscaParser.IGNORER = 220;
ToscaParser.INFINITY = 221;
ToscaParser.VERSION = 222;
ToscaParser.UNBOUNDED = 223;
ToscaParser.NULL = 224;
ToscaParser.NAN = 225;
ToscaParser.TIMESTAMP = 226;
ToscaParser.ID = 227;
ToscaParser.UNKNOWN_CHAR = 228;
ToscaParser.INDENT = 229;
ToscaParser.DEDENT = 230;

ToscaParser.RULE_file_input = 0;
ToscaParser.RULE_stmt = 1;
ToscaParser.RULE_service_template = 2;
ToscaParser.RULE_service_template_clause = 3;
ToscaParser.RULE_topology_template = 4;
ToscaParser.RULE_topology_template_clause = 5;
ToscaParser.RULE_substitution_mapping = 6;
ToscaParser.RULE_substitution_mapping_node_type = 7;
ToscaParser.RULE_substitution_mapping_clause = 8;
ToscaParser.RULE_properties_mapping = 9;
ToscaParser.RULE_property_mapping = 10;
ToscaParser.RULE_property_mapping_clause = 11;
ToscaParser.RULE_attributes_mapping = 12;
ToscaParser.RULE_attribute_mapping = 13;
ToscaParser.RULE_attribute_mapping_clause = 14;
ToscaParser.RULE_capabilities_mapping = 15;
ToscaParser.RULE_capability_mapping = 16;
ToscaParser.RULE_capability_mapping_clause = 17;
ToscaParser.RULE_requirements_mapping = 18;
ToscaParser.RULE_requirement_mapping = 19;
ToscaParser.RULE_requirement_mapping_clause = 20;
ToscaParser.RULE_interfaces_mapping = 21;
ToscaParser.RULE_interface_mapping = 22;
ToscaParser.RULE_node_templates = 23;
ToscaParser.RULE_node_template = 24;
ToscaParser.RULE_node_template_clause = 25;
ToscaParser.RULE_relationship_templates = 26;
ToscaParser.RULE_relationship_template = 27;
ToscaParser.RULE_relationship_template_clause = 28;
ToscaParser.RULE_tosca_definition_version = 29;
ToscaParser.RULE_metadata = 30;
ToscaParser.RULE_metadata_clause = 31;
ToscaParser.RULE_repositories = 32;
ToscaParser.RULE_repository = 33;
ToscaParser.RULE_repository_short = 34;
ToscaParser.RULE_repository_detail = 35;
ToscaParser.RULE_repository_clause = 36;
ToscaParser.RULE_repository_url = 37;
ToscaParser.RULE_repository_cred = 38;
ToscaParser.RULE_cred_ele = 39;
ToscaParser.RULE_file_imports = 40;
ToscaParser.RULE_file_import = 41;
ToscaParser.RULE_artifact_defs = 42;
ToscaParser.RULE_artifact_def = 43;
ToscaParser.RULE_artifact_def_clause = 44;
ToscaParser.RULE_node_requirement_assignments = 45;
ToscaParser.RULE_node_requirement_assignment = 46;
ToscaParser.RULE_node_requirement_assignment_clause = 47;
ToscaParser.RULE_properties = 48;
ToscaParser.RULE_property = 49;
ToscaParser.RULE_property_clause = 50;
ToscaParser.RULE_property_assignments = 51;
ToscaParser.RULE_property_assignment = 52;
ToscaParser.RULE_property_assignment_clause = 53;
ToscaParser.RULE_attributes = 54;
ToscaParser.RULE_attribute = 55;
ToscaParser.RULE_attribute_clause = 56;
ToscaParser.RULE_attribute_assignments = 57;
ToscaParser.RULE_attribute_assignment = 58;
ToscaParser.RULE_capability_assignments = 59;
ToscaParser.RULE_capability_assignment = 60;
ToscaParser.RULE_capability_assignment_clause = 61;
ToscaParser.RULE_attribute_assignment_clause = 62;
ToscaParser.RULE_inputs = 63;
ToscaParser.RULE_input_assignments = 64;
ToscaParser.RULE_input_parameters = 65;
ToscaParser.RULE_input_parameter = 66;
ToscaParser.RULE_input_parameter_clause = 67;
ToscaParser.RULE_output_parameters = 68;
ToscaParser.RULE_output_parameter = 69;
ToscaParser.RULE_output_parameter_clause = 70;
ToscaParser.RULE_constraints = 71;
ToscaParser.RULE_constraint_clause = 72;
ToscaParser.RULE_entry_decl = 73;
ToscaParser.RULE_entry_detailed = 74;
ToscaParser.RULE_entry_clause = 75;
ToscaParser.RULE_file_import_clause = 76;
ToscaParser.RULE_entity_metadata = 77;
ToscaParser.RULE_entity_metadata_clause = 78;
ToscaParser.RULE_entity_clause = 79;
ToscaParser.RULE_node_types = 80;
ToscaParser.RULE_node_type = 81;
ToscaParser.RULE_node_type_clause = 82;
ToscaParser.RULE_relationship_types = 83;
ToscaParser.RULE_relationship_type = 84;
ToscaParser.RULE_relationship_type_clause = 85;
ToscaParser.RULE_artifact_types = 86;
ToscaParser.RULE_artifact_type = 87;
ToscaParser.RULE_artifact_type_clause = 88;
ToscaParser.RULE_data_types = 89;
ToscaParser.RULE_data_type = 90;
ToscaParser.RULE_data_type_clause = 91;
ToscaParser.RULE_capability_types = 92;
ToscaParser.RULE_capability_type = 93;
ToscaParser.RULE_capability_type_clause = 94;
ToscaParser.RULE_capability_defs = 95;
ToscaParser.RULE_capability_def = 96;
ToscaParser.RULE_capability_def_clause = 97;
ToscaParser.RULE_requirement_defs = 98;
ToscaParser.RULE_requirement_def = 99;
ToscaParser.RULE_requirement_def_clause = 100;
ToscaParser.RULE_requirement_def_relation_clause = 101;
ToscaParser.RULE_interface_types = 102;
ToscaParser.RULE_interface_type = 103;
ToscaParser.RULE_interface_type_clause = 104;
ToscaParser.RULE_interface_defs = 105;
ToscaParser.RULE_interface_def = 106;
ToscaParser.RULE_interface_def_clause = 107;
ToscaParser.RULE_interface_defs_template = 108;
ToscaParser.RULE_interface_def_template = 109;
ToscaParser.RULE_interface_def_template_clause = 110;
ToscaParser.RULE_operation_def = 111;
ToscaParser.RULE_operation_def_clause = 112;
ToscaParser.RULE_implementation_clause = 113;
ToscaParser.RULE_group_types = 114;
ToscaParser.RULE_group_type = 115;
ToscaParser.RULE_group_type_clause = 116;
ToscaParser.RULE_group_defs = 117;
ToscaParser.RULE_group_def = 118;
ToscaParser.RULE_group_def_clause = 119;
ToscaParser.RULE_policy_types = 120;
ToscaParser.RULE_policy_type = 121;
ToscaParser.RULE_policy_type_clause = 122;
ToscaParser.RULE_policy_defs = 123;
ToscaParser.RULE_policy_def = 124;
ToscaParser.RULE_policy_def_clause = 125;
ToscaParser.RULE_trigger_defs = 126;
ToscaParser.RULE_trigger_def = 127;
ToscaParser.RULE_trigger_def_clause = 128;
ToscaParser.RULE_target_filter_clause = 129;
ToscaParser.RULE_node_filter = 130;
ToscaParser.RULE_node_filter_clause = 131;
ToscaParser.RULE_properties_filter = 132;
ToscaParser.RULE_property_filter = 133;
ToscaParser.RULE_capabilities_filter = 134;
ToscaParser.RULE_capability_filter = 135;
ToscaParser.RULE_declarative_node_workflows = 136;
ToscaParser.RULE_declarative_node_workflow = 137;
ToscaParser.RULE_declarative_node_workflow_clause = 138;
ToscaParser.RULE_declarative_rel_workflows = 139;
ToscaParser.RULE_declarative_rel_workflow = 140;
ToscaParser.RULE_declarative_rel_workflow_clause = 141;
ToscaParser.RULE_workflow_source_weavings = 142;
ToscaParser.RULE_workflow_target_weavings = 143;
ToscaParser.RULE_workflow_source_weaving = 144;
ToscaParser.RULE_workflow_source_weaving_clause = 145;
ToscaParser.RULE_workflow_target_weaving = 146;
ToscaParser.RULE_workflow_target_weaving_clause = 147;
ToscaParser.RULE_workflow_preconditions = 148;
ToscaParser.RULE_workflow_precondition = 149;
ToscaParser.RULE_workflow_precondition_clause = 150;
ToscaParser.RULE_workflow_condition_clauses = 151;
ToscaParser.RULE_workflow_filter_clauses = 152;
ToscaParser.RULE_workflow_condition_clause = 153;
ToscaParser.RULE_workflow_condition_or_clause = 154;
ToscaParser.RULE_workflow_condition_and_clause = 155;
ToscaParser.RULE_workflow_condition_assert_clause = 156;
ToscaParser.RULE_workflow_assertion = 157;
ToscaParser.RULE_workflow_steps = 158;
ToscaParser.RULE_workflow_step = 159;
ToscaParser.RULE_workflow_step_clause = 160;
ToscaParser.RULE_workflow_activities = 161;
ToscaParser.RULE_workflow_activity = 162;
ToscaParser.RULE_imperative_workflows = 163;
ToscaParser.RULE_imperative_workflow = 164;
ToscaParser.RULE_imperative_workflow_clause = 165;
ToscaParser.RULE_value_expr = 166;
ToscaParser.RULE_func_expr = 167;
ToscaParser.RULE_func_arg = 168;
ToscaParser.RULE_func_concat = 169;
ToscaParser.RULE_func_join = 170;
ToscaParser.RULE_func_token = 171;
ToscaParser.RULE_func_get_input = 172;
ToscaParser.RULE_func_get_property = 173;
ToscaParser.RULE_func_get_attribute = 174;
ToscaParser.RULE_func_get_operation_output = 175;
ToscaParser.RULE_func_get_nodes_of_types = 176;
ToscaParser.RULE_func_get_artifact = 177;
ToscaParser.RULE_value = 178;
ToscaParser.RULE_descr = 179;
ToscaParser.RULE_list = 180;
ToscaParser.RULE_map = 181;
ToscaParser.RULE_value_assoc = 182;
ToscaParser.RULE_range = 183;
ToscaParser.RULE_short_str = 184;
ToscaParser.RULE_str = 185;
ToscaParser.RULE_sub_mlstring = 186;
ToscaParser.RULE_number = 187;
ToscaParser.RULE_bool = 188;
ToscaParser.RULE_integer = 189;
ToscaParser.RULE_size = 190;
ToscaParser.RULE_time = 191;
ToscaParser.RULE_freq = 192;
ToscaParser.RULE_workflow_state = 193;
ToscaParser.RULE_alltoken = 194;

function File_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_file_input;
    return this;
}

File_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_inputContext.prototype.constructor = File_inputContext;

File_inputContext.prototype.EOF = function() {
    return this.getToken(ToscaParser.EOF, 0);
};

File_inputContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


File_inputContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

File_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFile_input(this);
	}
};

File_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFile_input(this);
	}
};




ToscaParser.File_inputContext = File_inputContext;

ToscaParser.prototype.file_input = function() {

    var localctx = new File_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ToscaParser.RULE_file_input);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (ToscaParser.TOSCA_DEFINITION_VERSION - 79)) | (1 << (ToscaParser.METADATA - 79)) | (1 << (ToscaParser.REPOSITORIES - 79)))) !== 0) || _la===ToscaParser.CONSTRAINTS || _la===ToscaParser.SOURCE_WEAVING || _la===ToscaParser.NEWLINE) {
            this.state = 392;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ToscaParser.NEWLINE:
                this.state = 390;
                this.match(ToscaParser.NEWLINE);
                break;
            case ToscaParser.TOSCA_DEFINITION_VERSION:
            case ToscaParser.METADATA:
            case ToscaParser.REPOSITORIES:
            case ToscaParser.CONSTRAINTS:
            case ToscaParser.SOURCE_WEAVING:
                this.state = 391;
                this.stmt();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 396;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 397;
        this.match(ToscaParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.workflow_source_weavings = function() {
    return this.getTypedRuleContext(Workflow_source_weavingsContext,0);
};

StmtContext.prototype.tosca_definition_version = function() {
    return this.getTypedRuleContext(Tosca_definition_versionContext,0);
};

StmtContext.prototype.metadata = function() {
    return this.getTypedRuleContext(MetadataContext,0);
};

StmtContext.prototype.repositories = function() {
    return this.getTypedRuleContext(RepositoriesContext,0);
};

StmtContext.prototype.constraints = function() {
    return this.getTypedRuleContext(ConstraintsContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitStmt(this);
	}
};




ToscaParser.StmtContext = StmtContext;

ToscaParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ToscaParser.RULE_stmt);
    try {
        this.state = 404;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.SOURCE_WEAVING:
            this.enterOuterAlt(localctx, 1);
            this.state = 399;
            this.workflow_source_weavings();
            break;
        case ToscaParser.TOSCA_DEFINITION_VERSION:
            this.enterOuterAlt(localctx, 2);
            this.state = 400;
            this.tosca_definition_version();
            break;
        case ToscaParser.METADATA:
            this.enterOuterAlt(localctx, 3);
            this.state = 401;
            this.metadata();
            break;
        case ToscaParser.REPOSITORIES:
            this.enterOuterAlt(localctx, 4);
            this.state = 402;
            this.repositories();
            break;
        case ToscaParser.CONSTRAINTS:
            this.enterOuterAlt(localctx, 5);
            this.state = 403;
            this.constraints();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Service_templateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_service_template;
    this._service_template_clause = null; // Service_template_clauseContext
    return this;
}

Service_templateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Service_templateContext.prototype.constructor = Service_templateContext;

Service_templateContext.prototype.service_template_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Service_template_clauseContext);
    } else {
        return this.getTypedRuleContext(Service_template_clauseContext,i);
    }
};

Service_templateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterService_template(this);
	}
};

Service_templateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitService_template(this);
	}
};




ToscaParser.Service_templateContext = Service_templateContext;

ToscaParser.prototype.service_template = function() {

    var localctx = new Service_templateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ToscaParser.RULE_service_template);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         let u = new UnorderedClauses(this); u.label = 'service template'; 
              u.mandatory = [ 'tosca_definition_version' ] 
        this.state = 410; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 407;
            localctx._service_template_clause = this.service_template_clause();
            u.add(localctx._service_template_clause)
            this.state = 412; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (ToscaParser.TOSCA_DEFINITION_VERSION - 79)) | (1 << (ToscaParser.METADATA - 79)) | (1 << (ToscaParser.ARTIFACT_TYPES - 79)) | (1 << (ToscaParser.DATA_TYPES - 79)) | (1 << (ToscaParser.REPOSITORIES - 79)) | (1 << (ToscaParser.DESCRIPTION - 79)) | (1 << (ToscaParser.IMPORTS - 79)) | (1 << (ToscaParser.CAPABILITY_TYPES - 79)) | (1 << (ToscaParser.NODE_TYPES - 79)) | (1 << (ToscaParser.INTERFACE_TYPES - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (ToscaParser.RELATIONSHIP_TYPES - 111)) | (1 << (ToscaParser.GROUP_TYPES - 111)) | (1 << (ToscaParser.POLICY_TYPES - 111)) | (1 << (ToscaParser.TOPOLOGY_TYPES - 111)))) !== 0));
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Service_template_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_service_template_clause;
    return this;
}

Service_template_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Service_template_clauseContext.prototype.constructor = Service_template_clauseContext;

Service_template_clauseContext.prototype.tosca_definition_version = function() {
    return this.getTypedRuleContext(Tosca_definition_versionContext,0);
};

Service_template_clauseContext.prototype.metadata = function() {
    return this.getTypedRuleContext(MetadataContext,0);
};

Service_template_clauseContext.prototype.repositories = function() {
    return this.getTypedRuleContext(RepositoriesContext,0);
};

Service_template_clauseContext.prototype.file_imports = function() {
    return this.getTypedRuleContext(File_importsContext,0);
};

Service_template_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Service_template_clauseContext.prototype.artifact_types = function() {
    return this.getTypedRuleContext(Artifact_typesContext,0);
};

Service_template_clauseContext.prototype.data_types = function() {
    return this.getTypedRuleContext(Data_typesContext,0);
};

Service_template_clauseContext.prototype.capability_types = function() {
    return this.getTypedRuleContext(Capability_typesContext,0);
};

Service_template_clauseContext.prototype.interface_types = function() {
    return this.getTypedRuleContext(Interface_typesContext,0);
};

Service_template_clauseContext.prototype.relationship_types = function() {
    return this.getTypedRuleContext(Relationship_typesContext,0);
};

Service_template_clauseContext.prototype.node_types = function() {
    return this.getTypedRuleContext(Node_typesContext,0);
};

Service_template_clauseContext.prototype.group_types = function() {
    return this.getTypedRuleContext(Group_typesContext,0);
};

Service_template_clauseContext.prototype.policy_types = function() {
    return this.getTypedRuleContext(Policy_typesContext,0);
};

Service_template_clauseContext.prototype.topology_template = function() {
    return this.getTypedRuleContext(Topology_templateContext,0);
};

Service_template_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterService_template_clause(this);
	}
};

Service_template_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitService_template_clause(this);
	}
};




ToscaParser.Service_template_clauseContext = Service_template_clauseContext;

ToscaParser.prototype.service_template_clause = function() {

    var localctx = new Service_template_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ToscaParser.RULE_service_template_clause);
    try {
        this.state = 430;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TOSCA_DEFINITION_VERSION:
            this.enterOuterAlt(localctx, 1);
            this.state = 416;
            this.tosca_definition_version();
            break;
        case ToscaParser.METADATA:
            this.enterOuterAlt(localctx, 2);
            this.state = 417;
            this.metadata();
            break;
        case ToscaParser.REPOSITORIES:
            this.enterOuterAlt(localctx, 3);
            this.state = 418;
            this.repositories();
            break;
        case ToscaParser.IMPORTS:
            this.enterOuterAlt(localctx, 4);
            this.state = 419;
            this.file_imports();
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 5);
            this.state = 420;
            this.descr();
            break;
        case ToscaParser.ARTIFACT_TYPES:
            this.enterOuterAlt(localctx, 6);
            this.state = 421;
            this.artifact_types();
            break;
        case ToscaParser.DATA_TYPES:
            this.enterOuterAlt(localctx, 7);
            this.state = 422;
            this.data_types();
            break;
        case ToscaParser.CAPABILITY_TYPES:
            this.enterOuterAlt(localctx, 8);
            this.state = 423;
            this.capability_types();
            break;
        case ToscaParser.INTERFACE_TYPES:
            this.enterOuterAlt(localctx, 9);
            this.state = 424;
            this.interface_types();
            break;
        case ToscaParser.RELATIONSHIP_TYPES:
            this.enterOuterAlt(localctx, 10);
            this.state = 425;
            this.relationship_types();
            break;
        case ToscaParser.NODE_TYPES:
            this.enterOuterAlt(localctx, 11);
            this.state = 426;
            this.node_types();
            break;
        case ToscaParser.GROUP_TYPES:
            this.enterOuterAlt(localctx, 12);
            this.state = 427;
            this.group_types();
            break;
        case ToscaParser.POLICY_TYPES:
            this.enterOuterAlt(localctx, 13);
            this.state = 428;
            this.policy_types();
            break;
        case ToscaParser.TOPOLOGY_TYPES:
            this.enterOuterAlt(localctx, 14);
            this.state = 429;
            this.topology_template();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Topology_templateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_topology_template;
    this._topology_template_clause = null; // Topology_template_clauseContext
    return this;
}

Topology_templateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Topology_templateContext.prototype.constructor = Topology_templateContext;

Topology_templateContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Topology_templateContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Topology_templateContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Topology_templateContext.prototype.topology_template_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Topology_template_clauseContext);
    } else {
        return this.getTypedRuleContext(Topology_template_clauseContext,i);
    }
};

Topology_templateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterTopology_template(this);
	}
};

Topology_templateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitTopology_template(this);
	}
};




ToscaParser.Topology_templateContext = Topology_templateContext;

ToscaParser.prototype.topology_template = function() {

    var localctx = new Topology_templateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ToscaParser.RULE_topology_template);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        this.match(ToscaParser.TOPOLOGY_TYPES);
        this.state = 433;
        this.match(ToscaParser.COLON);
        this.state = 434;
        this.match(ToscaParser.NEWLINE);
        this.state = 435;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = 'topology_template'; 
        this.state = 440; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 437;
            localctx._topology_template_clause = this.topology_template_clause();
            u.add(localctx._topology_template_clause)
            this.state = 442; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ToscaParser.T__0) | (1 << ToscaParser.T__3) | (1 << ToscaParser.T__7))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ToscaParser.DESCRIPTION - 97)) | (1 << (ToscaParser.GROUPS - 97)) | (1 << (ToscaParser.RELATIONSHIP_TEMPLATES - 97)))) !== 0) || _la===ToscaParser.INPUTS || _la===ToscaParser.WORKFLOWS);
        this.state = 444;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Topology_template_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_topology_template_clause;
    return this;
}

Topology_template_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Topology_template_clauseContext.prototype.constructor = Topology_template_clauseContext;

Topology_template_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Topology_template_clauseContext.prototype.input_parameters = function() {
    return this.getTypedRuleContext(Input_parametersContext,0);
};

Topology_template_clauseContext.prototype.output_parameters = function() {
    return this.getTypedRuleContext(Output_parametersContext,0);
};

Topology_template_clauseContext.prototype.node_templates = function() {
    return this.getTypedRuleContext(Node_templatesContext,0);
};

Topology_template_clauseContext.prototype.relationship_templates = function() {
    return this.getTypedRuleContext(Relationship_templatesContext,0);
};

Topology_template_clauseContext.prototype.group_defs = function() {
    return this.getTypedRuleContext(Group_defsContext,0);
};

Topology_template_clauseContext.prototype.policy_defs = function() {
    return this.getTypedRuleContext(Policy_defsContext,0);
};

Topology_template_clauseContext.prototype.substitution_mapping = function() {
    return this.getTypedRuleContext(Substitution_mappingContext,0);
};

Topology_template_clauseContext.prototype.imperative_workflows = function() {
    return this.getTypedRuleContext(Imperative_workflowsContext,0);
};

Topology_template_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterTopology_template_clause(this);
	}
};

Topology_template_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitTopology_template_clause(this);
	}
};




ToscaParser.Topology_template_clauseContext = Topology_template_clauseContext;

ToscaParser.prototype.topology_template_clause = function() {

    var localctx = new Topology_template_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ToscaParser.RULE_topology_template_clause);
    try {
        this.state = 456;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 447;
            this.descr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 448;
            this.input_parameters();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 449;
            this.output_parameters();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 450;
            this.node_templates();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 451;
            this.relationship_templates();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 452;
            this.group_defs();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 453;
            this.policy_defs();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 454;
            this.substitution_mapping();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 455;
            this.imperative_workflows();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Substitution_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_substitution_mapping;
    return this;
}

Substitution_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Substitution_mappingContext.prototype.constructor = Substitution_mappingContext;

Substitution_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Substitution_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Substitution_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Substitution_mappingContext.prototype.substitution_mapping_node_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Substitution_mapping_node_typeContext);
    } else {
        return this.getTypedRuleContext(Substitution_mapping_node_typeContext,i);
    }
};

Substitution_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterSubstitution_mapping(this);
	}
};

Substitution_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitSubstitution_mapping(this);
	}
};




ToscaParser.Substitution_mappingContext = Substitution_mappingContext;

ToscaParser.prototype.substitution_mapping = function() {

    var localctx = new Substitution_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ToscaParser.RULE_substitution_mapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 458;
        this.match(ToscaParser.T__0);
        this.state = 459;
        this.match(ToscaParser.COLON);
        this.state = 460;
        this.match(ToscaParser.NEWLINE);
        this.state = 461;
        this.match(ToscaParser.INDENT);
        this.state = 463; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 462;
            this.substitution_mapping_node_type();
            this.state = 465; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__1);
        this.state = 467;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Substitution_mapping_node_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_substitution_mapping_node_type;
    this._substitution_mapping_clause = null; // Substitution_mapping_clauseContext
    return this;
}

Substitution_mapping_node_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Substitution_mapping_node_typeContext.prototype.constructor = Substitution_mapping_node_typeContext;

Substitution_mapping_node_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Substitution_mapping_node_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Substitution_mapping_node_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Substitution_mapping_node_typeContext.prototype.substitution_mapping_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Substitution_mapping_clauseContext);
    } else {
        return this.getTypedRuleContext(Substitution_mapping_clauseContext,i);
    }
};

Substitution_mapping_node_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterSubstitution_mapping_node_type(this);
	}
};

Substitution_mapping_node_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitSubstitution_mapping_node_type(this);
	}
};




ToscaParser.Substitution_mapping_node_typeContext = Substitution_mapping_node_typeContext;

ToscaParser.prototype.substitution_mapping_node_type = function() {

    var localctx = new Substitution_mapping_node_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ToscaParser.RULE_substitution_mapping_node_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        this.match(ToscaParser.T__1);
        this.state = 470;
        this.match(ToscaParser.COLON);
        this.state = 471;
        this.match(ToscaParser.NEWLINE);
        this.state = 472;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = 'node_type substitution'; 
        this.state = 477; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 474;
            localctx._substitution_mapping_clause = this.substitution_mapping_clause();
            u.add(localctx._substitution_mapping_clause)
            this.state = 479; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.PROPERTIES || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (ToscaParser.ATTRIBUTES - 132)) | (1 << (ToscaParser.INTERFACES - 132)) | (1 << (ToscaParser.CAPABILITIES - 132)) | (1 << (ToscaParser.REQUIREMENTS - 132)))) !== 0));
        this.state = 481;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Substitution_mapping_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_substitution_mapping_clause;
    return this;
}

Substitution_mapping_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Substitution_mapping_clauseContext.prototype.constructor = Substitution_mapping_clauseContext;

Substitution_mapping_clauseContext.prototype.properties_mapping = function() {
    return this.getTypedRuleContext(Properties_mappingContext,0);
};

Substitution_mapping_clauseContext.prototype.capabilities_mapping = function() {
    return this.getTypedRuleContext(Capabilities_mappingContext,0);
};

Substitution_mapping_clauseContext.prototype.requirements_mapping = function() {
    return this.getTypedRuleContext(Requirements_mappingContext,0);
};

Substitution_mapping_clauseContext.prototype.attributes_mapping = function() {
    return this.getTypedRuleContext(Attributes_mappingContext,0);
};

Substitution_mapping_clauseContext.prototype.interfaces_mapping = function() {
    return this.getTypedRuleContext(Interfaces_mappingContext,0);
};

Substitution_mapping_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterSubstitution_mapping_clause(this);
	}
};

Substitution_mapping_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitSubstitution_mapping_clause(this);
	}
};




ToscaParser.Substitution_mapping_clauseContext = Substitution_mapping_clauseContext;

ToscaParser.prototype.substitution_mapping_clause = function() {

    var localctx = new Substitution_mapping_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ToscaParser.RULE_substitution_mapping_clause);
    try {
        this.state = 489;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 1);
            this.state = 484;
            this.properties_mapping();
            break;
        case ToscaParser.CAPABILITIES:
            this.enterOuterAlt(localctx, 2);
            this.state = 485;
            this.capabilities_mapping();
            break;
        case ToscaParser.REQUIREMENTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 486;
            this.requirements_mapping();
            break;
        case ToscaParser.ATTRIBUTES:
            this.enterOuterAlt(localctx, 4);
            this.state = 487;
            this.attributes_mapping();
            break;
        case ToscaParser.INTERFACES:
            this.enterOuterAlt(localctx, 5);
            this.state = 488;
            this.interfaces_mapping();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Properties_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_properties_mapping;
    return this;
}

Properties_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Properties_mappingContext.prototype.constructor = Properties_mappingContext;

Properties_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Properties_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Properties_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Properties_mappingContext.prototype.property_mapping = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Property_mappingContext);
    } else {
        return this.getTypedRuleContext(Property_mappingContext,i);
    }
};

Properties_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperties_mapping(this);
	}
};

Properties_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperties_mapping(this);
	}
};




ToscaParser.Properties_mappingContext = Properties_mappingContext;

ToscaParser.prototype.properties_mapping = function() {

    var localctx = new Properties_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ToscaParser.RULE_properties_mapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 491;
        this.match(ToscaParser.PROPERTIES);
        this.state = 492;
        this.match(ToscaParser.COLON);
        this.state = 493;
        this.match(ToscaParser.NEWLINE);
        this.state = 494;
        this.match(ToscaParser.INDENT);
        this.state = 496; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 495;
            this.property_mapping();
            this.state = 498; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 500;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_property_mapping;
    return this;
}

Property_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_mappingContext.prototype.constructor = Property_mappingContext;

Property_mappingContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Property_mappingContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Property_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Property_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Property_mappingContext.prototype.property_mapping_clause = function() {
    return this.getTypedRuleContext(Property_mapping_clauseContext,0);
};

Property_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Property_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperty_mapping(this);
	}
};

Property_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperty_mapping(this);
	}
};




ToscaParser.Property_mappingContext = Property_mappingContext;

ToscaParser.prototype.property_mapping = function() {

    var localctx = new Property_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ToscaParser.RULE_property_mapping);
    try {
        this.state = 535;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 502;
            this.match(ToscaParser.ID);
            this.state = 503;
            this.match(ToscaParser.COLON);
            this.state = 504;
            this.value();
            this.state = 505;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 507;
            this.match(ToscaParser.ID);
            this.state = 508;
            this.match(ToscaParser.COLON);
            this.state = 509;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 510;
            this.match(ToscaParser.ID);
            this.state = 511;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 512;
            this.match(ToscaParser.ID);
            this.state = 513;
            this.match(ToscaParser.COLON);
            this.state = 514;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 515;
            this.match(ToscaParser.ID);
            this.state = 516;
            this.match(ToscaParser.COMMA);
            this.state = 517;
            this.match(ToscaParser.ID);
            this.state = 518;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 519;
            this.match(ToscaParser.ID);
            this.state = 520;
            this.match(ToscaParser.COLON);
            this.state = 521;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 522;
            this.match(ToscaParser.ID);
            this.state = 523;
            this.match(ToscaParser.COMMA);
            this.state = 524;
            this.match(ToscaParser.ID);
            this.state = 525;
            this.match(ToscaParser.COMMA);
            this.state = 526;
            this.match(ToscaParser.ID);
            this.state = 527;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 528;
            this.match(ToscaParser.ID);
            this.state = 529;
            this.match(ToscaParser.COLON);
            this.state = 530;
            this.match(ToscaParser.NEWLINE);
            this.state = 531;
            this.match(ToscaParser.INDENT);
            this.state = 532;
            this.property_mapping_clause();
            this.state = 533;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_mapping_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_property_mapping_clause;
    return this;
}

Property_mapping_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_mapping_clauseContext.prototype.constructor = Property_mapping_clauseContext;

Property_mapping_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Property_mapping_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Property_mapping_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Property_mapping_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperty_mapping_clause(this);
	}
};

Property_mapping_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperty_mapping_clause(this);
	}
};




ToscaParser.Property_mapping_clauseContext = Property_mapping_clauseContext;

ToscaParser.prototype.property_mapping_clause = function() {

    var localctx = new Property_mapping_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ToscaParser.RULE_property_mapping_clause);
    try {
        this.state = 564;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 537;
            this.match(ToscaParser.T__2);
            this.state = 538;
            this.match(ToscaParser.COLON);
            this.state = 539;
            this.match(ToscaParser.ID);
            this.state = 540;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 541;
            this.match(ToscaParser.T__2);
            this.state = 542;
            this.match(ToscaParser.COLON);
            this.state = 543;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 544;
            this.match(ToscaParser.ID);
            this.state = 545;
            this.match(ToscaParser.COMMA);
            this.state = 546;
            this.match(ToscaParser.ID);
            this.state = 547;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 548;
            this.match(ToscaParser.NEWLINE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 549;
            this.match(ToscaParser.T__2);
            this.state = 550;
            this.match(ToscaParser.COLON);
            this.state = 551;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 552;
            this.match(ToscaParser.ID);
            this.state = 553;
            this.match(ToscaParser.COMMA);
            this.state = 554;
            this.match(ToscaParser.ID);
            this.state = 555;
            this.match(ToscaParser.COMMA);
            this.state = 556;
            this.match(ToscaParser.ID);
            this.state = 557;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 558;
            this.match(ToscaParser.NEWLINE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 559;
            this.match(ToscaParser.VALUE);
            this.state = 560;
            this.match(ToscaParser.COLON);
            this.state = 561;
            this.value();
            this.state = 562;
            this.match(ToscaParser.NEWLINE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attributes_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attributes_mapping;
    return this;
}

Attributes_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attributes_mappingContext.prototype.constructor = Attributes_mappingContext;

Attributes_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Attributes_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Attributes_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Attributes_mappingContext.prototype.attribute_mapping = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_mappingContext);
    } else {
        return this.getTypedRuleContext(Attribute_mappingContext,i);
    }
};

Attributes_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttributes_mapping(this);
	}
};

Attributes_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttributes_mapping(this);
	}
};




ToscaParser.Attributes_mappingContext = Attributes_mappingContext;

ToscaParser.prototype.attributes_mapping = function() {

    var localctx = new Attributes_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ToscaParser.RULE_attributes_mapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this.match(ToscaParser.ATTRIBUTES);
        this.state = 567;
        this.match(ToscaParser.COLON);
        this.state = 568;
        this.match(ToscaParser.NEWLINE);
        this.state = 569;
        this.match(ToscaParser.INDENT);
        this.state = 571; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 570;
            this.attribute_mapping();
            this.state = 573; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 575;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attribute_mapping;
    return this;
}

Attribute_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_mappingContext.prototype.constructor = Attribute_mappingContext;

Attribute_mappingContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Attribute_mappingContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Attribute_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Attribute_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Attribute_mappingContext.prototype.attribute_mapping_clause = function() {
    return this.getTypedRuleContext(Attribute_mapping_clauseContext,0);
};

Attribute_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Attribute_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttribute_mapping(this);
	}
};

Attribute_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttribute_mapping(this);
	}
};




ToscaParser.Attribute_mappingContext = Attribute_mappingContext;

ToscaParser.prototype.attribute_mapping = function() {

    var localctx = new Attribute_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ToscaParser.RULE_attribute_mapping);
    try {
        this.state = 610;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 577;
            this.match(ToscaParser.ID);
            this.state = 578;
            this.match(ToscaParser.COLON);
            this.state = 579;
            this.value();
            this.state = 580;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 582;
            this.match(ToscaParser.ID);
            this.state = 583;
            this.match(ToscaParser.COLON);
            this.state = 584;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 585;
            this.match(ToscaParser.ID);
            this.state = 586;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 587;
            this.match(ToscaParser.ID);
            this.state = 588;
            this.match(ToscaParser.COLON);
            this.state = 589;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 590;
            this.match(ToscaParser.ID);
            this.state = 591;
            this.match(ToscaParser.COMMA);
            this.state = 592;
            this.match(ToscaParser.ID);
            this.state = 593;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 594;
            this.match(ToscaParser.ID);
            this.state = 595;
            this.match(ToscaParser.COLON);
            this.state = 596;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 597;
            this.match(ToscaParser.ID);
            this.state = 598;
            this.match(ToscaParser.COMMA);
            this.state = 599;
            this.match(ToscaParser.ID);
            this.state = 600;
            this.match(ToscaParser.COMMA);
            this.state = 601;
            this.match(ToscaParser.ID);
            this.state = 602;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 603;
            this.match(ToscaParser.ID);
            this.state = 604;
            this.match(ToscaParser.COLON);
            this.state = 605;
            this.match(ToscaParser.NEWLINE);
            this.state = 606;
            this.match(ToscaParser.INDENT);
            this.state = 607;
            this.attribute_mapping_clause();
            this.state = 608;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_mapping_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attribute_mapping_clause;
    return this;
}

Attribute_mapping_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_mapping_clauseContext.prototype.constructor = Attribute_mapping_clauseContext;

Attribute_mapping_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Attribute_mapping_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Attribute_mapping_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Attribute_mapping_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttribute_mapping_clause(this);
	}
};

Attribute_mapping_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttribute_mapping_clause(this);
	}
};




ToscaParser.Attribute_mapping_clauseContext = Attribute_mapping_clauseContext;

ToscaParser.prototype.attribute_mapping_clause = function() {

    var localctx = new Attribute_mapping_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ToscaParser.RULE_attribute_mapping_clause);
    try {
        this.state = 639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 612;
            this.match(ToscaParser.T__2);
            this.state = 613;
            this.match(ToscaParser.COLON);
            this.state = 614;
            this.match(ToscaParser.ID);
            this.state = 615;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 616;
            this.match(ToscaParser.T__2);
            this.state = 617;
            this.match(ToscaParser.COLON);
            this.state = 618;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 619;
            this.match(ToscaParser.ID);
            this.state = 620;
            this.match(ToscaParser.COMMA);
            this.state = 621;
            this.match(ToscaParser.ID);
            this.state = 622;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 623;
            this.match(ToscaParser.NEWLINE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 624;
            this.match(ToscaParser.T__2);
            this.state = 625;
            this.match(ToscaParser.COLON);
            this.state = 626;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 627;
            this.match(ToscaParser.ID);
            this.state = 628;
            this.match(ToscaParser.COMMA);
            this.state = 629;
            this.match(ToscaParser.ID);
            this.state = 630;
            this.match(ToscaParser.COMMA);
            this.state = 631;
            this.match(ToscaParser.ID);
            this.state = 632;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 633;
            this.match(ToscaParser.NEWLINE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 634;
            this.match(ToscaParser.VALUE);
            this.state = 635;
            this.match(ToscaParser.COLON);
            this.state = 636;
            this.value();
            this.state = 637;
            this.match(ToscaParser.NEWLINE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capabilities_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capabilities_mapping;
    return this;
}

Capabilities_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capabilities_mappingContext.prototype.constructor = Capabilities_mappingContext;

Capabilities_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capabilities_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capabilities_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capabilities_mappingContext.prototype.capability_mapping = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_mappingContext);
    } else {
        return this.getTypedRuleContext(Capability_mappingContext,i);
    }
};

Capabilities_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapabilities_mapping(this);
	}
};

Capabilities_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapabilities_mapping(this);
	}
};




ToscaParser.Capabilities_mappingContext = Capabilities_mappingContext;

ToscaParser.prototype.capabilities_mapping = function() {

    var localctx = new Capabilities_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ToscaParser.RULE_capabilities_mapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.match(ToscaParser.CAPABILITIES);
        this.state = 642;
        this.match(ToscaParser.COLON);
        this.state = 643;
        this.match(ToscaParser.NEWLINE);
        this.state = 644;
        this.match(ToscaParser.INDENT);
        this.state = 646; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 645;
            this.capability_mapping();
            this.state = 648; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 650;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_mapping;
    return this;
}

Capability_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_mappingContext.prototype.constructor = Capability_mappingContext;

Capability_mappingContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Capability_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capability_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capability_mappingContext.prototype.capability_mapping_clause = function() {
    return this.getTypedRuleContext(Capability_mapping_clauseContext,0);
};

Capability_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capability_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_mapping(this);
	}
};

Capability_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_mapping(this);
	}
};




ToscaParser.Capability_mappingContext = Capability_mappingContext;

ToscaParser.prototype.capability_mapping = function() {

    var localctx = new Capability_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ToscaParser.RULE_capability_mapping);
    try {
        this.state = 666;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 652;
            this.match(ToscaParser.ID);
            this.state = 653;
            this.match(ToscaParser.COLON);
            this.state = 654;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 655;
            this.match(ToscaParser.ID);
            this.state = 656;
            this.match(ToscaParser.COMMA);
            this.state = 657;
            this.match(ToscaParser.ID);
            this.state = 658;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 659;
            this.match(ToscaParser.ID);
            this.state = 660;
            this.match(ToscaParser.COLON);
            this.state = 661;
            this.match(ToscaParser.NEWLINE);
            this.state = 662;
            this.match(ToscaParser.INDENT);
            this.state = 663;
            this.capability_mapping_clause();
            this.state = 664;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_mapping_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_mapping_clause;
    return this;
}

Capability_mapping_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_mapping_clauseContext.prototype.constructor = Capability_mapping_clauseContext;

Capability_mapping_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Capability_mapping_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capability_mapping_clauseContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capability_mapping_clauseContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capability_mapping_clauseContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

Capability_mapping_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_mapping_clause(this);
	}
};

Capability_mapping_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_mapping_clause(this);
	}
};




ToscaParser.Capability_mapping_clauseContext = Capability_mapping_clauseContext;

ToscaParser.prototype.capability_mapping_clause = function() {

    var localctx = new Capability_mapping_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ToscaParser.RULE_capability_mapping_clause);
    var _la = 0; // Token type
    try {
        this.state = 700;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.T__2:
            this.enterOuterAlt(localctx, 1);
            this.state = 668;
            this.match(ToscaParser.T__2);
            this.state = 669;
            this.match(ToscaParser.COLON);
            this.state = 670;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 671;
            this.match(ToscaParser.ID);
            this.state = 672;
            this.match(ToscaParser.COMMA);
            this.state = 673;
            this.match(ToscaParser.ID);
            this.state = 674;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 675;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 2);
            this.state = 676;
            this.match(ToscaParser.PROPERTIES);
            this.state = 677;
            this.match(ToscaParser.COLON);
            this.state = 678;
            this.match(ToscaParser.INDENT);
            this.state = 682; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 679;
                this.match(ToscaParser.ID);
                this.state = 680;
                this.match(ToscaParser.COLON);
                this.state = 681;
                this.value();
                this.state = 684; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.ID);
            this.state = 686;
            this.match(ToscaParser.DEDENT);
            break;
        case ToscaParser.ATTRIBUTES:
            this.enterOuterAlt(localctx, 3);
            this.state = 688;
            this.match(ToscaParser.ATTRIBUTES);
            this.state = 689;
            this.match(ToscaParser.COLON);
            this.state = 690;
            this.match(ToscaParser.INDENT);
            this.state = 694; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 691;
                this.match(ToscaParser.ID);
                this.state = 692;
                this.match(ToscaParser.COLON);
                this.state = 693;
                this.value();
                this.state = 696; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.ID);
            this.state = 698;
            this.match(ToscaParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Requirements_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_requirements_mapping;
    return this;
}

Requirements_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Requirements_mappingContext.prototype.constructor = Requirements_mappingContext;

Requirements_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Requirements_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Requirements_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Requirements_mappingContext.prototype.capability_mapping = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_mappingContext);
    } else {
        return this.getTypedRuleContext(Capability_mappingContext,i);
    }
};

Requirements_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRequirements_mapping(this);
	}
};

Requirements_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRequirements_mapping(this);
	}
};




ToscaParser.Requirements_mappingContext = Requirements_mappingContext;

ToscaParser.prototype.requirements_mapping = function() {

    var localctx = new Requirements_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ToscaParser.RULE_requirements_mapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this.match(ToscaParser.REQUIREMENTS);
        this.state = 703;
        this.match(ToscaParser.COLON);
        this.state = 704;
        this.match(ToscaParser.NEWLINE);
        this.state = 705;
        this.match(ToscaParser.INDENT);
        this.state = 707; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 706;
            this.capability_mapping();
            this.state = 709; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 711;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Requirement_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_requirement_mapping;
    return this;
}

Requirement_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Requirement_mappingContext.prototype.constructor = Requirement_mappingContext;

Requirement_mappingContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Requirement_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Requirement_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Requirement_mappingContext.prototype.capability_mapping_clause = function() {
    return this.getTypedRuleContext(Capability_mapping_clauseContext,0);
};

Requirement_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Requirement_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRequirement_mapping(this);
	}
};

Requirement_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRequirement_mapping(this);
	}
};




ToscaParser.Requirement_mappingContext = Requirement_mappingContext;

ToscaParser.prototype.requirement_mapping = function() {

    var localctx = new Requirement_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ToscaParser.RULE_requirement_mapping);
    try {
        this.state = 727;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 713;
            this.match(ToscaParser.ID);
            this.state = 714;
            this.match(ToscaParser.COLON);
            this.state = 715;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 716;
            this.match(ToscaParser.ID);
            this.state = 717;
            this.match(ToscaParser.COMMA);
            this.state = 718;
            this.match(ToscaParser.ID);
            this.state = 719;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 720;
            this.match(ToscaParser.ID);
            this.state = 721;
            this.match(ToscaParser.COLON);
            this.state = 722;
            this.match(ToscaParser.NEWLINE);
            this.state = 723;
            this.match(ToscaParser.INDENT);
            this.state = 724;
            this.capability_mapping_clause();
            this.state = 725;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Requirement_mapping_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_requirement_mapping_clause;
    return this;
}

Requirement_mapping_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Requirement_mapping_clauseContext.prototype.constructor = Requirement_mapping_clauseContext;

Requirement_mapping_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Requirement_mapping_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Requirement_mapping_clauseContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Requirement_mapping_clauseContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Requirement_mapping_clauseContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

Requirement_mapping_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRequirement_mapping_clause(this);
	}
};

Requirement_mapping_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRequirement_mapping_clause(this);
	}
};




ToscaParser.Requirement_mapping_clauseContext = Requirement_mapping_clauseContext;

ToscaParser.prototype.requirement_mapping_clause = function() {

    var localctx = new Requirement_mapping_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ToscaParser.RULE_requirement_mapping_clause);
    var _la = 0; // Token type
    try {
        this.state = 761;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.T__2:
            this.enterOuterAlt(localctx, 1);
            this.state = 729;
            this.match(ToscaParser.T__2);
            this.state = 730;
            this.match(ToscaParser.COLON);
            this.state = 731;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 732;
            this.match(ToscaParser.ID);
            this.state = 733;
            this.match(ToscaParser.COMMA);
            this.state = 734;
            this.match(ToscaParser.ID);
            this.state = 735;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 736;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 2);
            this.state = 737;
            this.match(ToscaParser.PROPERTIES);
            this.state = 738;
            this.match(ToscaParser.COLON);
            this.state = 739;
            this.match(ToscaParser.INDENT);
            this.state = 743; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 740;
                this.match(ToscaParser.ID);
                this.state = 741;
                this.match(ToscaParser.COLON);
                this.state = 742;
                this.value();
                this.state = 745; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.ID);
            this.state = 747;
            this.match(ToscaParser.DEDENT);
            break;
        case ToscaParser.ATTRIBUTES:
            this.enterOuterAlt(localctx, 3);
            this.state = 749;
            this.match(ToscaParser.ATTRIBUTES);
            this.state = 750;
            this.match(ToscaParser.COLON);
            this.state = 751;
            this.match(ToscaParser.INDENT);
            this.state = 755; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 752;
                this.match(ToscaParser.ID);
                this.state = 753;
                this.match(ToscaParser.COLON);
                this.state = 754;
                this.value();
                this.state = 757; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.ID);
            this.state = 759;
            this.match(ToscaParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interfaces_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interfaces_mapping;
    return this;
}

Interfaces_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interfaces_mappingContext.prototype.constructor = Interfaces_mappingContext;

Interfaces_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interfaces_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Interfaces_mappingContext.prototype.interface_mapping = function() {
    return this.getTypedRuleContext(Interface_mappingContext,0);
};

Interfaces_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Interfaces_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterfaces_mapping(this);
	}
};

Interfaces_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterfaces_mapping(this);
	}
};




ToscaParser.Interfaces_mappingContext = Interfaces_mappingContext;

ToscaParser.prototype.interfaces_mapping = function() {

    var localctx = new Interfaces_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ToscaParser.RULE_interfaces_mapping);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 763;
        this.match(ToscaParser.INTERFACES);
        this.state = 764;
        this.match(ToscaParser.COLON);
        this.state = 765;
        this.match(ToscaParser.NEWLINE);
        this.state = 766;
        this.match(ToscaParser.INDENT);
        this.state = 767;
        this.interface_mapping();
        this.state = 768;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_mappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_mapping;
    return this;
}

Interface_mappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_mappingContext.prototype.constructor = Interface_mappingContext;

Interface_mappingContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Interface_mappingContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_mappingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Interface_mappingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Interface_mappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_mapping(this);
	}
};

Interface_mappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_mapping(this);
	}
};




ToscaParser.Interface_mappingContext = Interface_mappingContext;

ToscaParser.prototype.interface_mapping = function() {

    var localctx = new Interface_mappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ToscaParser.RULE_interface_mapping);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 770;
        this.match(ToscaParser.ID);
        this.state = 771;
        this.match(ToscaParser.COLON);
        this.state = 772;
        this.match(ToscaParser.NEWLINE);
        this.state = 773;
        this.match(ToscaParser.INDENT);
        this.state = 777; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 774;
            this.match(ToscaParser.ID);
            this.state = 775;
            this.match(ToscaParser.COLON);
            this.state = 776;
            this.match(ToscaParser.ID);
            this.state = 779; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 781;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_templatesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_templates;
    return this;
}

Node_templatesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_templatesContext.prototype.constructor = Node_templatesContext;

Node_templatesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Node_templatesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Node_templatesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Node_templatesContext.prototype.node_template = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Node_templateContext);
    } else {
        return this.getTypedRuleContext(Node_templateContext,i);
    }
};

Node_templatesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_templates(this);
	}
};

Node_templatesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_templates(this);
	}
};




ToscaParser.Node_templatesContext = Node_templatesContext;

ToscaParser.prototype.node_templates = function() {

    var localctx = new Node_templatesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ToscaParser.RULE_node_templates);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 783;
        this.match(ToscaParser.T__3);
        this.state = 784;
        this.match(ToscaParser.COLON);
        this.state = 785;
        this.match(ToscaParser.NEWLINE);
        this.state = 786;
        this.match(ToscaParser.INDENT);
        this.state = 788; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 787;
            this.node_template();
            this.state = 790; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 792;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_templateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_template;
    this._ID = null; // Token
    this._node_template_clause = null; // Node_template_clauseContext
    return this;
}

Node_templateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_templateContext.prototype.constructor = Node_templateContext;

Node_templateContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Node_templateContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Node_templateContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Node_templateContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Node_templateContext.prototype.node_template_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Node_template_clauseContext);
    } else {
        return this.getTypedRuleContext(Node_template_clauseContext,i);
    }
};

Node_templateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_template(this);
	}
};

Node_templateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_template(this);
	}
};




ToscaParser.Node_templateContext = Node_templateContext;

ToscaParser.prototype.node_template = function() {

    var localctx = new Node_templateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ToscaParser.RULE_node_template);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 795;
        this.match(ToscaParser.COLON);
        this.state = 796;
        this.match(ToscaParser.NEWLINE);
        this.state = 797;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this);
               u.mandatory = ['type']; u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 802; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 799;
            localctx._node_template_clause = this.node_template_clause();
            u.add(localctx._node_template_clause)
            this.state = 804; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__4 || _la===ToscaParser.T__19 || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ToscaParser.METADATA - 81)) | (1 << (ToscaParser.PROPERTIES - 81)) | (1 << (ToscaParser.TYPE - 81)) | (1 << (ToscaParser.DESCRIPTION - 81)))) !== 0) || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & ((1 << (ToscaParser.COPY - 114)) | (1 << (ToscaParser.ATTRIBUTES - 114)) | (1 << (ToscaParser.INTERFACES - 114)) | (1 << (ToscaParser.CAPABILITIES - 114)) | (1 << (ToscaParser.REQUIREMENTS - 114)))) !== 0) || _la===ToscaParser.DIRECTIVES);
        this.state = 806;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_template_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_template_clause;
    return this;
}

Node_template_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_template_clauseContext.prototype.constructor = Node_template_clauseContext;

Node_template_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Node_template_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Node_template_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Node_template_clauseContext.prototype.short_str = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Short_strContext);
    } else {
        return this.getTypedRuleContext(Short_strContext,i);
    }
};

Node_template_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Node_template_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Node_template_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Node_template_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Node_template_clauseContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Node_template_clauseContext.prototype.node_requirement_assignments = function() {
    return this.getTypedRuleContext(Node_requirement_assignmentsContext,0);
};

Node_template_clauseContext.prototype.capability_assignments = function() {
    return this.getTypedRuleContext(Capability_assignmentsContext,0);
};

Node_template_clauseContext.prototype.interface_defs_template = function() {
    return this.getTypedRuleContext(Interface_defs_templateContext,0);
};

Node_template_clauseContext.prototype.artifact_defs = function() {
    return this.getTypedRuleContext(Artifact_defsContext,0);
};

Node_template_clauseContext.prototype.node_filter = function() {
    return this.getTypedRuleContext(Node_filterContext,0);
};

Node_template_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_template_clause(this);
	}
};

Node_template_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_template_clause(this);
	}
};




ToscaParser.Node_template_clauseContext = Node_template_clauseContext;

ToscaParser.prototype.node_template_clause = function() {

    var localctx = new Node_template_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ToscaParser.RULE_node_template_clause);
    var _la = 0; // Token type
    try {
        this.state = 856;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 809;
            this.match(ToscaParser.TYPE);
            this.state = 810;
            this.match(ToscaParser.COLON);
            this.state = 811;
            this.match(ToscaParser.ID);
            this.state = 812;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 813;
            this.descr();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 814;
            this.match(ToscaParser.DIRECTIVES);
            this.state = 815;
            this.match(ToscaParser.COLON);
            this.state = 816;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 817;
            this.short_str();
            this.state = 822;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 818;
                this.match(ToscaParser.COMMA);
                this.state = 819;
                this.short_str();
                this.state = 824;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 825;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 826;
            this.match(ToscaParser.NEWLINE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 828;
            this.match(ToscaParser.DIRECTIVES);
            this.state = 829;
            this.match(ToscaParser.COLON);
            this.state = 830;
            this.match(ToscaParser.NEWLINE);
            this.state = 831;
            this.match(ToscaParser.INDENT);
            this.state = 838; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 832;
                this.match(ToscaParser.MINUS);
                this.state = 833;
                this.match(ToscaParser.INDENT);
                this.state = 834;
                this.short_str();
                this.state = 835;
                this.match(ToscaParser.NEWLINE);
                this.state = 836;
                this.match(ToscaParser.DEDENT);
                this.state = 840; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 842;
            this.match(ToscaParser.DEDENT);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 844;
            this.entity_metadata();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 845;
            this.properties();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 846;
            this.attributes();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 847;
            this.node_requirement_assignments();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 848;
            this.capability_assignments();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 849;
            this.interface_defs_template();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 850;
            this.artifact_defs();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 851;
            this.node_filter();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 852;
            this.match(ToscaParser.COPY);
            this.state = 853;
            this.match(ToscaParser.COLON);
            this.state = 854;
            this.match(ToscaParser.ID);
            this.state = 855;
            this.match(ToscaParser.NEWLINE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relationship_templatesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_relationship_templates;
    return this;
}

Relationship_templatesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relationship_templatesContext.prototype.constructor = Relationship_templatesContext;

Relationship_templatesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Relationship_templatesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Relationship_templatesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Relationship_templatesContext.prototype.relationship_template = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Relationship_templateContext);
    } else {
        return this.getTypedRuleContext(Relationship_templateContext,i);
    }
};

Relationship_templatesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRelationship_templates(this);
	}
};

Relationship_templatesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRelationship_templates(this);
	}
};




ToscaParser.Relationship_templatesContext = Relationship_templatesContext;

ToscaParser.prototype.relationship_templates = function() {

    var localctx = new Relationship_templatesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ToscaParser.RULE_relationship_templates);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 858;
        this.match(ToscaParser.RELATIONSHIP_TEMPLATES);
        this.state = 859;
        this.match(ToscaParser.COLON);
        this.state = 860;
        this.match(ToscaParser.NEWLINE);
        this.state = 861;
        this.match(ToscaParser.INDENT);
        this.state = 863; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 862;
            this.relationship_template();
            this.state = 865; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 867;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relationship_templateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_relationship_template;
    this._ID = null; // Token
    this._relationship_template_clause = null; // Relationship_template_clauseContext
    return this;
}

Relationship_templateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relationship_templateContext.prototype.constructor = Relationship_templateContext;

Relationship_templateContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Relationship_templateContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Relationship_templateContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Relationship_templateContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Relationship_templateContext.prototype.relationship_template_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Relationship_template_clauseContext);
    } else {
        return this.getTypedRuleContext(Relationship_template_clauseContext,i);
    }
};

Relationship_templateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRelationship_template(this);
	}
};

Relationship_templateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRelationship_template(this);
	}
};




ToscaParser.Relationship_templateContext = Relationship_templateContext;

ToscaParser.prototype.relationship_template = function() {

    var localctx = new Relationship_templateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ToscaParser.RULE_relationship_template);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 869;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 870;
        this.match(ToscaParser.COLON);
        this.state = 871;
        this.match(ToscaParser.NEWLINE);
        this.state = 872;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this);
               u.mandatory = ['type']; u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 877; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 874;
            localctx._relationship_template_clause = this.relationship_template_clause();
            u.add(localctx._relationship_template_clause)
            this.state = 879; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ToscaParser.METADATA - 81)) | (1 << (ToscaParser.PROPERTIES - 81)) | (1 << (ToscaParser.TYPE - 81)) | (1 << (ToscaParser.DESCRIPTION - 81)))) !== 0) || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & ((1 << (ToscaParser.COPY - 114)) | (1 << (ToscaParser.ATTRIBUTES - 114)) | (1 << (ToscaParser.INTERFACES - 114)))) !== 0));
        this.state = 881;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relationship_template_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_relationship_template_clause;
    return this;
}

Relationship_template_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relationship_template_clauseContext.prototype.constructor = Relationship_template_clauseContext;

Relationship_template_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Relationship_template_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Relationship_template_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Relationship_template_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Relationship_template_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Relationship_template_clauseContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Relationship_template_clauseContext.prototype.interface_defs_template = function() {
    return this.getTypedRuleContext(Interface_defs_templateContext,0);
};

Relationship_template_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRelationship_template_clause(this);
	}
};

Relationship_template_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRelationship_template_clause(this);
	}
};




ToscaParser.Relationship_template_clauseContext = Relationship_template_clauseContext;

ToscaParser.prototype.relationship_template_clause = function() {

    var localctx = new Relationship_template_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ToscaParser.RULE_relationship_template_clause);
    try {
        this.state = 897;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 884;
            this.match(ToscaParser.TYPE);
            this.state = 885;
            this.match(ToscaParser.COLON);
            this.state = 886;
            this.match(ToscaParser.ID);
            this.state = 887;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 888;
            this.descr();
            break;
        case ToscaParser.METADATA:
            this.enterOuterAlt(localctx, 3);
            this.state = 889;
            this.entity_metadata();
            break;
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 4);
            this.state = 890;
            this.properties();
            break;
        case ToscaParser.ATTRIBUTES:
            this.enterOuterAlt(localctx, 5);
            this.state = 891;
            this.attributes();
            break;
        case ToscaParser.INTERFACES:
            this.enterOuterAlt(localctx, 6);
            this.state = 892;
            this.interface_defs_template();
            break;
        case ToscaParser.COPY:
            this.enterOuterAlt(localctx, 7);
            this.state = 893;
            this.match(ToscaParser.COPY);
            this.state = 894;
            this.match(ToscaParser.COLON);
            this.state = 895;
            this.match(ToscaParser.ID);
            this.state = 896;
            this.match(ToscaParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Tosca_definition_versionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_tosca_definition_version;
    return this;
}

Tosca_definition_versionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tosca_definition_versionContext.prototype.constructor = Tosca_definition_versionContext;


Tosca_definition_versionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterTosca_definition_version(this);
	}
};

Tosca_definition_versionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitTosca_definition_version(this);
	}
};




ToscaParser.Tosca_definition_versionContext = Tosca_definition_versionContext;

ToscaParser.prototype.tosca_definition_version = function() {

    var localctx = new Tosca_definition_versionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ToscaParser.RULE_tosca_definition_version);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        this.match(ToscaParser.TOSCA_DEFINITION_VERSION);
        this.state = 900;
        this.match(ToscaParser.COLON);
        this.state = 901;
        _la = this._input.LA(1);
        if(!(_la===ToscaParser.TOSCA_SIMPLE_YAML_1_0 || _la===ToscaParser.TOSCA_SIMPLE_YAML_1_1)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MetadataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_metadata;
    this._metadata_clause = null; // Metadata_clauseContext
    return this;
}

MetadataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MetadataContext.prototype.constructor = MetadataContext;

MetadataContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


MetadataContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

MetadataContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

MetadataContext.prototype.metadata_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Metadata_clauseContext);
    } else {
        return this.getTypedRuleContext(Metadata_clauseContext,i);
    }
};

MetadataContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterMetadata(this);
	}
};

MetadataContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitMetadata(this);
	}
};




ToscaParser.MetadataContext = MetadataContext;

ToscaParser.prototype.metadata = function() {

    var localctx = new MetadataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ToscaParser.RULE_metadata);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 903;
        this.match(ToscaParser.METADATA);
        this.state = 904;
        this.match(ToscaParser.COLON);
        this.state = 905;
        this.match(ToscaParser.NEWLINE);
         let u = new UnorderedClauses(this);
               u.mandatory = []; u.label = 'metadata' 
        this.state = 907;
        this.match(ToscaParser.INDENT);
        this.state = 912; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 908;
            localctx._metadata_clause = this.metadata_clause();
            this.state = 909;
            this.match(ToscaParser.NEWLINE);
            u.add(localctx._metadata_clause) 
            this.state = 914; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (ToscaParser.TEMPLATE_NAME - 82)) | (1 << (ToscaParser.TEMPLATE_AUTHOR - 82)) | (1 << (ToscaParser.TEMPLATE_VERSION - 82)))) !== 0) || _la===ToscaParser.ID);
        this.state = 916;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Metadata_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_metadata_clause;
    return this;
}

Metadata_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Metadata_clauseContext.prototype.constructor = Metadata_clauseContext;

Metadata_clauseContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

Metadata_clauseContext.prototype.VERSION = function() {
    return this.getToken(ToscaParser.VERSION, 0);
};

Metadata_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Metadata_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Metadata_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterMetadata_clause(this);
	}
};

Metadata_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitMetadata_clause(this);
	}
};




ToscaParser.Metadata_clauseContext = Metadata_clauseContext;

ToscaParser.prototype.metadata_clause = function() {

    var localctx = new Metadata_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ToscaParser.RULE_metadata_clause);
    try {
        this.state = 931;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TEMPLATE_NAME:
            this.enterOuterAlt(localctx, 1);
            this.state = 919;
            this.match(ToscaParser.TEMPLATE_NAME);
            this.state = 920;
            this.match(ToscaParser.COLON);
            this.state = 921;
            this.short_str();
            break;
        case ToscaParser.TEMPLATE_AUTHOR:
            this.enterOuterAlt(localctx, 2);
            this.state = 922;
            this.match(ToscaParser.TEMPLATE_AUTHOR);
            this.state = 923;
            this.match(ToscaParser.COLON);
            this.state = 924;
            this.short_str();
            break;
        case ToscaParser.TEMPLATE_VERSION:
            this.enterOuterAlt(localctx, 3);
            this.state = 925;
            this.match(ToscaParser.TEMPLATE_VERSION);
            this.state = 926;
            this.match(ToscaParser.COLON);
            this.state = 927;
            this.match(ToscaParser.VERSION);
            break;
        case ToscaParser.ID:
            this.enterOuterAlt(localctx, 4);
            this.state = 928;
            this.match(ToscaParser.ID);
            this.state = 929;
            this.match(ToscaParser.COLON);
            this.state = 930;
            this.value();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RepositoriesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_repositories;
    return this;
}

RepositoriesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepositoriesContext.prototype.constructor = RepositoriesContext;

RepositoriesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

RepositoriesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

RepositoriesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

RepositoriesContext.prototype.repository = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RepositoryContext);
    } else {
        return this.getTypedRuleContext(RepositoryContext,i);
    }
};

RepositoriesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRepositories(this);
	}
};

RepositoriesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRepositories(this);
	}
};




ToscaParser.RepositoriesContext = RepositoriesContext;

ToscaParser.prototype.repositories = function() {

    var localctx = new RepositoriesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ToscaParser.RULE_repositories);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 933;
        this.match(ToscaParser.REPOSITORIES);
        this.state = 934;
        this.match(ToscaParser.COLON);
        this.state = 935;
        this.match(ToscaParser.NEWLINE);
        this.state = 936;
        this.match(ToscaParser.INDENT);
        this.state = 938; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 937;
            this.repository();
            this.state = 940; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 942;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RepositoryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_repository;
    return this;
}

RepositoryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepositoryContext.prototype.constructor = RepositoryContext;

RepositoryContext.prototype.repository_short = function() {
    return this.getTypedRuleContext(Repository_shortContext,0);
};

RepositoryContext.prototype.repository_detail = function() {
    return this.getTypedRuleContext(Repository_detailContext,0);
};

RepositoryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRepository(this);
	}
};

RepositoryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRepository(this);
	}
};




ToscaParser.RepositoryContext = RepositoryContext;

ToscaParser.prototype.repository = function() {

    var localctx = new RepositoryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ToscaParser.RULE_repository);
    try {
        this.state = 946;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 944;
            this.repository_short();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 945;
            this.repository_detail();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Repository_shortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_repository_short;
    return this;
}

Repository_shortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Repository_shortContext.prototype.constructor = Repository_shortContext;

Repository_shortContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Repository_shortContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Repository_shortContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRepository_short(this);
	}
};

Repository_shortContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRepository_short(this);
	}
};




ToscaParser.Repository_shortContext = Repository_shortContext;

ToscaParser.prototype.repository_short = function() {

    var localctx = new Repository_shortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ToscaParser.RULE_repository_short);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 948;
        this.match(ToscaParser.ID);
        this.state = 949;
        this.match(ToscaParser.COLON);
        this.state = 950;
        this.match(ToscaParser.ID);
        this.state = 951;
        this.match(ToscaParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Repository_detailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_repository_detail;
    this._ID = null; // Token
    this._repository_clause = null; // Repository_clauseContext
    return this;
}

Repository_detailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Repository_detailContext.prototype.constructor = Repository_detailContext;

Repository_detailContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Repository_detailContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Repository_detailContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Repository_detailContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Repository_detailContext.prototype.repository_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Repository_clauseContext);
    } else {
        return this.getTypedRuleContext(Repository_clauseContext,i);
    }
};

Repository_detailContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRepository_detail(this);
	}
};

Repository_detailContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRepository_detail(this);
	}
};




ToscaParser.Repository_detailContext = Repository_detailContext;

ToscaParser.prototype.repository_detail = function() {

    var localctx = new Repository_detailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ToscaParser.RULE_repository_detail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 953;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 954;
        this.match(ToscaParser.COLON);
        this.state = 955;
        this.match(ToscaParser.NEWLINE);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 957;
        this.match(ToscaParser.INDENT);
        this.state = 961; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 958;
            localctx._repository_clause = this.repository_clause();
            u.add(localctx._repository_clause) 
            this.state = 963; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ToscaParser.URL - 96)) | (1 << (ToscaParser.DESCRIPTION - 96)) | (1 << (ToscaParser.CREDENTIAL - 96)))) !== 0));
        this.state = 965;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Repository_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_repository_clause;
    return this;
}

Repository_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Repository_clauseContext.prototype.constructor = Repository_clauseContext;

Repository_clauseContext.prototype.repository_url = function() {
    return this.getTypedRuleContext(Repository_urlContext,0);
};

Repository_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Repository_clauseContext.prototype.repository_cred = function() {
    return this.getTypedRuleContext(Repository_credContext,0);
};

Repository_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRepository_clause(this);
	}
};

Repository_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRepository_clause(this);
	}
};




ToscaParser.Repository_clauseContext = Repository_clauseContext;

ToscaParser.prototype.repository_clause = function() {

    var localctx = new Repository_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ToscaParser.RULE_repository_clause);
    try {
        this.state = 971;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.URL:
            this.enterOuterAlt(localctx, 1);
            this.state = 968;
            this.repository_url();
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 969;
            this.descr();
            break;
        case ToscaParser.CREDENTIAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 970;
            this.repository_cred();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Repository_urlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_repository_url;
    return this;
}

Repository_urlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Repository_urlContext.prototype.constructor = Repository_urlContext;

Repository_urlContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

Repository_urlContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Repository_urlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRepository_url(this);
	}
};

Repository_urlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRepository_url(this);
	}
};




ToscaParser.Repository_urlContext = Repository_urlContext;

ToscaParser.prototype.repository_url = function() {

    var localctx = new Repository_urlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ToscaParser.RULE_repository_url);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 973;
        this.match(ToscaParser.URL);
        this.state = 974;
        this.match(ToscaParser.COLON);
        this.state = 975;
        this.short_str();
        this.state = 976;
        this.match(ToscaParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Repository_credContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_repository_cred;
    this._cred_ele = null; // Cred_eleContext
    return this;
}

Repository_credContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Repository_credContext.prototype.constructor = Repository_credContext;

Repository_credContext.prototype.cred_ele = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cred_eleContext);
    } else {
        return this.getTypedRuleContext(Cred_eleContext,i);
    }
};

Repository_credContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Repository_credContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Repository_credContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Repository_credContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRepository_cred(this);
	}
};

Repository_credContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRepository_cred(this);
	}
};




ToscaParser.Repository_credContext = Repository_credContext;

ToscaParser.prototype.repository_cred = function() {

    var localctx = new Repository_credContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ToscaParser.RULE_repository_cred);
    var _la = 0; // Token type
    try {
        this.state = 1007;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 978;
            this.match(ToscaParser.CREDENTIAL);
            this.state = 979;
            this.match(ToscaParser.COLON);
            this.state = 980;
            this.match(ToscaParser.OPEN_BRACE);
            this.state = 981;
            this.cred_ele();
            this.state = 986;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 982;
                this.match(ToscaParser.COMMA);
                this.state = 983;
                this.cred_ele();
                this.state = 988;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 989;
            this.match(ToscaParser.CLOSE_BRACE);
            this.state = 990;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 992;
            this.match(ToscaParser.CREDENTIAL);
            this.state = 993;
            this.match(ToscaParser.COLON);
            this.state = 994;
            this.match(ToscaParser.NEWLINE);
             let u = new UnorderedClauses(this); 
            this.state = 996;
            this.match(ToscaParser.INDENT);
            this.state = 1000; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 997;
                localctx._cred_ele = this.cred_ele();
                u.add(localctx._cred_ele) 
                this.state = 1002; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (ToscaParser.TOKEN - 99)) | (1 << (ToscaParser.PROTOCOL - 99)) | (1 << (ToscaParser.TOKEN_TYPE - 99)) | (1 << (ToscaParser.USER - 99)))) !== 0));
            this.state = 1004;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cred_eleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_cred_ele;
    return this;
}

Cred_eleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cred_eleContext.prototype.constructor = Cred_eleContext;

Cred_eleContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Cred_eleContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Cred_eleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCred_ele(this);
	}
};

Cred_eleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCred_ele(this);
	}
};




ToscaParser.Cred_eleContext = Cred_eleContext;

ToscaParser.prototype.cred_ele = function() {

    var localctx = new Cred_eleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ToscaParser.RULE_cred_ele);
    try {
        this.state = 1025;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TOKEN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1009;
            this.match(ToscaParser.TOKEN);
            this.state = 1010;
            this.match(ToscaParser.COLON);
            this.state = 1011;
            this.match(ToscaParser.ID);
            this.state = 1012;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.PROTOCOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1013;
            this.match(ToscaParser.PROTOCOL);
            this.state = 1014;
            this.match(ToscaParser.COLON);
            this.state = 1015;
            this.match(ToscaParser.ID);
            this.state = 1016;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.TOKEN_TYPE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1017;
            this.match(ToscaParser.TOKEN_TYPE);
            this.state = 1018;
            this.match(ToscaParser.COLON);
            this.state = 1019;
            this.match(ToscaParser.ID);
            this.state = 1020;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.USER:
            this.enterOuterAlt(localctx, 4);
            this.state = 1021;
            this.match(ToscaParser.USER);
            this.state = 1022;
            this.match(ToscaParser.COLON);
            this.state = 1023;
            this.match(ToscaParser.ID);
            this.state = 1024;
            this.match(ToscaParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_importsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_file_imports;
    return this;
}

File_importsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_importsContext.prototype.constructor = File_importsContext;

File_importsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

File_importsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

File_importsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

File_importsContext.prototype.file_import = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(File_importContext);
    } else {
        return this.getTypedRuleContext(File_importContext,i);
    }
};

File_importsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFile_imports(this);
	}
};

File_importsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFile_imports(this);
	}
};




ToscaParser.File_importsContext = File_importsContext;

ToscaParser.prototype.file_imports = function() {

    var localctx = new File_importsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ToscaParser.RULE_file_imports);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1027;
        this.match(ToscaParser.IMPORTS);
        this.state = 1028;
        this.match(ToscaParser.COLON);
        this.state = 1029;
        this.match(ToscaParser.NEWLINE);
        this.state = 1030;
        this.match(ToscaParser.INDENT);
        this.state = 1032; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1031;
            this.file_import();
            this.state = 1034; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 1036;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_importContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_file_import;
    this._ID = null; // Token
    this._file_import_clause = null; // File_import_clauseContext
    return this;
}

File_importContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_importContext.prototype.constructor = File_importContext;

File_importContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


File_importContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

File_importContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

File_importContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


File_importContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

File_importContext.prototype.file_import_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(File_import_clauseContext);
    } else {
        return this.getTypedRuleContext(File_import_clauseContext,i);
    }
};

File_importContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFile_import(this);
	}
};

File_importContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFile_import(this);
	}
};




ToscaParser.File_importContext = File_importContext;

ToscaParser.prototype.file_import = function() {

    var localctx = new File_importContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ToscaParser.RULE_file_import);
    var _la = 0; // Token type
    try {
        this.state = 1070;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1038;
            this.match(ToscaParser.MINUS);
            this.state = 1039;
            this.match(ToscaParser.INDENT);
            this.state = 1040;
            this.short_str();
            this.state = 1041;
            this.match(ToscaParser.NEWLINE);
            this.state = 1042;
            this.match(ToscaParser.DEDENT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1044;
            this.match(ToscaParser.MINUS);
            this.state = 1045;
            this.match(ToscaParser.INDENT);
            this.state = 1046;
            this.match(ToscaParser.ID);
            this.state = 1047;
            this.match(ToscaParser.COLON);
            this.state = 1048;
            this.short_str();
            this.state = 1049;
            this.match(ToscaParser.NEWLINE);
            this.state = 1050;
            this.match(ToscaParser.DEDENT);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1052;
            this.match(ToscaParser.MINUS);
            this.state = 1053;
            this.match(ToscaParser.INDENT);
            this.state = 1054;
            localctx._ID = this.match(ToscaParser.ID);
            this.state = 1055;
            this.match(ToscaParser.COLON);
            this.state = 1056;
            this.match(ToscaParser.NEWLINE);
             let u = new UnorderedClauses(this); 
                       u.mandatory = ['file']; u.label = (localctx._ID===null ? null : localctx._ID.text)
            this.state = 1058;
            this.match(ToscaParser.INDENT);
            this.state = 1062; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1059;
                localctx._file_import_clause = this.file_import_clause();
                u.add(localctx._file_import_clause) 
                this.state = 1064; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (ToscaParser.FILE - 104)) | (1 << (ToscaParser.REPOSITORY - 104)) | (1 << (ToscaParser.NAMESPACE_PREFIX - 104)) | (1 << (ToscaParser.NAMESPACE_URI - 104)))) !== 0));
            this.state = 1066;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            this.state = 1068;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Artifact_defsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_artifact_defs;
    return this;
}

Artifact_defsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Artifact_defsContext.prototype.constructor = Artifact_defsContext;

Artifact_defsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Artifact_defsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Artifact_defsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Artifact_defsContext.prototype.artifact_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Artifact_defContext);
    } else {
        return this.getTypedRuleContext(Artifact_defContext,i);
    }
};

Artifact_defsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterArtifact_defs(this);
	}
};

Artifact_defsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitArtifact_defs(this);
	}
};




ToscaParser.Artifact_defsContext = Artifact_defsContext;

ToscaParser.prototype.artifact_defs = function() {

    var localctx = new Artifact_defsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ToscaParser.RULE_artifact_defs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1072;
        this.match(ToscaParser.T__4);
        this.state = 1073;
        this.match(ToscaParser.COLON);
        this.state = 1074;
        this.match(ToscaParser.NEWLINE);
        this.state = 1075;
        this.match(ToscaParser.INDENT);
        this.state = 1077; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1076;
            this.artifact_def();
            this.state = 1079; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1081;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Artifact_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_artifact_def;
    this._ID = null; // Token
    this._artifact_def_clause = null; // Artifact_def_clauseContext
    return this;
}

Artifact_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Artifact_defContext.prototype.constructor = Artifact_defContext;

Artifact_defContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Artifact_defContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Artifact_defContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Artifact_defContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Artifact_defContext.prototype.artifact_def_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Artifact_def_clauseContext);
    } else {
        return this.getTypedRuleContext(Artifact_def_clauseContext,i);
    }
};

Artifact_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterArtifact_def(this);
	}
};

Artifact_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitArtifact_def(this);
	}
};




ToscaParser.Artifact_defContext = Artifact_defContext;

ToscaParser.prototype.artifact_def = function() {

    var localctx = new Artifact_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ToscaParser.RULE_artifact_def);
    var _la = 0; // Token type
    try {
        this.state = 1102;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1083;
            this.match(ToscaParser.ID);
            this.state = 1084;
            this.match(ToscaParser.COLON);
            this.state = 1085;
            this.match(ToscaParser.ID);
            this.state = 1086;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1087;
            localctx._ID = this.match(ToscaParser.ID);
            this.state = 1088;
            this.match(ToscaParser.COLON);
            this.state = 1089;
            this.match(ToscaParser.NEWLINE);
             let u = new UnorderedClauses(this);
                  u.mandatory = ['type', 'file']; u.label = (localctx._ID===null ? null : localctx._ID.text); 
            this.state = 1091;
            this.match(ToscaParser.INDENT);
            this.state = 1095; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1092;
                localctx._artifact_def_clause = this.artifact_def_clause();
                u.add(localctx._artifact_def_clause) 
                this.state = 1097; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.FILE - 91)) | (1 << (ToscaParser.REPOSITORY - 91)))) !== 0) || _la===ToscaParser.DEPLOY_PATH);
            this.state = 1099;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Artifact_def_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_artifact_def_clause;
    return this;
}

Artifact_def_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Artifact_def_clauseContext.prototype.constructor = Artifact_def_clauseContext;

Artifact_def_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Artifact_def_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Artifact_def_clauseContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

Artifact_def_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Artifact_def_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterArtifact_def_clause(this);
	}
};

Artifact_def_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitArtifact_def_clause(this);
	}
};




ToscaParser.Artifact_def_clauseContext = Artifact_def_clauseContext;

ToscaParser.prototype.artifact_def_clause = function() {

    var localctx = new Artifact_def_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ToscaParser.RULE_artifact_def_clause);
    try {
        this.state = 1120;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1104;
            this.match(ToscaParser.TYPE);
            this.state = 1105;
            this.match(ToscaParser.COLON);
            this.state = 1106;
            this.match(ToscaParser.ID);
            this.state = 1107;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.FILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1108;
            this.match(ToscaParser.FILE);
            this.state = 1109;
            this.match(ToscaParser.COLON);
            this.state = 1110;
            this.short_str();
            this.state = 1111;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.REPOSITORY:
            this.enterOuterAlt(localctx, 3);
            this.state = 1113;
            this.match(ToscaParser.REPOSITORY);
            this.state = 1114;
            this.match(ToscaParser.COLON);
            this.state = 1115;
            this.match(ToscaParser.ID);
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 4);
            this.state = 1116;
            this.descr();
            break;
        case ToscaParser.DEPLOY_PATH:
            this.enterOuterAlt(localctx, 5);
            this.state = 1117;
            this.match(ToscaParser.DEPLOY_PATH);
            this.state = 1118;
            this.match(ToscaParser.COLON);
            this.state = 1119;
            this.match(ToscaParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_requirement_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_requirement_assignments;
    return this;
}

Node_requirement_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_requirement_assignmentsContext.prototype.constructor = Node_requirement_assignmentsContext;

Node_requirement_assignmentsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Node_requirement_assignmentsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Node_requirement_assignmentsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Node_requirement_assignmentsContext.prototype.node_requirement_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Node_requirement_assignmentContext);
    } else {
        return this.getTypedRuleContext(Node_requirement_assignmentContext,i);
    }
};

Node_requirement_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_requirement_assignments(this);
	}
};

Node_requirement_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_requirement_assignments(this);
	}
};




ToscaParser.Node_requirement_assignmentsContext = Node_requirement_assignmentsContext;

ToscaParser.prototype.node_requirement_assignments = function() {

    var localctx = new Node_requirement_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ToscaParser.RULE_node_requirement_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1122;
        this.match(ToscaParser.REQUIREMENTS);
        this.state = 1123;
        this.match(ToscaParser.COLON);
        this.state = 1124;
        this.match(ToscaParser.NEWLINE);
        this.state = 1125;
        this.match(ToscaParser.INDENT);
        this.state = 1127; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1126;
            this.node_requirement_assignment();
            this.state = 1129; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 1131;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_requirement_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_requirement_assignment;
    this._node_requirement_assignment_clause = null; // Node_requirement_assignment_clauseContext
    return this;
}

Node_requirement_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_requirement_assignmentContext.prototype.constructor = Node_requirement_assignmentContext;

Node_requirement_assignmentContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Node_requirement_assignmentContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Node_requirement_assignmentContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Node_requirement_assignmentContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Node_requirement_assignmentContext.prototype.node_requirement_assignment_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Node_requirement_assignment_clauseContext);
    } else {
        return this.getTypedRuleContext(Node_requirement_assignment_clauseContext,i);
    }
};

Node_requirement_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_requirement_assignment(this);
	}
};

Node_requirement_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_requirement_assignment(this);
	}
};




ToscaParser.Node_requirement_assignmentContext = Node_requirement_assignmentContext;

ToscaParser.prototype.node_requirement_assignment = function() {

    var localctx = new Node_requirement_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ToscaParser.RULE_node_requirement_assignment);
    var _la = 0; // Token type
    try {
        this.state = 1158;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1133;
            this.match(ToscaParser.MINUS);
            this.state = 1134;
            this.match(ToscaParser.INDENT);
            this.state = 1135;
            this.match(ToscaParser.ID);
            this.state = 1136;
            this.match(ToscaParser.COLON);
            this.state = 1137;
            this.match(ToscaParser.ID);
            this.state = 1138;
            this.match(ToscaParser.NEWLINE);
            this.state = 1139;
            this.match(ToscaParser.DEDENT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1140;
            this.match(ToscaParser.MINUS);
            this.state = 1141;
            this.match(ToscaParser.INDENT);
            this.state = 1142;
            this.match(ToscaParser.ID);
            this.state = 1143;
            this.match(ToscaParser.COLON);
            this.state = 1144;
            this.match(ToscaParser.NEWLINE);
            this.state = 1145;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this); 
            this.state = 1150; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1147;
                localctx._node_requirement_assignment_clause = this.node_requirement_assignment_clause();
                u.add(localctx._node_requirement_assignment_clause)
                this.state = 1152; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.T__19 || ((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (ToscaParser.RELATIONSHIP - 137)) | (1 << (ToscaParser.OCCURENCES - 137)) | (1 << (ToscaParser.NODE - 137)) | (1 << (ToscaParser.CAPABILITY - 137)))) !== 0));
            this.state = 1154;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            this.state = 1156;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_requirement_assignment_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_requirement_assignment_clause;
    return this;
}

Node_requirement_assignment_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_requirement_assignment_clauseContext.prototype.constructor = Node_requirement_assignment_clauseContext;

Node_requirement_assignment_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Node_requirement_assignment_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Node_requirement_assignment_clauseContext.prototype.range = function() {
    return this.getTypedRuleContext(RangeContext,0);
};

Node_requirement_assignment_clauseContext.prototype.node_filter = function() {
    return this.getTypedRuleContext(Node_filterContext,0);
};

Node_requirement_assignment_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_requirement_assignment_clause(this);
	}
};

Node_requirement_assignment_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_requirement_assignment_clause(this);
	}
};




ToscaParser.Node_requirement_assignment_clauseContext = Node_requirement_assignment_clauseContext;

ToscaParser.prototype.node_requirement_assignment_clause = function() {

    var localctx = new Node_requirement_assignment_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ToscaParser.RULE_node_requirement_assignment_clause);
    try {
        this.state = 1178;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.NODE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1160;
            this.match(ToscaParser.NODE);
            this.state = 1161;
            this.match(ToscaParser.COLON);
            this.state = 1162;
            this.match(ToscaParser.ID);
            this.state = 1163;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.RELATIONSHIP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1164;
            this.match(ToscaParser.RELATIONSHIP);
            this.state = 1165;
            this.match(ToscaParser.COLON);
            this.state = 1166;
            this.match(ToscaParser.ID);
            this.state = 1167;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.CAPABILITY:
            this.enterOuterAlt(localctx, 3);
            this.state = 1168;
            this.match(ToscaParser.CAPABILITY);
            this.state = 1169;
            this.match(ToscaParser.COLON);
            this.state = 1170;
            this.match(ToscaParser.ID);
            this.state = 1171;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.OCCURENCES:
            this.enterOuterAlt(localctx, 4);
            this.state = 1172;
            this.match(ToscaParser.OCCURENCES);
            this.state = 1173;
            this.match(ToscaParser.COLON);
            this.state = 1174;
            this.range();
            this.state = 1175;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.T__19:
            this.enterOuterAlt(localctx, 5);
            this.state = 1177;
            this.node_filter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_properties;
    return this;
}

PropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertiesContext.prototype.constructor = PropertiesContext;

PropertiesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

PropertiesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

PropertiesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

PropertiesContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

PropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperties(this);
	}
};

PropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperties(this);
	}
};




ToscaParser.PropertiesContext = PropertiesContext;

ToscaParser.prototype.properties = function() {

    var localctx = new PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ToscaParser.RULE_properties);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1180;
        this.match(ToscaParser.PROPERTIES);
        this.state = 1181;
        this.match(ToscaParser.COLON);
        this.state = 1182;
        this.match(ToscaParser.NEWLINE);
        this.state = 1183;
        this.match(ToscaParser.INDENT);
        this.state = 1185; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1184;
            this.property();
            this.state = 1187; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1189;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_property;
    this._ID = null; // Token
    this._property_clause = null; // Property_clauseContext
    return this;
}

PropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyContext.prototype.constructor = PropertyContext;

PropertyContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

PropertyContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

PropertyContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

PropertyContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

PropertyContext.prototype.property_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Property_clauseContext);
    } else {
        return this.getTypedRuleContext(Property_clauseContext,i);
    }
};

PropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperty(this);
	}
};

PropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperty(this);
	}
};




ToscaParser.PropertyContext = PropertyContext;

ToscaParser.prototype.property = function() {

    var localctx = new PropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ToscaParser.RULE_property);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1191;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1192;
        this.match(ToscaParser.COLON);
        this.state = 1193;
        this.match(ToscaParser.NEWLINE);
         let u = new UnorderedClauses(this);
               u.mandatory = ['type']; u.label = (localctx._ID===null ? null : localctx._ID.text); 
        this.state = 1195;
        this.match(ToscaParser.INDENT);
        this.state = 1199; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1196;
            localctx._property_clause = this.property_clause();
            u.add(localctx._property_clause) 
            this.state = 1201; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.REQUIRED - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)))) !== 0) || _la===ToscaParser.ENTRY_SCHEMA);
        this.state = 1203;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_property_clause;
    return this;
}

Property_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_clauseContext.prototype.constructor = Property_clauseContext;

Property_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Property_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Property_clauseContext.prototype.BASETYPE_NAMES = function() {
    return this.getToken(ToscaParser.BASETYPE_NAMES, 0);
};

Property_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Property_clauseContext.prototype.constraints = function() {
    return this.getTypedRuleContext(ConstraintsContext,0);
};

Property_clauseContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

Property_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Property_clauseContext.prototype.entry_decl = function() {
    return this.getTypedRuleContext(Entry_declContext,0);
};

Property_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperty_clause(this);
	}
};

Property_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperty_clause(this);
	}
};




ToscaParser.Property_clauseContext = Property_clauseContext;

ToscaParser.prototype.property_clause = function() {

    var localctx = new Property_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ToscaParser.RULE_property_clause);
    var _la = 0; // Token type
    try {
        this.state = 1226;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1206;
            this.match(ToscaParser.TYPE);
            this.state = 1207;
            this.match(ToscaParser.COLON);
            this.state = 1208;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.BASETYPE_NAMES || _la===ToscaParser.ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1209;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1210;
            this.descr();
            break;
        case ToscaParser.CONSTRAINTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 1211;
            this.constraints();
            break;
        case ToscaParser.REQUIRED:
            this.enterOuterAlt(localctx, 4);
            this.state = 1212;
            this.match(ToscaParser.REQUIRED);
            this.state = 1213;
            this.match(ToscaParser.COLON);
            this.state = 1214;
            this.bool();
            this.state = 1215;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DEFAULT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1217;
            this.match(ToscaParser.DEFAULT);
            this.state = 1218;
            this.match(ToscaParser.COLON);
            this.state = 1219;
            this.value();
            this.state = 1220;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.STATUS:
            this.enterOuterAlt(localctx, 6);
            this.state = 1222;
            this.match(ToscaParser.STATUS);
            this.state = 1223;
            this.match(ToscaParser.COLON);
            this.state = 1224;
            _la = this._input.LA(1);
            if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ToscaParser.SUPPORTED - 30)) | (1 << (ToscaParser.UNSUPPORTED - 30)) | (1 << (ToscaParser.EXPERIMENTAL - 30)) | (1 << (ToscaParser.DEPRECATED - 30)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ToscaParser.ENTRY_SCHEMA:
            this.enterOuterAlt(localctx, 7);
            this.state = 1225;
            this.entry_decl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_property_assignments;
    return this;
}

Property_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_assignmentsContext.prototype.constructor = Property_assignmentsContext;

Property_assignmentsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Property_assignmentsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Property_assignmentsContext.prototype.property_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Property_assignmentContext);
    } else {
        return this.getTypedRuleContext(Property_assignmentContext,i);
    }
};

Property_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperty_assignments(this);
	}
};

Property_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperty_assignments(this);
	}
};




ToscaParser.Property_assignmentsContext = Property_assignmentsContext;

ToscaParser.prototype.property_assignments = function() {

    var localctx = new Property_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ToscaParser.RULE_property_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1228;
        this.match(ToscaParser.PROPERTIES);
        this.state = 1229;
        this.match(ToscaParser.COLON);
        this.state = 1230;
        this.match(ToscaParser.INDENT);
        this.state = 1232; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1231;
            this.property_assignment();
            this.state = 1234; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1236;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_property_assignment;
    this._ID = null; // Token
    this._property_assignment_clause = null; // Property_assignment_clauseContext
    return this;
}

Property_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_assignmentContext.prototype.constructor = Property_assignmentContext;

Property_assignmentContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Property_assignmentContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Property_assignmentContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Property_assignmentContext.prototype.value_expr = function() {
    return this.getTypedRuleContext(Value_exprContext,0);
};

Property_assignmentContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Property_assignmentContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Property_assignmentContext.prototype.property_assignment_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Property_assignment_clauseContext);
    } else {
        return this.getTypedRuleContext(Property_assignment_clauseContext,i);
    }
};

Property_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperty_assignment(this);
	}
};

Property_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperty_assignment(this);
	}
};




ToscaParser.Property_assignmentContext = Property_assignmentContext;

ToscaParser.prototype.property_assignment = function() {

    var localctx = new Property_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ToscaParser.RULE_property_assignment);
    var _la = 0; // Token type
    try {
        this.state = 1263;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1238;
            this.match(ToscaParser.ID);
            this.state = 1239;
            this.match(ToscaParser.COLON);
            this.state = 1240;
            this.value();
            this.state = 1241;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1243;
            this.match(ToscaParser.ID);
            this.state = 1244;
            this.match(ToscaParser.COLON);
            this.state = 1245;
            this.value_expr();
            this.state = 1246;
            this.match(ToscaParser.NEWLINE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1248;
            localctx._ID = this.match(ToscaParser.ID);
            this.state = 1249;
            this.match(ToscaParser.COLON);
            this.state = 1250;
            this.match(ToscaParser.NEWLINE);
            this.state = 1251;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this);
                   u.mandatory = ['value']; u.label = (localctx._ID===null ? null : localctx._ID.text); 
            this.state = 1256; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1253;
                localctx._property_assignment_clause = this.property_assignment_clause();
                u.add(localctx._property_assignment_clause)
                this.state = 1258; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.DESCRIPTION || _la===ToscaParser.VALUE);
            this.state = 1260;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_assignment_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_property_assignment_clause;
    return this;
}

Property_assignment_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_assignment_clauseContext.prototype.constructor = Property_assignment_clauseContext;

Property_assignment_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Property_assignment_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Property_assignment_clauseContext.prototype.value_expr = function() {
    return this.getTypedRuleContext(Value_exprContext,0);
};

Property_assignment_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperty_assignment_clause(this);
	}
};

Property_assignment_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperty_assignment_clause(this);
	}
};




ToscaParser.Property_assignment_clauseContext = Property_assignment_clauseContext;

ToscaParser.prototype.property_assignment_clause = function() {

    var localctx = new Property_assignment_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ToscaParser.RULE_property_assignment_clause);
    try {
        this.state = 1272;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1265;
            this.descr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1266;
            this.match(ToscaParser.VALUE);
            this.state = 1267;
            this.match(ToscaParser.COLON);
            this.state = 1268;
            this.value();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1269;
            this.match(ToscaParser.VALUE);
            this.state = 1270;
            this.match(ToscaParser.COLON);
            this.state = 1271;
            this.value_expr();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attributes;
    return this;
}

AttributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributesContext.prototype.constructor = AttributesContext;

AttributesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

AttributesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

AttributesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

AttributesContext.prototype.attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttributeContext);
    } else {
        return this.getTypedRuleContext(AttributeContext,i);
    }
};

AttributesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttributes(this);
	}
};

AttributesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttributes(this);
	}
};




ToscaParser.AttributesContext = AttributesContext;

ToscaParser.prototype.attributes = function() {

    var localctx = new AttributesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ToscaParser.RULE_attributes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1274;
        this.match(ToscaParser.ATTRIBUTES);
        this.state = 1275;
        this.match(ToscaParser.COLON);
        this.state = 1276;
        this.match(ToscaParser.NEWLINE);
        this.state = 1277;
        this.match(ToscaParser.INDENT);
        this.state = 1279; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1278;
            this.attribute();
            this.state = 1281; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__5);
        this.state = 1283;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attribute;
    this._ID = null; // Token
    this._attribute_clause = null; // Attribute_clauseContext
    return this;
}

AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributeContext.prototype.constructor = AttributeContext;

AttributeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

AttributeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

AttributeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

AttributeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

AttributeContext.prototype.attribute_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_clauseContext);
    } else {
        return this.getTypedRuleContext(Attribute_clauseContext,i);
    }
};

AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttribute(this);
	}
};

AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttribute(this);
	}
};




ToscaParser.AttributeContext = AttributeContext;

ToscaParser.prototype.attribute = function() {

    var localctx = new AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ToscaParser.RULE_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1285;
        this.match(ToscaParser.T__5);
        this.state = 1286;
        this.match(ToscaParser.COLON);
        this.state = 1287;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1288;
        this.match(ToscaParser.NEWLINE);
         let u = new UnorderedClauses(this);
               u.mandatory = ['type']; u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 1290;
        this.match(ToscaParser.INDENT);
        this.state = 1294; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1291;
            localctx._attribute_clause = this.attribute_clause();
            u.add(localctx._attribute_clause) 
            this.state = 1296; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)))) !== 0) || _la===ToscaParser.ENTRY_SCHEMA);
        this.state = 1298;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attribute_clause;
    return this;
}

Attribute_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_clauseContext.prototype.constructor = Attribute_clauseContext;

Attribute_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Attribute_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Attribute_clauseContext.prototype.BASETYPE_NAMES = function() {
    return this.getToken(ToscaParser.BASETYPE_NAMES, 0);
};

Attribute_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Attribute_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Attribute_clauseContext.prototype.entry_decl = function() {
    return this.getTypedRuleContext(Entry_declContext,0);
};

Attribute_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttribute_clause(this);
	}
};

Attribute_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttribute_clause(this);
	}
};




ToscaParser.Attribute_clauseContext = Attribute_clauseContext;

ToscaParser.prototype.attribute_clause = function() {

    var localctx = new Attribute_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ToscaParser.RULE_attribute_clause);
    var _la = 0; // Token type
    try {
        this.state = 1315;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1301;
            this.match(ToscaParser.TYPE);
            this.state = 1302;
            this.match(ToscaParser.COLON);
            this.state = 1303;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.BASETYPE_NAMES || _la===ToscaParser.ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1304;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1305;
            this.descr();
            break;
        case ToscaParser.DEFAULT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1306;
            this.match(ToscaParser.DEFAULT);
            this.state = 1307;
            this.match(ToscaParser.COLON);
            this.state = 1308;
            this.value();
            this.state = 1309;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.STATUS:
            this.enterOuterAlt(localctx, 4);
            this.state = 1311;
            this.match(ToscaParser.STATUS);
            this.state = 1312;
            this.match(ToscaParser.COLON);
            this.state = 1313;
            _la = this._input.LA(1);
            if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ToscaParser.SUPPORTED - 30)) | (1 << (ToscaParser.UNSUPPORTED - 30)) | (1 << (ToscaParser.EXPERIMENTAL - 30)) | (1 << (ToscaParser.DEPRECATED - 30)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ToscaParser.ENTRY_SCHEMA:
            this.enterOuterAlt(localctx, 5);
            this.state = 1314;
            this.entry_decl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attribute_assignments;
    return this;
}

Attribute_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_assignmentsContext.prototype.constructor = Attribute_assignmentsContext;

Attribute_assignmentsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Attribute_assignmentsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Attribute_assignmentsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Attribute_assignmentsContext.prototype.attribute_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_assignmentContext);
    } else {
        return this.getTypedRuleContext(Attribute_assignmentContext,i);
    }
};

Attribute_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttribute_assignments(this);
	}
};

Attribute_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttribute_assignments(this);
	}
};




ToscaParser.Attribute_assignmentsContext = Attribute_assignmentsContext;

ToscaParser.prototype.attribute_assignments = function() {

    var localctx = new Attribute_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ToscaParser.RULE_attribute_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1317;
        this.match(ToscaParser.ATTRIBUTES);
        this.state = 1318;
        this.match(ToscaParser.COLON);
        this.state = 1319;
        this.match(ToscaParser.NEWLINE);
        this.state = 1320;
        this.match(ToscaParser.INDENT);
        this.state = 1322; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1321;
            this.attribute_assignment();
            this.state = 1324; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1326;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attribute_assignment;
    this._ID = null; // Token
    this._attribute_assignment_clause = null; // Attribute_assignment_clauseContext
    return this;
}

Attribute_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_assignmentContext.prototype.constructor = Attribute_assignmentContext;

Attribute_assignmentContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Attribute_assignmentContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Attribute_assignmentContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Attribute_assignmentContext.prototype.value_expr = function() {
    return this.getTypedRuleContext(Value_exprContext,0);
};

Attribute_assignmentContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Attribute_assignmentContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Attribute_assignmentContext.prototype.attribute_assignment_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribute_assignment_clauseContext);
    } else {
        return this.getTypedRuleContext(Attribute_assignment_clauseContext,i);
    }
};

Attribute_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttribute_assignment(this);
	}
};

Attribute_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttribute_assignment(this);
	}
};




ToscaParser.Attribute_assignmentContext = Attribute_assignmentContext;

ToscaParser.prototype.attribute_assignment = function() {

    var localctx = new Attribute_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ToscaParser.RULE_attribute_assignment);
    var _la = 0; // Token type
    try {
        this.state = 1353;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1328;
            this.match(ToscaParser.ID);
            this.state = 1329;
            this.match(ToscaParser.COLON);
            this.state = 1330;
            this.value();
            this.state = 1331;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1333;
            this.match(ToscaParser.ID);
            this.state = 1334;
            this.match(ToscaParser.COLON);
            this.state = 1335;
            this.value_expr();
            this.state = 1336;
            this.match(ToscaParser.NEWLINE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1338;
            localctx._ID = this.match(ToscaParser.ID);
            this.state = 1339;
            this.match(ToscaParser.COLON);
            this.state = 1340;
            this.match(ToscaParser.NEWLINE);
            this.state = 1341;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this);
                   u.mandatory = ['value']; u.label = (localctx._ID===null ? null : localctx._ID.text); 
            this.state = 1346; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1343;
                localctx._attribute_assignment_clause = this.attribute_assignment_clause();
                u.add(localctx._attribute_assignment_clause)
                this.state = 1348; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.DESCRIPTION || _la===ToscaParser.VALUE);
            this.state = 1350;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_assignments;
    return this;
}

Capability_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_assignmentsContext.prototype.constructor = Capability_assignmentsContext;

Capability_assignmentsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capability_assignmentsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capability_assignmentsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capability_assignmentsContext.prototype.capability_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_assignmentContext);
    } else {
        return this.getTypedRuleContext(Capability_assignmentContext,i);
    }
};

Capability_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_assignments(this);
	}
};

Capability_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_assignments(this);
	}
};




ToscaParser.Capability_assignmentsContext = Capability_assignmentsContext;

ToscaParser.prototype.capability_assignments = function() {

    var localctx = new Capability_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ToscaParser.RULE_capability_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1355;
        this.match(ToscaParser.CAPABILITIES);
        this.state = 1356;
        this.match(ToscaParser.COLON);
        this.state = 1357;
        this.match(ToscaParser.NEWLINE);
        this.state = 1358;
        this.match(ToscaParser.INDENT);
        this.state = 1360; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1359;
            this.capability_assignment();
            this.state = 1362; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1364;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_assignment;
    this._ID = null; // Token
    this._capability_assignment_clause = null; // Capability_assignment_clauseContext
    return this;
}

Capability_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_assignmentContext.prototype.constructor = Capability_assignmentContext;

Capability_assignmentContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Capability_assignmentContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capability_assignmentContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capability_assignmentContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capability_assignmentContext.prototype.capability_assignment_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_assignment_clauseContext);
    } else {
        return this.getTypedRuleContext(Capability_assignment_clauseContext,i);
    }
};

Capability_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_assignment(this);
	}
};

Capability_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_assignment(this);
	}
};




ToscaParser.Capability_assignmentContext = Capability_assignmentContext;

ToscaParser.prototype.capability_assignment = function() {

    var localctx = new Capability_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ToscaParser.RULE_capability_assignment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1366;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1367;
        this.match(ToscaParser.COLON);
        this.state = 1368;
        this.match(ToscaParser.NEWLINE);
        this.state = 1369;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text); 
        this.state = 1374; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1371;
            localctx._capability_assignment_clause = this.capability_assignment_clause();
            u.add(localctx._capability_assignment_clause)
            this.state = 1376; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.PROPERTIES || _la===ToscaParser.ATTRIBUTES);
        this.state = 1378;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_assignment_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_assignment_clause;
    return this;
}

Capability_assignment_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_assignment_clauseContext.prototype.constructor = Capability_assignment_clauseContext;

Capability_assignment_clauseContext.prototype.property_assignments = function() {
    return this.getTypedRuleContext(Property_assignmentsContext,0);
};

Capability_assignment_clauseContext.prototype.attribute_assignments = function() {
    return this.getTypedRuleContext(Attribute_assignmentsContext,0);
};

Capability_assignment_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_assignment_clause(this);
	}
};

Capability_assignment_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_assignment_clause(this);
	}
};




ToscaParser.Capability_assignment_clauseContext = Capability_assignment_clauseContext;

ToscaParser.prototype.capability_assignment_clause = function() {

    var localctx = new Capability_assignment_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ToscaParser.RULE_capability_assignment_clause);
    try {
        this.state = 1383;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 1);
            this.state = 1381;
            this.property_assignments();
            break;
        case ToscaParser.ATTRIBUTES:
            this.enterOuterAlt(localctx, 2);
            this.state = 1382;
            this.attribute_assignments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribute_assignment_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_attribute_assignment_clause;
    return this;
}

Attribute_assignment_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribute_assignment_clauseContext.prototype.constructor = Attribute_assignment_clauseContext;

Attribute_assignment_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Attribute_assignment_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Attribute_assignment_clauseContext.prototype.value_expr = function() {
    return this.getTypedRuleContext(Value_exprContext,0);
};

Attribute_assignment_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAttribute_assignment_clause(this);
	}
};

Attribute_assignment_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAttribute_assignment_clause(this);
	}
};




ToscaParser.Attribute_assignment_clauseContext = Attribute_assignment_clauseContext;

ToscaParser.prototype.attribute_assignment_clause = function() {

    var localctx = new Attribute_assignment_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ToscaParser.RULE_attribute_assignment_clause);
    try {
        this.state = 1392;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1385;
            this.descr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1386;
            this.match(ToscaParser.VALUE);
            this.state = 1387;
            this.match(ToscaParser.COLON);
            this.state = 1388;
            this.value();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1389;
            this.match(ToscaParser.VALUE);
            this.state = 1390;
            this.match(ToscaParser.COLON);
            this.state = 1391;
            this.value_expr();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InputsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_inputs;
    return this;
}

InputsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InputsContext.prototype.constructor = InputsContext;

InputsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

InputsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

InputsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

InputsContext.prototype.properties = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertiesContext);
    } else {
        return this.getTypedRuleContext(PropertiesContext,i);
    }
};

InputsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInputs(this);
	}
};

InputsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInputs(this);
	}
};




ToscaParser.InputsContext = InputsContext;

ToscaParser.prototype.inputs = function() {

    var localctx = new InputsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ToscaParser.RULE_inputs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1394;
        this.match(ToscaParser.INPUTS);
        this.state = 1395;
        this.match(ToscaParser.COLON);
        this.state = 1396;
        this.match(ToscaParser.NEWLINE);
        this.state = 1397;
        this.match(ToscaParser.INDENT);
        this.state = 1399; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1398;
            this.properties();
            this.state = 1401; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.PROPERTIES);
        this.state = 1403;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Input_assignmentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_input_assignments;
    return this;
}

Input_assignmentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_assignmentsContext.prototype.constructor = Input_assignmentsContext;

Input_assignmentsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Input_assignmentsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Input_assignmentsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Input_assignmentsContext.prototype.property_assignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Property_assignmentContext);
    } else {
        return this.getTypedRuleContext(Property_assignmentContext,i);
    }
};

Input_assignmentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInput_assignments(this);
	}
};

Input_assignmentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInput_assignments(this);
	}
};




ToscaParser.Input_assignmentsContext = Input_assignmentsContext;

ToscaParser.prototype.input_assignments = function() {

    var localctx = new Input_assignmentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ToscaParser.RULE_input_assignments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1405;
        this.match(ToscaParser.INPUTS);
        this.state = 1406;
        this.match(ToscaParser.COLON);
        this.state = 1407;
        this.match(ToscaParser.NEWLINE);
        this.state = 1408;
        this.match(ToscaParser.INDENT);
        this.state = 1410; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1409;
            this.property_assignment();
            this.state = 1412; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1414;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Input_parametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_input_parameters;
    return this;
}

Input_parametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_parametersContext.prototype.constructor = Input_parametersContext;

Input_parametersContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Input_parametersContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Input_parametersContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Input_parametersContext.prototype.input_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_parameterContext);
    } else {
        return this.getTypedRuleContext(Input_parameterContext,i);
    }
};

Input_parametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInput_parameters(this);
	}
};

Input_parametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInput_parameters(this);
	}
};




ToscaParser.Input_parametersContext = Input_parametersContext;

ToscaParser.prototype.input_parameters = function() {

    var localctx = new Input_parametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ToscaParser.RULE_input_parameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1416;
        this.match(ToscaParser.INPUTS);
        this.state = 1417;
        this.match(ToscaParser.COLON);
        this.state = 1418;
        this.match(ToscaParser.NEWLINE);
        this.state = 1419;
        this.match(ToscaParser.INDENT);
        this.state = 1421; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1420;
            this.input_parameter();
            this.state = 1423; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__5);
        this.state = 1425;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Input_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_input_parameter;
    this._ID = null; // Token
    this._input_parameter_clause = null; // Input_parameter_clauseContext
    return this;
}

Input_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_parameterContext.prototype.constructor = Input_parameterContext;

Input_parameterContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Input_parameterContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Input_parameterContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Input_parameterContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Input_parameterContext.prototype.input_parameter_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Input_parameter_clauseContext);
    } else {
        return this.getTypedRuleContext(Input_parameter_clauseContext,i);
    }
};

Input_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInput_parameter(this);
	}
};

Input_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInput_parameter(this);
	}
};




ToscaParser.Input_parameterContext = Input_parameterContext;

ToscaParser.prototype.input_parameter = function() {

    var localctx = new Input_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ToscaParser.RULE_input_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1427;
        this.match(ToscaParser.T__5);
        this.state = 1428;
        this.match(ToscaParser.COLON);
        this.state = 1429;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1430;
        this.match(ToscaParser.NEWLINE);
         let u = new UnorderedClauses(this);
               u.mandatory = ['type']; u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 1432;
        this.match(ToscaParser.INDENT);
        this.state = 1436; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1433;
            localctx._input_parameter_clause = this.input_parameter_clause();
            u.add(localctx._input_parameter_clause) 
            this.state = 1438; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.REQUIRED - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)))) !== 0) || _la===ToscaParser.VALUE || _la===ToscaParser.ENTRY_SCHEMA);
        this.state = 1440;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Input_parameter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_input_parameter_clause;
    return this;
}

Input_parameter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Input_parameter_clauseContext.prototype.constructor = Input_parameter_clauseContext;

Input_parameter_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Input_parameter_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Input_parameter_clauseContext.prototype.BASETYPE_NAMES = function() {
    return this.getToken(ToscaParser.BASETYPE_NAMES, 0);
};

Input_parameter_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Input_parameter_clauseContext.prototype.constraints = function() {
    return this.getTypedRuleContext(ConstraintsContext,0);
};

Input_parameter_clauseContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

Input_parameter_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Input_parameter_clauseContext.prototype.entry_decl = function() {
    return this.getTypedRuleContext(Entry_declContext,0);
};

Input_parameter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInput_parameter_clause(this);
	}
};

Input_parameter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInput_parameter_clause(this);
	}
};




ToscaParser.Input_parameter_clauseContext = Input_parameter_clauseContext;

ToscaParser.prototype.input_parameter_clause = function() {

    var localctx = new Input_parameter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ToscaParser.RULE_input_parameter_clause);
    var _la = 0; // Token type
    try {
        this.state = 1466;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1443;
            this.match(ToscaParser.TYPE);
            this.state = 1444;
            this.match(ToscaParser.COLON);
            this.state = 1445;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.BASETYPE_NAMES || _la===ToscaParser.ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1446;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1447;
            this.descr();
            break;
        case ToscaParser.CONSTRAINTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 1448;
            this.constraints();
            break;
        case ToscaParser.REQUIRED:
            this.enterOuterAlt(localctx, 4);
            this.state = 1449;
            this.match(ToscaParser.REQUIRED);
            this.state = 1450;
            this.match(ToscaParser.COLON);
            this.state = 1451;
            this.bool();
            this.state = 1452;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DEFAULT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1454;
            this.match(ToscaParser.DEFAULT);
            this.state = 1455;
            this.match(ToscaParser.COLON);
            this.state = 1456;
            this.value();
            this.state = 1457;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.STATUS:
            this.enterOuterAlt(localctx, 6);
            this.state = 1459;
            this.match(ToscaParser.STATUS);
            this.state = 1460;
            this.match(ToscaParser.COLON);
            this.state = 1461;
            _la = this._input.LA(1);
            if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ToscaParser.SUPPORTED - 30)) | (1 << (ToscaParser.UNSUPPORTED - 30)) | (1 << (ToscaParser.EXPERIMENTAL - 30)) | (1 << (ToscaParser.DEPRECATED - 30)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ToscaParser.ENTRY_SCHEMA:
            this.enterOuterAlt(localctx, 7);
            this.state = 1462;
            this.entry_decl();
            break;
        case ToscaParser.VALUE:
            this.enterOuterAlt(localctx, 8);
            this.state = 1463;
            this.match(ToscaParser.VALUE);
            this.state = 1464;
            this.match(ToscaParser.COLON);
            this.state = 1465;
            this.value();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Output_parametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_output_parameters;
    return this;
}

Output_parametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_parametersContext.prototype.constructor = Output_parametersContext;

Output_parametersContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Output_parametersContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Output_parametersContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Output_parametersContext.prototype.output_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Output_parameterContext);
    } else {
        return this.getTypedRuleContext(Output_parameterContext,i);
    }
};

Output_parametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterOutput_parameters(this);
	}
};

Output_parametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitOutput_parameters(this);
	}
};




ToscaParser.Output_parametersContext = Output_parametersContext;

ToscaParser.prototype.output_parameters = function() {

    var localctx = new Output_parametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ToscaParser.RULE_output_parameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1468;
        this.match(ToscaParser.INPUTS);
        this.state = 1469;
        this.match(ToscaParser.COLON);
        this.state = 1470;
        this.match(ToscaParser.NEWLINE);
        this.state = 1471;
        this.match(ToscaParser.INDENT);
        this.state = 1473; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1472;
            this.output_parameter();
            this.state = 1475; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__5);
        this.state = 1477;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Output_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_output_parameter;
    this._ID = null; // Token
    this._output_parameter_clause = null; // Output_parameter_clauseContext
    return this;
}

Output_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_parameterContext.prototype.constructor = Output_parameterContext;

Output_parameterContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Output_parameterContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Output_parameterContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Output_parameterContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Output_parameterContext.prototype.output_parameter_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Output_parameter_clauseContext);
    } else {
        return this.getTypedRuleContext(Output_parameter_clauseContext,i);
    }
};

Output_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterOutput_parameter(this);
	}
};

Output_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitOutput_parameter(this);
	}
};




ToscaParser.Output_parameterContext = Output_parameterContext;

ToscaParser.prototype.output_parameter = function() {

    var localctx = new Output_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ToscaParser.RULE_output_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1479;
        this.match(ToscaParser.T__5);
        this.state = 1480;
        this.match(ToscaParser.COLON);
        this.state = 1481;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1482;
        this.match(ToscaParser.NEWLINE);
         let u = new UnorderedClauses(this);
               u.mandatory = ['type']; u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 1484;
        this.match(ToscaParser.INDENT);
        this.state = 1488; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1485;
            localctx._output_parameter_clause = this.output_parameter_clause();
            u.add(localctx._output_parameter_clause) 
            this.state = 1490; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.REQUIRED - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)))) !== 0) || _la===ToscaParser.VALUE || _la===ToscaParser.ENTRY_SCHEMA);
        this.state = 1492;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Output_parameter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_output_parameter_clause;
    return this;
}

Output_parameter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_parameter_clauseContext.prototype.constructor = Output_parameter_clauseContext;

Output_parameter_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Output_parameter_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Output_parameter_clauseContext.prototype.BASETYPE_NAMES = function() {
    return this.getToken(ToscaParser.BASETYPE_NAMES, 0);
};

Output_parameter_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Output_parameter_clauseContext.prototype.constraints = function() {
    return this.getTypedRuleContext(ConstraintsContext,0);
};

Output_parameter_clauseContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

Output_parameter_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Output_parameter_clauseContext.prototype.entry_decl = function() {
    return this.getTypedRuleContext(Entry_declContext,0);
};

Output_parameter_clauseContext.prototype.value_expr = function() {
    return this.getTypedRuleContext(Value_exprContext,0);
};

Output_parameter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterOutput_parameter_clause(this);
	}
};

Output_parameter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitOutput_parameter_clause(this);
	}
};




ToscaParser.Output_parameter_clauseContext = Output_parameter_clauseContext;

ToscaParser.prototype.output_parameter_clause = function() {

    var localctx = new Output_parameter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ToscaParser.RULE_output_parameter_clause);
    var _la = 0; // Token type
    try {
        this.state = 1521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1495;
            this.match(ToscaParser.TYPE);
            this.state = 1496;
            this.match(ToscaParser.COLON);
            this.state = 1497;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.BASETYPE_NAMES || _la===ToscaParser.ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1498;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1499;
            this.descr();
            break;
        case ToscaParser.CONSTRAINTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 1500;
            this.constraints();
            break;
        case ToscaParser.REQUIRED:
            this.enterOuterAlt(localctx, 4);
            this.state = 1501;
            this.match(ToscaParser.REQUIRED);
            this.state = 1502;
            this.match(ToscaParser.COLON);
            this.state = 1503;
            this.bool();
            this.state = 1504;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DEFAULT:
            this.enterOuterAlt(localctx, 5);
            this.state = 1506;
            this.match(ToscaParser.DEFAULT);
            this.state = 1507;
            this.match(ToscaParser.COLON);
            this.state = 1508;
            this.value();
            this.state = 1509;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.STATUS:
            this.enterOuterAlt(localctx, 6);
            this.state = 1511;
            this.match(ToscaParser.STATUS);
            this.state = 1512;
            this.match(ToscaParser.COLON);
            this.state = 1513;
            _la = this._input.LA(1);
            if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ToscaParser.SUPPORTED - 30)) | (1 << (ToscaParser.UNSUPPORTED - 30)) | (1 << (ToscaParser.EXPERIMENTAL - 30)) | (1 << (ToscaParser.DEPRECATED - 30)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ToscaParser.ENTRY_SCHEMA:
            this.enterOuterAlt(localctx, 7);
            this.state = 1514;
            this.entry_decl();
            break;
        case ToscaParser.VALUE:
            this.enterOuterAlt(localctx, 8);
            this.state = 1515;
            this.match(ToscaParser.VALUE);
            this.state = 1516;
            this.match(ToscaParser.COLON);
            this.state = 1519;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1517;
                this.value();
                break;

            case 2:
                this.state = 1518;
                this.value_expr();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstraintsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_constraints;
    return this;
}

ConstraintsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintsContext.prototype.constructor = ConstraintsContext;

ConstraintsContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


ConstraintsContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


ConstraintsContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


ConstraintsContext.prototype.constraint_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constraint_clauseContext);
    } else {
        return this.getTypedRuleContext(Constraint_clauseContext,i);
    }
};

ConstraintsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterConstraints(this);
	}
};

ConstraintsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitConstraints(this);
	}
};




ToscaParser.ConstraintsContext = ConstraintsContext;

ToscaParser.prototype.constraints = function() {

    var localctx = new ConstraintsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ToscaParser.RULE_constraints);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1523;
        this.match(ToscaParser.CONSTRAINTS);
        this.state = 1524;
        this.match(ToscaParser.COLON);
        this.state = 1525;
        this.match(ToscaParser.NEWLINE);
        this.state = 1526;
        this.match(ToscaParser.INDENT);
        this.state = 1533; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1527;
            this.match(ToscaParser.MINUS);
            this.state = 1528;
            this.match(ToscaParser.INDENT);
            this.state = 1529;
            this.constraint_clause();
            this.state = 1530;
            this.match(ToscaParser.NEWLINE);
            this.state = 1531;
            this.match(ToscaParser.DEDENT);
            this.state = 1535; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 1537;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constraint_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_constraint_clause;
    return this;
}

Constraint_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constraint_clauseContext.prototype.constructor = Constraint_clauseContext;

Constraint_clauseContext.prototype.size = function() {
    return this.getTypedRuleContext(SizeContext,0);
};

Constraint_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Constraint_clauseContext.prototype.range = function() {
    return this.getTypedRuleContext(RangeContext,0);
};

Constraint_clauseContext.prototype.list = function() {
    return this.getTypedRuleContext(ListContext,0);
};

Constraint_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterConstraint_clause(this);
	}
};

Constraint_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitConstraint_clause(this);
	}
};




ToscaParser.Constraint_clauseContext = Constraint_clauseContext;

ToscaParser.prototype.constraint_clause = function() {

    var localctx = new Constraint_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ToscaParser.RULE_constraint_clause);
    try {
        this.state = 1572;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.EQUAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1539;
            this.match(ToscaParser.EQUAL);
            this.state = 1540;
            this.match(ToscaParser.COLON);
            this.state = 1541;
            this.size();
            break;
        case ToscaParser.GREATER_THAN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1542;
            this.match(ToscaParser.GREATER_THAN);
            this.state = 1543;
            this.match(ToscaParser.COLON);
            this.state = 1544;
            this.value();
            break;
        case ToscaParser.GREATER_OR_EQUAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1545;
            this.match(ToscaParser.GREATER_OR_EQUAL);
            this.state = 1546;
            this.match(ToscaParser.COLON);
            this.state = 1547;
            this.value();
            break;
        case ToscaParser.LESS_THAN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1548;
            this.match(ToscaParser.LESS_THAN);
            this.state = 1549;
            this.match(ToscaParser.COLON);
            this.state = 1550;
            this.value();
            break;
        case ToscaParser.LESS_OR_EQUAL:
            this.enterOuterAlt(localctx, 5);
            this.state = 1551;
            this.match(ToscaParser.LESS_OR_EQUAL);
            this.state = 1552;
            this.match(ToscaParser.COLON);
            this.state = 1553;
            this.value();
            break;
        case ToscaParser.IN_RANGE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1554;
            this.match(ToscaParser.IN_RANGE);
            this.state = 1555;
            this.match(ToscaParser.COLON);
            this.state = 1556;
            this.range();
            break;
        case ToscaParser.VALID_VALUES:
            this.enterOuterAlt(localctx, 7);
            this.state = 1557;
            this.match(ToscaParser.VALID_VALUES);
            this.state = 1558;
            this.match(ToscaParser.COLON);
            this.state = 1559;
            this.list();
            break;
        case ToscaParser.LENGTH:
            this.enterOuterAlt(localctx, 8);
            this.state = 1560;
            this.match(ToscaParser.LENGTH);
            this.state = 1561;
            this.match(ToscaParser.COLON);
            this.state = 1562;
            this.value();
            break;
        case ToscaParser.MIN_LENGTH:
            this.enterOuterAlt(localctx, 9);
            this.state = 1563;
            this.match(ToscaParser.MIN_LENGTH);
            this.state = 1564;
            this.match(ToscaParser.COLON);
            this.state = 1565;
            this.value();
            break;
        case ToscaParser.MAX_LENGTH:
            this.enterOuterAlt(localctx, 10);
            this.state = 1566;
            this.match(ToscaParser.MAX_LENGTH);
            this.state = 1567;
            this.match(ToscaParser.COLON);
            this.state = 1568;
            this.value();
            break;
        case ToscaParser.PATTERN:
            this.enterOuterAlt(localctx, 11);
            this.state = 1569;
            this.match(ToscaParser.PATTERN);
            this.state = 1570;
            this.match(ToscaParser.COLON);
            this.state = 1571;
            this.value();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entry_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_entry_decl;
    return this;
}

Entry_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entry_declContext.prototype.constructor = Entry_declContext;

Entry_declContext.prototype.entry_detailed = function() {
    return this.getTypedRuleContext(Entry_detailedContext,0);
};

Entry_declContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Entry_declContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Entry_declContext.prototype.BASETYPE_NAMES = function() {
    return this.getToken(ToscaParser.BASETYPE_NAMES, 0);
};

Entry_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterEntry_decl(this);
	}
};

Entry_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitEntry_decl(this);
	}
};




ToscaParser.Entry_declContext = Entry_declContext;

ToscaParser.prototype.entry_decl = function() {

    var localctx = new Entry_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ToscaParser.RULE_entry_decl);
    var _la = 0; // Token type
    try {
        this.state = 1579;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1574;
            this.entry_detailed();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1575;
            this.match(ToscaParser.ENTRY_SCHEMA);
            this.state = 1576;
            this.match(ToscaParser.COLON);
            this.state = 1577;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.BASETYPE_NAMES || _la===ToscaParser.ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1578;
            this.match(ToscaParser.NEWLINE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entry_detailedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_entry_detailed;
    this._entry_clause = null; // Entry_clauseContext
    return this;
}

Entry_detailedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entry_detailedContext.prototype.constructor = Entry_detailedContext;

Entry_detailedContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Entry_detailedContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Entry_detailedContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Entry_detailedContext.prototype.entry_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Entry_clauseContext);
    } else {
        return this.getTypedRuleContext(Entry_clauseContext,i);
    }
};

Entry_detailedContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterEntry_detailed(this);
	}
};

Entry_detailedContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitEntry_detailed(this);
	}
};




ToscaParser.Entry_detailedContext = Entry_detailedContext;

ToscaParser.prototype.entry_detailed = function() {

    var localctx = new Entry_detailedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ToscaParser.RULE_entry_detailed);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1581;
        this.match(ToscaParser.ENTRY_SCHEMA);
        this.state = 1582;
        this.match(ToscaParser.COLON);
        this.state = 1583;
        this.match(ToscaParser.NEWLINE);
         let u = new UnorderedClauses(this);
               u.mandatory = ['type'] 
        this.state = 1585;
        this.match(ToscaParser.INDENT);
        this.state = 1589; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1586;
            localctx._entry_clause = this.entry_clause();
            u.add(localctx._entry_clause) 
            this.state = 1591; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)))) !== 0) || _la===ToscaParser.ENTRY_SCHEMA);
        this.state = 1593;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entry_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_entry_clause;
    return this;
}

Entry_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entry_clauseContext.prototype.constructor = Entry_clauseContext;

Entry_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Entry_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Entry_clauseContext.prototype.BASETYPE_NAMES = function() {
    return this.getToken(ToscaParser.BASETYPE_NAMES, 0);
};

Entry_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Entry_clauseContext.prototype.entry_decl = function() {
    return this.getTypedRuleContext(Entry_declContext,0);
};

Entry_clauseContext.prototype.constraints = function() {
    return this.getTypedRuleContext(ConstraintsContext,0);
};

Entry_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterEntry_clause(this);
	}
};

Entry_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitEntry_clause(this);
	}
};




ToscaParser.Entry_clauseContext = Entry_clauseContext;

ToscaParser.prototype.entry_clause = function() {

    var localctx = new Entry_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ToscaParser.RULE_entry_clause);
    var _la = 0; // Token type
    try {
        this.state = 1603;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1596;
            this.match(ToscaParser.TYPE);
            this.state = 1597;
            this.match(ToscaParser.COLON);
            this.state = 1598;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.BASETYPE_NAMES || _la===ToscaParser.ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1599;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1600;
            this.descr();
            break;
        case ToscaParser.ENTRY_SCHEMA:
            this.enterOuterAlt(localctx, 3);
            this.state = 1601;
            this.entry_decl();
            break;
        case ToscaParser.CONSTRAINTS:
            this.enterOuterAlt(localctx, 4);
            this.state = 1602;
            this.constraints();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_import_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_file_import_clause;
    return this;
}

File_import_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_import_clauseContext.prototype.constructor = File_import_clauseContext;

File_import_clauseContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

File_import_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

File_import_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

File_import_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFile_import_clause(this);
	}
};

File_import_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFile_import_clause(this);
	}
};




ToscaParser.File_import_clauseContext = File_import_clauseContext;

ToscaParser.prototype.file_import_clause = function() {

    var localctx = new File_import_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ToscaParser.RULE_file_import_clause);
    try {
        this.state = 1623;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.FILE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1605;
            this.match(ToscaParser.FILE);
            this.state = 1606;
            this.match(ToscaParser.COLON);
            this.state = 1607;
            this.short_str();
            this.state = 1608;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.REPOSITORY:
            this.enterOuterAlt(localctx, 2);
            this.state = 1610;
            this.match(ToscaParser.REPOSITORY);
            this.state = 1611;
            this.match(ToscaParser.COLON);
            this.state = 1612;
            this.match(ToscaParser.ID);
            this.state = 1613;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.NAMESPACE_PREFIX:
            this.enterOuterAlt(localctx, 3);
            this.state = 1614;
            this.match(ToscaParser.NAMESPACE_PREFIX);
            this.state = 1615;
            this.match(ToscaParser.COLON);
            this.state = 1616;
            this.match(ToscaParser.ID);
            this.state = 1617;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.NAMESPACE_URI:
            this.enterOuterAlt(localctx, 4);
            this.state = 1618;
            this.match(ToscaParser.NAMESPACE_URI);
            this.state = 1619;
            this.match(ToscaParser.COLON);
            this.state = 1620;
            this.short_str();
            this.state = 1621;
            this.match(ToscaParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entity_metadataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_entity_metadata;
    this._entity_metadata_clause = null; // Entity_metadata_clauseContext
    return this;
}

Entity_metadataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_metadataContext.prototype.constructor = Entity_metadataContext;

Entity_metadataContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Entity_metadataContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Entity_metadataContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Entity_metadataContext.prototype.entity_metadata_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Entity_metadata_clauseContext);
    } else {
        return this.getTypedRuleContext(Entity_metadata_clauseContext,i);
    }
};

Entity_metadataContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterEntity_metadata(this);
	}
};

Entity_metadataContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitEntity_metadata(this);
	}
};




ToscaParser.Entity_metadataContext = Entity_metadataContext;

ToscaParser.prototype.entity_metadata = function() {

    var localctx = new Entity_metadataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ToscaParser.RULE_entity_metadata);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1625;
        this.match(ToscaParser.METADATA);
        this.state = 1626;
        this.match(ToscaParser.COLON);
        this.state = 1627;
        this.match(ToscaParser.NEWLINE);
         let u = new UnorderedClauses(this); u.label = 'metadata' 
        this.state = 1629;
        this.match(ToscaParser.INDENT);
        this.state = 1633; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1630;
            localctx._entity_metadata_clause = this.entity_metadata_clause();
            u.add(localctx._entity_metadata_clause) 
            this.state = 1635; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1637;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entity_metadata_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_entity_metadata_clause;
    return this;
}

Entity_metadata_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_metadata_clauseContext.prototype.constructor = Entity_metadata_clauseContext;

Entity_metadata_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Entity_metadata_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Entity_metadata_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Entity_metadata_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterEntity_metadata_clause(this);
	}
};

Entity_metadata_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitEntity_metadata_clause(this);
	}
};




ToscaParser.Entity_metadata_clauseContext = Entity_metadata_clauseContext;

ToscaParser.prototype.entity_metadata_clause = function() {

    var localctx = new Entity_metadata_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ToscaParser.RULE_entity_metadata_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1640;
        this.match(ToscaParser.ID);
        this.state = 1641;
        this.match(ToscaParser.COLON);
        this.state = 1642;
        this.value();
        this.state = 1643;
        this.match(ToscaParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entity_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_entity_clause;
    return this;
}

Entity_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_clauseContext.prototype.constructor = Entity_clauseContext;

Entity_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Entity_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Entity_clauseContext.prototype.VERSION = function() {
    return this.getToken(ToscaParser.VERSION, 0);
};

Entity_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Entity_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Entity_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterEntity_clause(this);
	}
};

Entity_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitEntity_clause(this);
	}
};




ToscaParser.Entity_clauseContext = Entity_clauseContext;

ToscaParser.prototype.entity_clause = function() {

    var localctx = new Entity_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ToscaParser.RULE_entity_clause);
    try {
        this.state = 1655;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.DERIVED_FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1645;
            this.match(ToscaParser.DERIVED_FROM);
            this.state = 1646;
            this.match(ToscaParser.COLON);
            this.state = 1647;
            this.match(ToscaParser.ID);
            this.state = 1648;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.LVERSION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1649;
            this.match(ToscaParser.LVERSION);
            this.state = 1650;
            this.match(ToscaParser.COLON);
            this.state = 1651;
            this.match(ToscaParser.VERSION);
            this.state = 1652;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.METADATA:
            this.enterOuterAlt(localctx, 3);
            this.state = 1653;
            this.entity_metadata();
            break;
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 4);
            this.state = 1654;
            this.descr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_types;
    return this;
}

Node_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_typesContext.prototype.constructor = Node_typesContext;

Node_typesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Node_typesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Node_typesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Node_typesContext.prototype.node_types = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Node_typesContext);
    } else {
        return this.getTypedRuleContext(Node_typesContext,i);
    }
};

Node_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_types(this);
	}
};

Node_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_types(this);
	}
};




ToscaParser.Node_typesContext = Node_typesContext;

ToscaParser.prototype.node_types = function() {

    var localctx = new Node_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ToscaParser.RULE_node_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1657;
        this.match(ToscaParser.NODE_TYPES);
        this.state = 1658;
        this.match(ToscaParser.COLON);
        this.state = 1659;
        this.match(ToscaParser.NEWLINE);
        this.state = 1660;
        this.match(ToscaParser.INDENT);
        this.state = 1662; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1661;
            this.node_types();
            this.state = 1664; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.NODE_TYPES);
        this.state = 1666;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_type;
    this._ID = null; // Token
    this._node_type_clause = null; // Node_type_clauseContext
    return this;
}

Node_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_typeContext.prototype.constructor = Node_typeContext;

Node_typeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Node_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Node_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Node_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Node_typeContext.prototype.node_type_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Node_type_clauseContext);
    } else {
        return this.getTypedRuleContext(Node_type_clauseContext,i);
    }
};

Node_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_type(this);
	}
};

Node_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_type(this);
	}
};




ToscaParser.Node_typeContext = Node_typeContext;

ToscaParser.prototype.node_type = function() {

    var localctx = new Node_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ToscaParser.RULE_node_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1668;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1669;
        this.match(ToscaParser.COLON);
        this.state = 1670;
        this.match(ToscaParser.NEWLINE);
        this.state = 1671;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 1676; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1673;
            localctx._node_type_clause = this.node_type_clause();
            u.add(localctx._node_type_clause) 
            this.state = 1678; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__4 || _la===ToscaParser.PROPERTIES || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (ToscaParser.ATTRIBUTES - 132)) | (1 << (ToscaParser.INTERFACES - 132)) | (1 << (ToscaParser.CAPABILITIES - 132)) | (1 << (ToscaParser.REQUIREMENTS - 132)))) !== 0) || _la===ToscaParser.WORKFLOWS);
        this.state = 1680;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_type_clause;
    return this;
}

Node_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_type_clauseContext.prototype.constructor = Node_type_clauseContext;

Node_type_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Node_type_clauseContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Node_type_clauseContext.prototype.capability_defs = function() {
    return this.getTypedRuleContext(Capability_defsContext,0);
};

Node_type_clauseContext.prototype.requirement_defs = function() {
    return this.getTypedRuleContext(Requirement_defsContext,0);
};

Node_type_clauseContext.prototype.interface_defs = function() {
    return this.getTypedRuleContext(Interface_defsContext,0);
};

Node_type_clauseContext.prototype.artifact_defs = function() {
    return this.getTypedRuleContext(Artifact_defsContext,0);
};

Node_type_clauseContext.prototype.declarative_node_workflows = function() {
    return this.getTypedRuleContext(Declarative_node_workflowsContext,0);
};

Node_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_type_clause(this);
	}
};

Node_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_type_clause(this);
	}
};




ToscaParser.Node_type_clauseContext = Node_type_clauseContext;

ToscaParser.prototype.node_type_clause = function() {

    var localctx = new Node_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ToscaParser.RULE_node_type_clause);
    try {
        this.state = 1690;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 1);
            this.state = 1683;
            this.properties();
            break;
        case ToscaParser.ATTRIBUTES:
            this.enterOuterAlt(localctx, 2);
            this.state = 1684;
            this.attributes();
            break;
        case ToscaParser.CAPABILITIES:
            this.enterOuterAlt(localctx, 3);
            this.state = 1685;
            this.capability_defs();
            break;
        case ToscaParser.REQUIREMENTS:
            this.enterOuterAlt(localctx, 4);
            this.state = 1686;
            this.requirement_defs();
            break;
        case ToscaParser.INTERFACES:
            this.enterOuterAlt(localctx, 5);
            this.state = 1687;
            this.interface_defs();
            break;
        case ToscaParser.T__4:
            this.enterOuterAlt(localctx, 6);
            this.state = 1688;
            this.artifact_defs();
            break;
        case ToscaParser.WORKFLOWS:
            this.enterOuterAlt(localctx, 7);
            this.state = 1689;
            this.declarative_node_workflows();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relationship_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_relationship_types;
    return this;
}

Relationship_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relationship_typesContext.prototype.constructor = Relationship_typesContext;

Relationship_typesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Relationship_typesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Relationship_typesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Relationship_typesContext.prototype.relationship_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Relationship_typeContext);
    } else {
        return this.getTypedRuleContext(Relationship_typeContext,i);
    }
};

Relationship_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRelationship_types(this);
	}
};

Relationship_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRelationship_types(this);
	}
};




ToscaParser.Relationship_typesContext = Relationship_typesContext;

ToscaParser.prototype.relationship_types = function() {

    var localctx = new Relationship_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ToscaParser.RULE_relationship_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1692;
        this.match(ToscaParser.RELATIONSHIP_TYPES);
        this.state = 1693;
        this.match(ToscaParser.COLON);
        this.state = 1694;
        this.match(ToscaParser.NEWLINE);
        this.state = 1695;
        this.match(ToscaParser.INDENT);
        this.state = 1697; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1696;
            this.relationship_type();
            this.state = 1699; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1701;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relationship_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_relationship_type;
    this._ID = null; // Token
    this._relationship_type_clause = null; // Relationship_type_clauseContext
    return this;
}

Relationship_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relationship_typeContext.prototype.constructor = Relationship_typeContext;

Relationship_typeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Relationship_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Relationship_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Relationship_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Relationship_typeContext.prototype.relationship_type_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Relationship_type_clauseContext);
    } else {
        return this.getTypedRuleContext(Relationship_type_clauseContext,i);
    }
};

Relationship_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRelationship_type(this);
	}
};

Relationship_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRelationship_type(this);
	}
};




ToscaParser.Relationship_typeContext = Relationship_typeContext;

ToscaParser.prototype.relationship_type = function() {

    var localctx = new Relationship_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ToscaParser.RULE_relationship_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1703;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1704;
        this.match(ToscaParser.COLON);
        this.state = 1705;
        this.match(ToscaParser.NEWLINE);
        this.state = 1706;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 1711; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1708;
            localctx._relationship_type_clause = this.relationship_type_clause();
            u.add(localctx._relationship_type_clause) 
            this.state = 1713; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.PROPERTIES || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (ToscaParser.ATTRIBUTES - 132)) | (1 << (ToscaParser.VALID_TARGET_TYPES - 132)) | (1 << (ToscaParser.INTERFACES - 132)))) !== 0) || _la===ToscaParser.WORKFLOWS);
        this.state = 1715;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relationship_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_relationship_type_clause;
    return this;
}

Relationship_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relationship_type_clauseContext.prototype.constructor = Relationship_type_clauseContext;

Relationship_type_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Relationship_type_clauseContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Relationship_type_clauseContext.prototype.interface_defs = function() {
    return this.getTypedRuleContext(Interface_defsContext,0);
};

Relationship_type_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Relationship_type_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Relationship_type_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Relationship_type_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Relationship_type_clauseContext.prototype.declarative_rel_workflows = function() {
    return this.getTypedRuleContext(Declarative_rel_workflowsContext,0);
};

Relationship_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRelationship_type_clause(this);
	}
};

Relationship_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRelationship_type_clause(this);
	}
};




ToscaParser.Relationship_type_clauseContext = Relationship_type_clauseContext;

ToscaParser.prototype.relationship_type_clause = function() {

    var localctx = new Relationship_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ToscaParser.RULE_relationship_type_clause);
    var _la = 0; // Token type
    try {
        this.state = 1749;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1718;
            this.properties();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1719;
            this.attributes();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1720;
            this.interface_defs();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1721;
            this.match(ToscaParser.VALID_TARGET_TYPES);
            this.state = 1722;
            this.match(ToscaParser.COLON);
            this.state = 1723;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 1724;
            this.match(ToscaParser.ID);
            this.state = 1729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 1725;
                this.match(ToscaParser.COMMA);
                this.state = 1726;
                this.match(ToscaParser.ID);
                this.state = 1731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1732;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 1733;
            this.match(ToscaParser.NEWLINE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1734;
            this.match(ToscaParser.VALID_TARGET_TYPES);
            this.state = 1735;
            this.match(ToscaParser.COLON);
            this.state = 1736;
            this.match(ToscaParser.NEWLINE);
            this.state = 1737;
            this.match(ToscaParser.INDENT);
            this.state = 1743; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1738;
                this.match(ToscaParser.MINUS);
                this.state = 1739;
                this.match(ToscaParser.INDENT);
                this.state = 1740;
                this.match(ToscaParser.ID);
                this.state = 1741;
                this.match(ToscaParser.NEWLINE);
                this.state = 1742;
                this.match(ToscaParser.DEDENT);
                this.state = 1745; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 1747;
            this.match(ToscaParser.DEDENT);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1748;
            this.declarative_rel_workflows();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Artifact_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_artifact_types;
    return this;
}

Artifact_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Artifact_typesContext.prototype.constructor = Artifact_typesContext;

Artifact_typesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Artifact_typesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Artifact_typesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Artifact_typesContext.prototype.artifact_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Artifact_typeContext);
    } else {
        return this.getTypedRuleContext(Artifact_typeContext,i);
    }
};

Artifact_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterArtifact_types(this);
	}
};

Artifact_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitArtifact_types(this);
	}
};




ToscaParser.Artifact_typesContext = Artifact_typesContext;

ToscaParser.prototype.artifact_types = function() {

    var localctx = new Artifact_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ToscaParser.RULE_artifact_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1751;
        this.match(ToscaParser.ARTIFACT_TYPES);
        this.state = 1752;
        this.match(ToscaParser.COLON);
        this.state = 1753;
        this.match(ToscaParser.NEWLINE);
        this.state = 1754;
        this.match(ToscaParser.INDENT);
        this.state = 1756; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1755;
            this.artifact_type();
            this.state = 1758; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1760;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Artifact_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_artifact_type;
    this._ID = null; // Token
    this._artifact_type_clause = null; // Artifact_type_clauseContext
    return this;
}

Artifact_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Artifact_typeContext.prototype.constructor = Artifact_typeContext;

Artifact_typeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Artifact_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Artifact_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Artifact_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Artifact_typeContext.prototype.artifact_type_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Artifact_type_clauseContext);
    } else {
        return this.getTypedRuleContext(Artifact_type_clauseContext,i);
    }
};

Artifact_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterArtifact_type(this);
	}
};

Artifact_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitArtifact_type(this);
	}
};




ToscaParser.Artifact_typeContext = Artifact_typeContext;

ToscaParser.prototype.artifact_type = function() {

    var localctx = new Artifact_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ToscaParser.RULE_artifact_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1762;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1763;
        this.match(ToscaParser.COLON);
        this.state = 1764;
        this.match(ToscaParser.NEWLINE);
        this.state = 1765;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 1770; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1767;
            localctx._artifact_type_clause = this.artifact_type_clause();
            u.add(localctx._artifact_type_clause)
            this.state = 1772; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ToscaParser.LVERSION - 80)) | (1 << (ToscaParser.METADATA - 80)) | (1 << (ToscaParser.DERIVED_FROM - 80)) | (1 << (ToscaParser.MIME_TYPE - 80)) | (1 << (ToscaParser.FILE_EXT - 80)) | (1 << (ToscaParser.PROPERTIES - 80)) | (1 << (ToscaParser.DESCRIPTION - 80)))) !== 0));
        this.state = 1774;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Artifact_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_artifact_type_clause;
    return this;
}

Artifact_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Artifact_type_clauseContext.prototype.constructor = Artifact_type_clauseContext;

Artifact_type_clauseContext.prototype.entity_clause = function() {
    return this.getTypedRuleContext(Entity_clauseContext,0);
};

Artifact_type_clauseContext.prototype.short_str = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Short_strContext);
    } else {
        return this.getTypedRuleContext(Short_strContext,i);
    }
};

Artifact_type_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Artifact_type_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Artifact_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterArtifact_type_clause(this);
	}
};

Artifact_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitArtifact_type_clause(this);
	}
};




ToscaParser.Artifact_type_clauseContext = Artifact_type_clauseContext;

ToscaParser.prototype.artifact_type_clause = function() {

    var localctx = new Artifact_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ToscaParser.RULE_artifact_type_clause);
    var _la = 0; // Token type
    try {
        this.state = 1798;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.LVERSION:
        case ToscaParser.METADATA:
        case ToscaParser.DERIVED_FROM:
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 1777;
            this.entity_clause();
            break;
        case ToscaParser.FILE_EXT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1778;
            this.match(ToscaParser.FILE_EXT);
            this.state = 1779;
            this.match(ToscaParser.COLON);
            this.state = 1780;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 1781;
            this.short_str();
            this.state = 1786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 1782;
                this.match(ToscaParser.COMMA);
                this.state = 1783;
                this.short_str();
                this.state = 1788;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1789;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 1790;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.MIME_TYPE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1792;
            this.match(ToscaParser.MIME_TYPE);
            this.state = 1793;
            this.match(ToscaParser.COLON);
            this.state = 1794;
            this.short_str();
            this.state = 1795;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 4);
            this.state = 1797;
            this.properties();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_data_types;
    return this;
}

Data_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_typesContext.prototype.constructor = Data_typesContext;

Data_typesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Data_typesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Data_typesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Data_typesContext.prototype.data_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Data_typeContext);
    } else {
        return this.getTypedRuleContext(Data_typeContext,i);
    }
};

Data_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterData_types(this);
	}
};

Data_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitData_types(this);
	}
};




ToscaParser.Data_typesContext = Data_typesContext;

ToscaParser.prototype.data_types = function() {

    var localctx = new Data_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ToscaParser.RULE_data_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1800;
        this.match(ToscaParser.DATA_TYPES);
        this.state = 1801;
        this.match(ToscaParser.COLON);
        this.state = 1802;
        this.match(ToscaParser.NEWLINE);
        this.state = 1803;
        this.match(ToscaParser.INDENT);
        this.state = 1805; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1804;
            this.data_type();
            this.state = 1807; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1809;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_data_type;
    this._ID = null; // Token
    this._data_type_clause = null; // Data_type_clauseContext
    return this;
}

Data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_typeContext.prototype.constructor = Data_typeContext;

Data_typeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Data_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Data_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Data_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Data_typeContext.prototype.data_type_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Data_type_clauseContext);
    } else {
        return this.getTypedRuleContext(Data_type_clauseContext,i);
    }
};

Data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterData_type(this);
	}
};

Data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitData_type(this);
	}
};




ToscaParser.Data_typeContext = Data_typeContext;

ToscaParser.prototype.data_type = function() {

    var localctx = new Data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ToscaParser.RULE_data_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1811;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1812;
        this.match(ToscaParser.COLON);
        this.state = 1813;
        this.match(ToscaParser.NEWLINE);
        this.state = 1814;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 1819; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1816;
            localctx._data_type_clause = this.data_type_clause();
            u.add(localctx._data_type_clause)
            this.state = 1821; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ToscaParser.LVERSION - 80)) | (1 << (ToscaParser.METADATA - 80)) | (1 << (ToscaParser.DERIVED_FROM - 80)) | (1 << (ToscaParser.PROPERTIES - 80)) | (1 << (ToscaParser.DESCRIPTION - 80)))) !== 0) || _la===ToscaParser.CONSTRAINTS);
        this.state = 1823;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_data_type_clause;
    return this;
}

Data_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_type_clauseContext.prototype.constructor = Data_type_clauseContext;

Data_type_clauseContext.prototype.entity_clause = function() {
    return this.getTypedRuleContext(Entity_clauseContext,0);
};

Data_type_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Data_type_clauseContext.prototype.constraints = function() {
    return this.getTypedRuleContext(ConstraintsContext,0);
};

Data_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterData_type_clause(this);
	}
};

Data_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitData_type_clause(this);
	}
};




ToscaParser.Data_type_clauseContext = Data_type_clauseContext;

ToscaParser.prototype.data_type_clause = function() {

    var localctx = new Data_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ToscaParser.RULE_data_type_clause);
    try {
        this.state = 1829;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.LVERSION:
        case ToscaParser.METADATA:
        case ToscaParser.DERIVED_FROM:
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 1826;
            this.entity_clause();
            break;
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 2);
            this.state = 1827;
            this.properties();
            break;
        case ToscaParser.CONSTRAINTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 1828;
            this.constraints();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_types;
    return this;
}

Capability_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_typesContext.prototype.constructor = Capability_typesContext;

Capability_typesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capability_typesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capability_typesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capability_typesContext.prototype.capability_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_typeContext);
    } else {
        return this.getTypedRuleContext(Capability_typeContext,i);
    }
};

Capability_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_types(this);
	}
};

Capability_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_types(this);
	}
};




ToscaParser.Capability_typesContext = Capability_typesContext;

ToscaParser.prototype.capability_types = function() {

    var localctx = new Capability_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ToscaParser.RULE_capability_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1831;
        this.match(ToscaParser.CAPABILITY_TYPES);
        this.state = 1832;
        this.match(ToscaParser.COLON);
        this.state = 1833;
        this.match(ToscaParser.NEWLINE);
        this.state = 1834;
        this.match(ToscaParser.INDENT);
        this.state = 1836; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1835;
            this.capability_type();
            this.state = 1838; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1840;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_type;
    this._ID = null; // Token
    this._capability_type_clause = null; // Capability_type_clauseContext
    return this;
}

Capability_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_typeContext.prototype.constructor = Capability_typeContext;

Capability_typeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Capability_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capability_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capability_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capability_typeContext.prototype.capability_type_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_type_clauseContext);
    } else {
        return this.getTypedRuleContext(Capability_type_clauseContext,i);
    }
};

Capability_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_type(this);
	}
};

Capability_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_type(this);
	}
};




ToscaParser.Capability_typeContext = Capability_typeContext;

ToscaParser.prototype.capability_type = function() {

    var localctx = new Capability_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ToscaParser.RULE_capability_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1842;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 1843;
        this.match(ToscaParser.COLON);
        this.state = 1844;
        this.match(ToscaParser.NEWLINE);
        this.state = 1845;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text) 
        this.state = 1850; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1847;
            localctx._capability_type_clause = this.capability_type_clause();
            u.add(localctx._capability_type_clause)
            this.state = 1852; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ToscaParser.LVERSION - 80)) | (1 << (ToscaParser.METADATA - 80)) | (1 << (ToscaParser.DERIVED_FROM - 80)) | (1 << (ToscaParser.PROPERTIES - 80)) | (1 << (ToscaParser.DESCRIPTION - 80)))) !== 0) || _la===ToscaParser.ATTRIBUTES || _la===ToscaParser.VALID_SOURCE_TYPES);
        this.state = 1854;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_type_clause;
    return this;
}

Capability_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_type_clauseContext.prototype.constructor = Capability_type_clauseContext;

Capability_type_clauseContext.prototype.entity_clause = function() {
    return this.getTypedRuleContext(Entity_clauseContext,0);
};

Capability_type_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Capability_type_clauseContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Capability_type_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Capability_type_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Capability_type_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Capability_type_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Capability_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_type_clause(this);
	}
};

Capability_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_type_clause(this);
	}
};




ToscaParser.Capability_type_clauseContext = Capability_type_clauseContext;

ToscaParser.prototype.capability_type_clause = function() {

    var localctx = new Capability_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ToscaParser.RULE_capability_type_clause);
    var _la = 0; // Token type
    try {
        this.state = 1887;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1857;
            this.entity_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1858;
            this.properties();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1859;
            this.attributes();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1860;
            this.match(ToscaParser.VALID_SOURCE_TYPES);
            this.state = 1861;
            this.match(ToscaParser.COLON);
            this.state = 1862;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 1863;
            this.match(ToscaParser.ID);
            this.state = 1868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 1864;
                this.match(ToscaParser.COMMA);
                this.state = 1865;
                this.match(ToscaParser.ID);
                this.state = 1870;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1871;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 1872;
            this.match(ToscaParser.NEWLINE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1873;
            this.match(ToscaParser.VALID_SOURCE_TYPES);
            this.state = 1874;
            this.match(ToscaParser.COLON);
            this.state = 1875;
            this.match(ToscaParser.NEWLINE);
            this.state = 1876;
            this.match(ToscaParser.INDENT);
            this.state = 1882; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1877;
                this.match(ToscaParser.MINUS);
                this.state = 1878;
                this.match(ToscaParser.INDENT);
                this.state = 1879;
                this.match(ToscaParser.ID);
                this.state = 1880;
                this.match(ToscaParser.NEWLINE);
                this.state = 1881;
                this.match(ToscaParser.DEDENT);
                this.state = 1884; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 1886;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_defsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_defs;
    return this;
}

Capability_defsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_defsContext.prototype.constructor = Capability_defsContext;

Capability_defsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capability_defsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capability_defsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capability_defsContext.prototype.capability_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_defContext);
    } else {
        return this.getTypedRuleContext(Capability_defContext,i);
    }
};

Capability_defsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_defs(this);
	}
};

Capability_defsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_defs(this);
	}
};




ToscaParser.Capability_defsContext = Capability_defsContext;

ToscaParser.prototype.capability_defs = function() {

    var localctx = new Capability_defsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ToscaParser.RULE_capability_defs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1889;
        this.match(ToscaParser.CAPABILITIES);
        this.state = 1890;
        this.match(ToscaParser.COLON);
        this.state = 1891;
        this.match(ToscaParser.NEWLINE);
        this.state = 1892;
        this.match(ToscaParser.INDENT);
        this.state = 1894; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1893;
            this.capability_def();
            this.state = 1896; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 1898;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_def;
    this._ID = null; // Token
    this._capability_def_clause = null; // Capability_def_clauseContext
    return this;
}

Capability_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_defContext.prototype.constructor = Capability_defContext;

Capability_defContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Capability_defContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capability_defContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capability_defContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capability_defContext.prototype.capability_def_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_def_clauseContext);
    } else {
        return this.getTypedRuleContext(Capability_def_clauseContext,i);
    }
};

Capability_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_def(this);
	}
};

Capability_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_def(this);
	}
};




ToscaParser.Capability_defContext = Capability_defContext;

ToscaParser.prototype.capability_def = function() {

    var localctx = new Capability_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ToscaParser.RULE_capability_def);
    var _la = 0; // Token type
    try {
        this.state = 1919;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1900;
            this.match(ToscaParser.ID);
            this.state = 1901;
            this.match(ToscaParser.COLON);
            this.state = 1902;
            this.match(ToscaParser.ID);
            this.state = 1903;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1904;
            localctx._ID = this.match(ToscaParser.ID);
            this.state = 1905;
            this.match(ToscaParser.COLON);
            this.state = 1906;
            this.match(ToscaParser.NEWLINE);
            this.state = 1907;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this); 
                   u.mandatory = [ 'type' ]; u.label = (localctx._ID===null ? null : localctx._ID.text) 
            this.state = 1912; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1909;
                localctx._capability_def_clause = this.capability_def_clause();
                u.add(localctx._capability_def_clause)
                this.state = 1914; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (ToscaParser.PROPERTIES - 90)) | (1 << (ToscaParser.TYPE - 90)) | (1 << (ToscaParser.DESCRIPTION - 90)))) !== 0) || _la===ToscaParser.ATTRIBUTES || _la===ToscaParser.VALID_SOURCE_TYPES);
            this.state = 1916;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_def_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_def_clause;
    return this;
}

Capability_def_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_def_clauseContext.prototype.constructor = Capability_def_clauseContext;

Capability_def_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Capability_def_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Capability_def_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Capability_def_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Capability_def_clauseContext.prototype.attributes = function() {
    return this.getTypedRuleContext(AttributesContext,0);
};

Capability_def_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Capability_def_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Capability_def_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_def_clause(this);
	}
};

Capability_def_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_def_clause(this);
	}
};




ToscaParser.Capability_def_clauseContext = Capability_def_clauseContext;

ToscaParser.prototype.capability_def_clause = function() {

    var localctx = new Capability_def_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ToscaParser.RULE_capability_def_clause);
    var _la = 0; // Token type
    try {
        this.state = 1955;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1921;
            this.match(ToscaParser.TYPE);
            this.state = 1922;
            this.match(ToscaParser.COLON);
            this.state = 1923;
            this.match(ToscaParser.ID);
            this.state = 1924;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1925;
            this.descr();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1926;
            this.properties();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1927;
            this.attributes();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1928;
            this.match(ToscaParser.VALID_SOURCE_TYPES);
            this.state = 1929;
            this.match(ToscaParser.COLON);
            this.state = 1930;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 1931;
            this.match(ToscaParser.ID);
            this.state = 1936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 1932;
                this.match(ToscaParser.COMMA);
                this.state = 1933;
                this.match(ToscaParser.ID);
                this.state = 1938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1939;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 1940;
            this.match(ToscaParser.NEWLINE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1941;
            this.match(ToscaParser.VALID_SOURCE_TYPES);
            this.state = 1942;
            this.match(ToscaParser.COLON);
            this.state = 1943;
            this.match(ToscaParser.NEWLINE);
            this.state = 1944;
            this.match(ToscaParser.INDENT);
            this.state = 1950; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1945;
                this.match(ToscaParser.MINUS);
                this.state = 1946;
                this.match(ToscaParser.INDENT);
                this.state = 1947;
                this.match(ToscaParser.ID);
                this.state = 1948;
                this.match(ToscaParser.NEWLINE);
                this.state = 1949;
                this.match(ToscaParser.DEDENT);
                this.state = 1952; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 1954;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Requirement_defsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_requirement_defs;
    return this;
}

Requirement_defsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Requirement_defsContext.prototype.constructor = Requirement_defsContext;

Requirement_defsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Requirement_defsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Requirement_defsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Requirement_defsContext.prototype.requirement_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Requirement_defContext);
    } else {
        return this.getTypedRuleContext(Requirement_defContext,i);
    }
};

Requirement_defsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRequirement_defs(this);
	}
};

Requirement_defsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRequirement_defs(this);
	}
};




ToscaParser.Requirement_defsContext = Requirement_defsContext;

ToscaParser.prototype.requirement_defs = function() {

    var localctx = new Requirement_defsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ToscaParser.RULE_requirement_defs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1957;
        this.match(ToscaParser.REQUIREMENTS);
        this.state = 1958;
        this.match(ToscaParser.COLON);
        this.state = 1959;
        this.match(ToscaParser.NEWLINE);
        this.state = 1960;
        this.match(ToscaParser.INDENT);
        this.state = 1962; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1961;
            this.requirement_def();
            this.state = 1964; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 1966;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Requirement_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_requirement_def;
    this._ID = null; // Token
    this._requirement_def_clause = null; // Requirement_def_clauseContext
    return this;
}

Requirement_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Requirement_defContext.prototype.constructor = Requirement_defContext;

Requirement_defContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Requirement_defContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Requirement_defContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Requirement_defContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Requirement_defContext.prototype.requirement_def_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Requirement_def_clauseContext);
    } else {
        return this.getTypedRuleContext(Requirement_def_clauseContext,i);
    }
};

Requirement_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRequirement_def(this);
	}
};

Requirement_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRequirement_def(this);
	}
};




ToscaParser.Requirement_defContext = Requirement_defContext;

ToscaParser.prototype.requirement_def = function() {

    var localctx = new Requirement_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ToscaParser.RULE_requirement_def);
    var _la = 0; // Token type
    try {
        this.state = 1993;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1968;
            this.match(ToscaParser.MINUS);
            this.state = 1969;
            this.match(ToscaParser.INDENT);
            this.state = 1970;
            this.match(ToscaParser.ID);
            this.state = 1971;
            this.match(ToscaParser.COLON);
            this.state = 1972;
            this.match(ToscaParser.ID);
            this.state = 1973;
            this.match(ToscaParser.NEWLINE);
            this.state = 1974;
            this.match(ToscaParser.DEDENT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1975;
            this.match(ToscaParser.MINUS);
            this.state = 1976;
            localctx._ID = this.match(ToscaParser.ID);
            this.state = 1977;
            this.match(ToscaParser.INDENT);
            this.state = 1978;
            this.match(ToscaParser.COLON);
            this.state = 1979;
            this.match(ToscaParser.NEWLINE);
            this.state = 1980;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this); 
                       u.mandatory = [ 'capability' ]; u.label = (localctx._ID===null ? null : localctx._ID.text) 
            this.state = 1985; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1982;
                localctx._requirement_def_clause = this.requirement_def_clause();
                u.add(localctx._requirement_def_clause)
                this.state = 1987; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (ToscaParser.RELATIONSHIP - 137)) | (1 << (ToscaParser.OCCURENCES - 137)) | (1 << (ToscaParser.NODE - 137)) | (1 << (ToscaParser.CAPABILITY - 137)))) !== 0));
            this.state = 1989;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            this.state = 1991;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Requirement_def_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_requirement_def_clause;
    this._requirement_def_relation_clause = null; // Requirement_def_relation_clauseContext
    return this;
}

Requirement_def_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Requirement_def_clauseContext.prototype.constructor = Requirement_def_clauseContext;

Requirement_def_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Requirement_def_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Requirement_def_clauseContext.prototype.range = function() {
    return this.getTypedRuleContext(RangeContext,0);
};

Requirement_def_clauseContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Requirement_def_clauseContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Requirement_def_clauseContext.prototype.requirement_def_relation_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Requirement_def_relation_clauseContext);
    } else {
        return this.getTypedRuleContext(Requirement_def_relation_clauseContext,i);
    }
};

Requirement_def_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRequirement_def_clause(this);
	}
};

Requirement_def_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRequirement_def_clause(this);
	}
};




ToscaParser.Requirement_def_clauseContext = Requirement_def_clauseContext;

ToscaParser.prototype.requirement_def_clause = function() {

    var localctx = new Requirement_def_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ToscaParser.RULE_requirement_def_clause);
    var _la = 0; // Token type
    try {
        this.state = 2027;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1995;
            this.match(ToscaParser.CAPABILITY);
            this.state = 1996;
            this.match(ToscaParser.COLON);
            this.state = 1997;
            this.match(ToscaParser.ID);
            this.state = 1998;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1999;
            this.match(ToscaParser.NODE);
            this.state = 2000;
            this.match(ToscaParser.COLON);
            this.state = 2001;
            this.match(ToscaParser.ID);
            this.state = 2002;
            this.match(ToscaParser.NEWLINE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2003;
            this.match(ToscaParser.OCCURENCES);
            this.state = 2004;
            this.match(ToscaParser.COLON);
            this.state = 2005;
            this.range();
            this.state = 2006;
            this.match(ToscaParser.NEWLINE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2008;
            this.match(ToscaParser.RELATIONSHIP);
            this.state = 2009;
            this.match(ToscaParser.COLON);
            this.state = 2010;
            this.match(ToscaParser.ID);
            this.state = 2011;
            this.match(ToscaParser.NEWLINE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2012;
            this.match(ToscaParser.RELATIONSHIP);
            this.state = 2013;
            this.match(ToscaParser.COLON);
            this.state = 2014;
            this.match(ToscaParser.NEWLINE);
            this.state = 2015;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this); u.mandatory = [ 'type' ]; 
            this.state = 2020; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2017;
                localctx._requirement_def_relation_clause = this.requirement_def_relation_clause();
                u.add(localctx._requirement_def_relation_clause)
                this.state = 2022; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.TYPE || _la===ToscaParser.INTERFACES);
            this.state = 2024;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Requirement_def_relation_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_requirement_def_relation_clause;
    return this;
}

Requirement_def_relation_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Requirement_def_relation_clauseContext.prototype.constructor = Requirement_def_relation_clauseContext;

Requirement_def_relation_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Requirement_def_relation_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Requirement_def_relation_clauseContext.prototype.interface_defs = function() {
    return this.getTypedRuleContext(Interface_defsContext,0);
};

Requirement_def_relation_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRequirement_def_relation_clause(this);
	}
};

Requirement_def_relation_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRequirement_def_relation_clause(this);
	}
};




ToscaParser.Requirement_def_relation_clauseContext = Requirement_def_relation_clauseContext;

ToscaParser.prototype.requirement_def_relation_clause = function() {

    var localctx = new Requirement_def_relation_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ToscaParser.RULE_requirement_def_relation_clause);
    try {
        this.state = 2034;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2029;
            this.match(ToscaParser.TYPE);
            this.state = 2030;
            this.match(ToscaParser.COLON);
            this.state = 2031;
            this.match(ToscaParser.ID);
            this.state = 2032;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.INTERFACES:
            this.enterOuterAlt(localctx, 2);
            this.state = 2033;
            this.interface_defs();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_types;
    return this;
}

Interface_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_typesContext.prototype.constructor = Interface_typesContext;

Interface_typesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_typesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Interface_typesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Interface_typesContext.prototype.interface_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_typeContext);
    } else {
        return this.getTypedRuleContext(Interface_typeContext,i);
    }
};

Interface_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_types(this);
	}
};

Interface_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_types(this);
	}
};




ToscaParser.Interface_typesContext = Interface_typesContext;

ToscaParser.prototype.interface_types = function() {

    var localctx = new Interface_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ToscaParser.RULE_interface_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2036;
        this.match(ToscaParser.INTERFACE_TYPES);
        this.state = 2037;
        this.match(ToscaParser.COLON);
        this.state = 2038;
        this.match(ToscaParser.NEWLINE);
        this.state = 2039;
        this.match(ToscaParser.INDENT);
        this.state = 2041; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2040;
            this.interface_type();
            this.state = 2043; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2045;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_type;
    this._interface_type_clause = null; // Interface_type_clauseContext
    return this;
}

Interface_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_typeContext.prototype.constructor = Interface_typeContext;

Interface_typeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Interface_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Interface_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Interface_typeContext.prototype.interface_type_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_type_clauseContext);
    } else {
        return this.getTypedRuleContext(Interface_type_clauseContext,i);
    }
};

Interface_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_type(this);
	}
};

Interface_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_type(this);
	}
};




ToscaParser.Interface_typeContext = Interface_typeContext;

ToscaParser.prototype.interface_type = function() {

    var localctx = new Interface_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ToscaParser.RULE_interface_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2047;
        this.match(ToscaParser.ID);
        this.state = 2048;
        this.match(ToscaParser.COLON);
        this.state = 2049;
        this.match(ToscaParser.NEWLINE);
        this.state = 2050;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.mandatory = [ 'type' ]; 
        this.state = 2055; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2052;
            localctx._interface_type_clause = this.interface_type_clause();
            u.add(localctx._interface_type_clause)
            this.state = 2057; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ToscaParser.LVERSION - 80)) | (1 << (ToscaParser.METADATA - 80)) | (1 << (ToscaParser.DERIVED_FROM - 80)) | (1 << (ToscaParser.DESCRIPTION - 80)))) !== 0) || _la===ToscaParser.INPUTS || _la===ToscaParser.ID);
        this.state = 2059;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_type_clause;
    return this;
}

Interface_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_type_clauseContext.prototype.constructor = Interface_type_clauseContext;

Interface_type_clauseContext.prototype.entity_clause = function() {
    return this.getTypedRuleContext(Entity_clauseContext,0);
};

Interface_type_clauseContext.prototype.inputs = function() {
    return this.getTypedRuleContext(InputsContext,0);
};

Interface_type_clauseContext.prototype.operation_def = function() {
    return this.getTypedRuleContext(Operation_defContext,0);
};

Interface_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_type_clause(this);
	}
};

Interface_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_type_clause(this);
	}
};




ToscaParser.Interface_type_clauseContext = Interface_type_clauseContext;

ToscaParser.prototype.interface_type_clause = function() {

    var localctx = new Interface_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ToscaParser.RULE_interface_type_clause);
    try {
        this.state = 2065;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.LVERSION:
        case ToscaParser.METADATA:
        case ToscaParser.DERIVED_FROM:
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 2062;
            this.entity_clause();
            break;
        case ToscaParser.INPUTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2063;
            this.inputs();
            break;
        case ToscaParser.ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 2064;
            this.operation_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_defsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_defs;
    return this;
}

Interface_defsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_defsContext.prototype.constructor = Interface_defsContext;

Interface_defsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_defsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Interface_defsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Interface_defsContext.prototype.interface_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_defContext);
    } else {
        return this.getTypedRuleContext(Interface_defContext,i);
    }
};

Interface_defsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_defs(this);
	}
};

Interface_defsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_defs(this);
	}
};




ToscaParser.Interface_defsContext = Interface_defsContext;

ToscaParser.prototype.interface_defs = function() {

    var localctx = new Interface_defsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ToscaParser.RULE_interface_defs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2067;
        this.match(ToscaParser.INTERFACES);
        this.state = 2068;
        this.match(ToscaParser.COLON);
        this.state = 2069;
        this.match(ToscaParser.NEWLINE);
        this.state = 2070;
        this.match(ToscaParser.INDENT);
        this.state = 2072; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2071;
            this.interface_def();
            this.state = 2074; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2076;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_def;
    this._ID = null; // Token
    this._interface_def_clause = null; // Interface_def_clauseContext
    return this;
}

Interface_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_defContext.prototype.constructor = Interface_defContext;

Interface_defContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Interface_defContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_defContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Interface_defContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Interface_defContext.prototype.interface_def_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_def_clauseContext);
    } else {
        return this.getTypedRuleContext(Interface_def_clauseContext,i);
    }
};

Interface_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_def(this);
	}
};

Interface_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_def(this);
	}
};




ToscaParser.Interface_defContext = Interface_defContext;

ToscaParser.prototype.interface_def = function() {

    var localctx = new Interface_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ToscaParser.RULE_interface_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2078;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2079;
        this.match(ToscaParser.COLON);
        this.state = 2080;
        this.match(ToscaParser.NEWLINE);
        this.state = 2081;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); 
                u.label = (localctx._ID===null ? null : localctx._ID.text); u.mandatory = [ 'type' ]; 
        this.state = 2086; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2083;
            localctx._interface_def_clause = this.interface_def_clause();
            u.add(localctx._interface_def_clause)
            this.state = 2088; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.TYPE || _la===ToscaParser.INPUTS || _la===ToscaParser.ID);
        this.state = 2090;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_def_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_def_clause;
    return this;
}

Interface_def_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_def_clauseContext.prototype.constructor = Interface_def_clauseContext;

Interface_def_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Interface_def_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_def_clauseContext.prototype.inputs = function() {
    return this.getTypedRuleContext(InputsContext,0);
};

Interface_def_clauseContext.prototype.operation_def = function() {
    return this.getTypedRuleContext(Operation_defContext,0);
};

Interface_def_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_def_clause(this);
	}
};

Interface_def_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_def_clause(this);
	}
};




ToscaParser.Interface_def_clauseContext = Interface_def_clauseContext;

ToscaParser.prototype.interface_def_clause = function() {

    var localctx = new Interface_def_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ToscaParser.RULE_interface_def_clause);
    try {
        this.state = 2099;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2093;
            this.match(ToscaParser.TYPE);
            this.state = 2094;
            this.match(ToscaParser.COLON);
            this.state = 2095;
            this.match(ToscaParser.ID);
            this.state = 2096;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.INPUTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2097;
            this.inputs();
            break;
        case ToscaParser.ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 2098;
            this.operation_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_defs_templateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_defs_template;
    return this;
}

Interface_defs_templateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_defs_templateContext.prototype.constructor = Interface_defs_templateContext;

Interface_defs_templateContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_defs_templateContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Interface_defs_templateContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Interface_defs_templateContext.prototype.interface_def_template = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_def_templateContext);
    } else {
        return this.getTypedRuleContext(Interface_def_templateContext,i);
    }
};

Interface_defs_templateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_defs_template(this);
	}
};

Interface_defs_templateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_defs_template(this);
	}
};




ToscaParser.Interface_defs_templateContext = Interface_defs_templateContext;

ToscaParser.prototype.interface_defs_template = function() {

    var localctx = new Interface_defs_templateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ToscaParser.RULE_interface_defs_template);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2101;
        this.match(ToscaParser.INTERFACES);
        this.state = 2102;
        this.match(ToscaParser.COLON);
        this.state = 2103;
        this.match(ToscaParser.NEWLINE);
        this.state = 2104;
        this.match(ToscaParser.INDENT);
        this.state = 2106; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2105;
            this.interface_def_template();
            this.state = 2108; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2110;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_def_templateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_def_template;
    this._ID = null; // Token
    this._interface_def_template_clause = null; // Interface_def_template_clauseContext
    return this;
}

Interface_def_templateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_def_templateContext.prototype.constructor = Interface_def_templateContext;

Interface_def_templateContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Interface_def_templateContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_def_templateContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Interface_def_templateContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Interface_def_templateContext.prototype.interface_def_template_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Interface_def_template_clauseContext);
    } else {
        return this.getTypedRuleContext(Interface_def_template_clauseContext,i);
    }
};

Interface_def_templateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_def_template(this);
	}
};

Interface_def_templateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_def_template(this);
	}
};




ToscaParser.Interface_def_templateContext = Interface_def_templateContext;

ToscaParser.prototype.interface_def_template = function() {

    var localctx = new Interface_def_templateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ToscaParser.RULE_interface_def_template);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2112;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2113;
        this.match(ToscaParser.COLON);
        this.state = 2114;
        this.match(ToscaParser.NEWLINE);
        this.state = 2115;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); 
               u.label = (localctx._ID===null ? null : localctx._ID.text); u.mandatory = [ 'type' ]; 
        this.state = 2120; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2117;
            localctx._interface_def_template_clause = this.interface_def_template_clause();
            u.add(localctx._interface_def_template_clause)
            this.state = 2122; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.TYPE || _la===ToscaParser.INPUTS || _la===ToscaParser.ID);
        this.state = 2124;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Interface_def_template_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_interface_def_template_clause;
    return this;
}

Interface_def_template_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interface_def_template_clauseContext.prototype.constructor = Interface_def_template_clauseContext;

Interface_def_template_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Interface_def_template_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Interface_def_template_clauseContext.prototype.input_assignments = function() {
    return this.getTypedRuleContext(Input_assignmentsContext,0);
};

Interface_def_template_clauseContext.prototype.operation_def = function() {
    return this.getTypedRuleContext(Operation_defContext,0);
};

Interface_def_template_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInterface_def_template_clause(this);
	}
};

Interface_def_template_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInterface_def_template_clause(this);
	}
};




ToscaParser.Interface_def_template_clauseContext = Interface_def_template_clauseContext;

ToscaParser.prototype.interface_def_template_clause = function() {

    var localctx = new Interface_def_template_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ToscaParser.RULE_interface_def_template_clause);
    try {
        this.state = 2133;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TYPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2127;
            this.match(ToscaParser.TYPE);
            this.state = 2128;
            this.match(ToscaParser.COLON);
            this.state = 2129;
            this.match(ToscaParser.ID);
            this.state = 2130;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.INPUTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2131;
            this.input_assignments();
            break;
        case ToscaParser.ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 2132;
            this.operation_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operation_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_operation_def;
    this._ID = null; // Token
    this._operation_def_clause = null; // Operation_def_clauseContext
    return this;
}

Operation_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operation_defContext.prototype.constructor = Operation_defContext;

Operation_defContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Operation_defContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Operation_defContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Operation_defContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Operation_defContext.prototype.operation_def_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Operation_def_clauseContext);
    } else {
        return this.getTypedRuleContext(Operation_def_clauseContext,i);
    }
};

Operation_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterOperation_def(this);
	}
};

Operation_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitOperation_def(this);
	}
};




ToscaParser.Operation_defContext = Operation_defContext;

ToscaParser.prototype.operation_def = function() {

    var localctx = new Operation_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ToscaParser.RULE_operation_def);
    var _la = 0; // Token type
    try {
        this.state = 2154;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2135;
            this.match(ToscaParser.ID);
            this.state = 2136;
            this.match(ToscaParser.COLON);
            this.state = 2137;
            this.match(ToscaParser.ID);
            this.state = 2138;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2139;
            localctx._ID = this.match(ToscaParser.ID);
            this.state = 2140;
            this.match(ToscaParser.COLON);
            this.state = 2141;
            this.match(ToscaParser.NEWLINE);
            this.state = 2142;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text);
            this.state = 2147; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2144;
                localctx._operation_def_clause = this.operation_def_clause();
                u.add(localctx._operation_def_clause)
                this.state = 2149; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.DESCRIPTION || _la===ToscaParser.INPUTS || _la===ToscaParser.IMPLEMENTATION);
            this.state = 2151;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Operation_def_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_operation_def_clause;
    this._implementation_clause = null; // Implementation_clauseContext
    return this;
}

Operation_def_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operation_def_clauseContext.prototype.constructor = Operation_def_clauseContext;

Operation_def_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Operation_def_clauseContext.prototype.inputs = function() {
    return this.getTypedRuleContext(InputsContext,0);
};

Operation_def_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Operation_def_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Operation_def_clauseContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Operation_def_clauseContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Operation_def_clauseContext.prototype.implementation_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Implementation_clauseContext);
    } else {
        return this.getTypedRuleContext(Implementation_clauseContext,i);
    }
};

Operation_def_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterOperation_def_clause(this);
	}
};

Operation_def_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitOperation_def_clause(this);
	}
};




ToscaParser.Operation_def_clauseContext = Operation_def_clauseContext;

ToscaParser.prototype.operation_def_clause = function() {

    var localctx = new Operation_def_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ToscaParser.RULE_operation_def_clause);
    var _la = 0; // Token type
    try {
        this.state = 2177;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2156;
            this.descr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2157;
            this.inputs();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2158;
            this.match(ToscaParser.IMPLEMENTATION);
            this.state = 2159;
            this.match(ToscaParser.COLON);
            this.state = 2160;
            this.match(ToscaParser.ID);
            this.state = 2161;
            this.match(ToscaParser.NEWLINE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2162;
            this.match(ToscaParser.IMPLEMENTATION);
            this.state = 2163;
            this.match(ToscaParser.COLON);
            this.state = 2164;
            this.match(ToscaParser.NEWLINE);
            this.state = 2165;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this); u.mandatory = [ 'primary' ]; 
            this.state = 2170; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2167;
                localctx._implementation_clause = this.implementation_clause();
                u.add(localctx._implementation_clause)
                this.state = 2172; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.DEPENDENCIES || _la===ToscaParser.PRIMARY);
            this.state = 2174;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Implementation_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_implementation_clause;
    return this;
}

Implementation_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Implementation_clauseContext.prototype.constructor = Implementation_clauseContext;

Implementation_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Implementation_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Implementation_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Implementation_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Implementation_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterImplementation_clause(this);
	}
};

Implementation_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitImplementation_clause(this);
	}
};




ToscaParser.Implementation_clauseContext = Implementation_clauseContext;

ToscaParser.prototype.implementation_clause = function() {

    var localctx = new Implementation_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ToscaParser.RULE_implementation_clause);
    var _la = 0; // Token type
    try {
        this.state = 2197;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.PRIMARY:
            this.enterOuterAlt(localctx, 1);
            this.state = 2179;
            this.match(ToscaParser.PRIMARY);
            this.state = 2180;
            this.match(ToscaParser.COLON);
            this.state = 2181;
            this.match(ToscaParser.ID);
            this.state = 2182;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.DEPENDENCIES:
            this.enterOuterAlt(localctx, 2);
            this.state = 2183;
            this.match(ToscaParser.DEPENDENCIES);
            this.state = 2184;
            this.match(ToscaParser.COLON);
            this.state = 2185;
            this.match(ToscaParser.NEWLINE);
            this.state = 2186;
            this.match(ToscaParser.INDENT);
            this.state = 2192; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2187;
                this.match(ToscaParser.MINUS);
                this.state = 2188;
                this.match(ToscaParser.INDENT);
                this.state = 2189;
                this.match(ToscaParser.ID);
                this.state = 2190;
                this.match(ToscaParser.NEWLINE);
                this.state = 2191;
                this.match(ToscaParser.DEDENT);
                this.state = 2194; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 2196;
            this.match(ToscaParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_group_types;
    return this;
}

Group_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_typesContext.prototype.constructor = Group_typesContext;

Group_typesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Group_typesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Group_typesContext.prototype.group_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_typeContext);
    } else {
        return this.getTypedRuleContext(Group_typeContext,i);
    }
};

Group_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterGroup_types(this);
	}
};

Group_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitGroup_types(this);
	}
};




ToscaParser.Group_typesContext = Group_typesContext;

ToscaParser.prototype.group_types = function() {

    var localctx = new Group_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ToscaParser.RULE_group_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2199;
        this.match(ToscaParser.GROUP_TYPES);
        this.state = 2200;
        this.match(ToscaParser.COLON);
        this.state = 2201;
        this.match(ToscaParser.INDENT);
        this.state = 2203; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2202;
            this.group_type();
            this.state = 2205; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2207;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_group_type;
    this._ID = null; // Token
    this._group_type_clause = null; // Group_type_clauseContext
    return this;
}

Group_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_typeContext.prototype.constructor = Group_typeContext;

Group_typeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Group_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Group_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Group_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Group_typeContext.prototype.group_type_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_type_clauseContext);
    } else {
        return this.getTypedRuleContext(Group_type_clauseContext,i);
    }
};

Group_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterGroup_type(this);
	}
};

Group_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitGroup_type(this);
	}
};




ToscaParser.Group_typeContext = Group_typeContext;

ToscaParser.prototype.group_type = function() {

    var localctx = new Group_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ToscaParser.RULE_group_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2209;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2210;
        this.match(ToscaParser.COLON);
        this.state = 2211;
        this.match(ToscaParser.NEWLINE);
        this.state = 2212;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text); 
        this.state = 2217; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2214;
            localctx._group_type_clause = this.group_type_clause();
            u.add(localctx._group_type_clause)
            this.state = 2219; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ToscaParser.LVERSION - 80)) | (1 << (ToscaParser.METADATA - 80)) | (1 << (ToscaParser.DERIVED_FROM - 80)) | (1 << (ToscaParser.PROPERTIES - 80)) | (1 << (ToscaParser.DESCRIPTION - 80)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (ToscaParser.INTERFACES - 136)) | (1 << (ToscaParser.CAPABILITIES - 136)) | (1 << (ToscaParser.REQUIREMENTS - 136)))) !== 0) || _la===ToscaParser.MEMBERS);
        this.state = 2221;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_group_type_clause;
    return this;
}

Group_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_type_clauseContext.prototype.constructor = Group_type_clauseContext;

Group_type_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Group_type_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Group_type_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Group_type_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Group_type_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Group_type_clauseContext.prototype.capability_defs = function() {
    return this.getTypedRuleContext(Capability_defsContext,0);
};

Group_type_clauseContext.prototype.requirement_defs = function() {
    return this.getTypedRuleContext(Requirement_defsContext,0);
};

Group_type_clauseContext.prototype.interface_defs = function() {
    return this.getTypedRuleContext(Interface_defsContext,0);
};

Group_type_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Group_type_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Group_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterGroup_type_clause(this);
	}
};

Group_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitGroup_type_clause(this);
	}
};




ToscaParser.Group_type_clauseContext = Group_type_clauseContext;

ToscaParser.prototype.group_type_clause = function() {

    var localctx = new Group_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ToscaParser.RULE_group_type_clause);
    var _la = 0; // Token type
    try {
        this.state = 2265;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2224;
            this.match(ToscaParser.DERIVED_FROM);
            this.state = 2225;
            this.match(ToscaParser.COLON);
            this.state = 2226;
            this.match(ToscaParser.ID);
            this.state = 2227;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2228;
            this.descr();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2229;
            this.entity_metadata();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2230;
            this.match(ToscaParser.LVERSION);
            this.state = 2231;
            this.match(ToscaParser.COLON);
            this.state = 2232;
            this.match(ToscaParser.ID);
            this.state = 2233;
            this.match(ToscaParser.NEWLINE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2234;
            this.properties();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2235;
            this.capability_defs();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2236;
            this.requirement_defs();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2237;
            this.interface_defs();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2238;
            this.match(ToscaParser.MEMBERS);
            this.state = 2239;
            this.match(ToscaParser.COLON);
            this.state = 2240;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 2241;
            this.match(ToscaParser.ID);
            this.state = 2246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 2242;
                this.match(ToscaParser.COMMA);
                this.state = 2243;
                this.match(ToscaParser.ID);
                this.state = 2248;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2249;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 2250;
            this.match(ToscaParser.NEWLINE);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2251;
            this.match(ToscaParser.MEMBERS);
            this.state = 2252;
            this.match(ToscaParser.COLON);
            this.state = 2253;
            this.match(ToscaParser.NEWLINE);
            this.state = 2254;
            this.match(ToscaParser.INDENT);
            this.state = 2260; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2255;
                this.match(ToscaParser.MINUS);
                this.state = 2256;
                this.match(ToscaParser.INDENT);
                this.state = 2257;
                this.match(ToscaParser.ID);
                this.state = 2258;
                this.match(ToscaParser.NEWLINE);
                this.state = 2259;
                this.match(ToscaParser.DEDENT);
                this.state = 2262; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 2264;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_defsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_group_defs;
    return this;
}

Group_defsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_defsContext.prototype.constructor = Group_defsContext;

Group_defsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Group_defsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Group_defsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Group_defsContext.prototype.group_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_defContext);
    } else {
        return this.getTypedRuleContext(Group_defContext,i);
    }
};

Group_defsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterGroup_defs(this);
	}
};

Group_defsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitGroup_defs(this);
	}
};




ToscaParser.Group_defsContext = Group_defsContext;

ToscaParser.prototype.group_defs = function() {

    var localctx = new Group_defsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ToscaParser.RULE_group_defs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2267;
        this.match(ToscaParser.GROUPS);
        this.state = 2268;
        this.match(ToscaParser.COLON);
        this.state = 2269;
        this.match(ToscaParser.NEWLINE);
        this.state = 2270;
        this.match(ToscaParser.INDENT);
        this.state = 2272; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2271;
            this.group_def();
            this.state = 2274; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2276;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_group_def;
    this._ID = null; // Token
    this._group_def_clause = null; // Group_def_clauseContext
    return this;
}

Group_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_defContext.prototype.constructor = Group_defContext;

Group_defContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Group_defContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Group_defContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Group_defContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Group_defContext.prototype.group_def_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_def_clauseContext);
    } else {
        return this.getTypedRuleContext(Group_def_clauseContext,i);
    }
};

Group_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterGroup_def(this);
	}
};

Group_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitGroup_def(this);
	}
};




ToscaParser.Group_defContext = Group_defContext;

ToscaParser.prototype.group_def = function() {

    var localctx = new Group_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, ToscaParser.RULE_group_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2278;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2279;
        this.match(ToscaParser.COLON);
        this.state = 2280;
        this.match(ToscaParser.NEWLINE);
        this.state = 2281;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); 
               u.label = (localctx._ID===null ? null : localctx._ID.text); u.mandatory = [ 'type' ] 
        this.state = 2286; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2283;
            localctx._group_def_clause = this.group_def_clause();
            u.add(localctx._group_def_clause)
            this.state = 2288; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ToscaParser.METADATA - 81)) | (1 << (ToscaParser.PROPERTIES - 81)) | (1 << (ToscaParser.TYPE - 81)) | (1 << (ToscaParser.DESCRIPTION - 81)))) !== 0) || _la===ToscaParser.INTERFACES || _la===ToscaParser.MEMBERS);
        this.state = 2290;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_def_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_group_def_clause;
    return this;
}

Group_def_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_def_clauseContext.prototype.constructor = Group_def_clauseContext;

Group_def_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Group_def_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Group_def_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Group_def_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Group_def_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Group_def_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Group_def_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Group_def_clauseContext.prototype.interface_defs_template = function() {
    return this.getTypedRuleContext(Interface_defs_templateContext,0);
};

Group_def_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterGroup_def_clause(this);
	}
};

Group_def_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitGroup_def_clause(this);
	}
};




ToscaParser.Group_def_clauseContext = Group_def_clauseContext;

ToscaParser.prototype.group_def_clause = function() {

    var localctx = new Group_def_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ToscaParser.RULE_group_def_clause);
    var _la = 0; // Token type
    try {
        this.state = 2328;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2293;
            this.match(ToscaParser.TYPE);
            this.state = 2294;
            this.match(ToscaParser.COLON);
            this.state = 2295;
            this.match(ToscaParser.ID);
            this.state = 2296;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2297;
            this.descr();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2298;
            this.entity_metadata();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2299;
            this.properties();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2300;
            this.match(ToscaParser.MEMBERS);
            this.state = 2301;
            this.match(ToscaParser.COLON);
            this.state = 2302;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 2303;
            this.match(ToscaParser.ID);
            this.state = 2308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 2304;
                this.match(ToscaParser.COMMA);
                this.state = 2305;
                this.match(ToscaParser.ID);
                this.state = 2310;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2311;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 2312;
            this.match(ToscaParser.NEWLINE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2313;
            this.match(ToscaParser.MEMBERS);
            this.state = 2314;
            this.match(ToscaParser.COLON);
            this.state = 2315;
            this.match(ToscaParser.NEWLINE);
            this.state = 2316;
            this.match(ToscaParser.INDENT);
            this.state = 2322; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2317;
                this.match(ToscaParser.MINUS);
                this.state = 2318;
                this.match(ToscaParser.INDENT);
                this.state = 2319;
                this.match(ToscaParser.ID);
                this.state = 2320;
                this.match(ToscaParser.NEWLINE);
                this.state = 2321;
                this.match(ToscaParser.DEDENT);
                this.state = 2324; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 2326;
            this.match(ToscaParser.DEDENT);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2327;
            this.interface_defs_template();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Policy_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_policy_types;
    return this;
}

Policy_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Policy_typesContext.prototype.constructor = Policy_typesContext;

Policy_typesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Policy_typesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Policy_typesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Policy_typesContext.prototype.policy_type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Policy_typeContext);
    } else {
        return this.getTypedRuleContext(Policy_typeContext,i);
    }
};

Policy_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterPolicy_types(this);
	}
};

Policy_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitPolicy_types(this);
	}
};




ToscaParser.Policy_typesContext = Policy_typesContext;

ToscaParser.prototype.policy_types = function() {

    var localctx = new Policy_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ToscaParser.RULE_policy_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2330;
        this.match(ToscaParser.POLICY_TYPES);
        this.state = 2331;
        this.match(ToscaParser.COLON);
        this.state = 2332;
        this.match(ToscaParser.NEWLINE);
        this.state = 2333;
        this.match(ToscaParser.INDENT);
        this.state = 2335; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2334;
            this.policy_type();
            this.state = 2337; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2339;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Policy_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_policy_type;
    this._ID = null; // Token
    this._policy_type_clause = null; // Policy_type_clauseContext
    return this;
}

Policy_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Policy_typeContext.prototype.constructor = Policy_typeContext;

Policy_typeContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Policy_typeContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Policy_typeContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Policy_typeContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Policy_typeContext.prototype.policy_type_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Policy_type_clauseContext);
    } else {
        return this.getTypedRuleContext(Policy_type_clauseContext,i);
    }
};

Policy_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterPolicy_type(this);
	}
};

Policy_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitPolicy_type(this);
	}
};




ToscaParser.Policy_typeContext = Policy_typeContext;

ToscaParser.prototype.policy_type = function() {

    var localctx = new Policy_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ToscaParser.RULE_policy_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2341;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2342;
        this.match(ToscaParser.COLON);
        this.state = 2343;
        this.match(ToscaParser.NEWLINE);
        this.state = 2344;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text); 
        this.state = 2349; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2346;
            localctx._policy_type_clause = this.policy_type_clause();
            u.add(localctx._policy_type_clause)
            this.state = 2351; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__6 || _la===ToscaParser.T__8 || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ToscaParser.LVERSION - 80)) | (1 << (ToscaParser.METADATA - 80)) | (1 << (ToscaParser.DERIVED_FROM - 80)) | (1 << (ToscaParser.PROPERTIES - 80)) | (1 << (ToscaParser.DESCRIPTION - 80)))) !== 0));
        this.state = 2353;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Policy_type_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_policy_type_clause;
    return this;
}

Policy_type_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Policy_type_clauseContext.prototype.constructor = Policy_type_clauseContext;

Policy_type_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Policy_type_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Policy_type_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Policy_type_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Policy_type_clauseContext.prototype.properties = function() {
    return this.getTypedRuleContext(PropertiesContext,0);
};

Policy_type_clauseContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

Policy_type_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Policy_type_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Policy_type_clauseContext.prototype.trigger_defs = function() {
    return this.getTypedRuleContext(Trigger_defsContext,0);
};

Policy_type_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterPolicy_type_clause(this);
	}
};

Policy_type_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitPolicy_type_clause(this);
	}
};




ToscaParser.Policy_type_clauseContext = Policy_type_clauseContext;

ToscaParser.prototype.policy_type_clause = function() {

    var localctx = new Policy_type_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ToscaParser.RULE_policy_type_clause);
    var _la = 0; // Token type
    try {
        this.state = 2398;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2356;
            this.match(ToscaParser.DERIVED_FROM);
            this.state = 2357;
            this.match(ToscaParser.COLON);
            this.state = 2358;
            this.match(ToscaParser.ID);
            this.state = 2359;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2360;
            this.descr();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2361;
            this.entity_metadata();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2362;
            this.match(ToscaParser.LVERSION);
            this.state = 2363;
            this.match(ToscaParser.COLON);
            this.state = 2364;
            this.match(ToscaParser.ID);
            this.state = 2365;
            this.match(ToscaParser.NEWLINE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2366;
            this.properties();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2367;
            this.match(ToscaParser.T__6);
            this.state = 2368;
            this.match(ToscaParser.COLON);
            this.state = 2369;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 2370;
            this.value();
            this.state = 2375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 2371;
                this.match(ToscaParser.COMMA);
                this.state = 2372;
                this.value();
                this.state = 2377;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2378;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 2379;
            this.match(ToscaParser.NEWLINE);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2381;
            this.match(ToscaParser.T__6);
            this.state = 2382;
            this.match(ToscaParser.COLON);
            this.state = 2383;
            this.match(ToscaParser.NEWLINE);
            this.state = 2384;
            this.match(ToscaParser.INDENT);
            this.state = 2391; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2385;
                this.match(ToscaParser.MINUS);
                this.state = 2386;
                this.match(ToscaParser.INDENT);
                this.state = 2387;
                this.value();
                this.state = 2388;
                this.match(ToscaParser.NEWLINE);
                this.state = 2389;
                this.match(ToscaParser.DEDENT);
                this.state = 2393; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 2395;
            this.match(ToscaParser.DEDENT);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2397;
            this.trigger_defs();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Policy_defsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_policy_defs;
    return this;
}

Policy_defsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Policy_defsContext.prototype.constructor = Policy_defsContext;

Policy_defsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Policy_defsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Policy_defsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Policy_defsContext.prototype.policy_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Policy_defContext);
    } else {
        return this.getTypedRuleContext(Policy_defContext,i);
    }
};

Policy_defsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterPolicy_defs(this);
	}
};

Policy_defsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitPolicy_defs(this);
	}
};




ToscaParser.Policy_defsContext = Policy_defsContext;

ToscaParser.prototype.policy_defs = function() {

    var localctx = new Policy_defsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ToscaParser.RULE_policy_defs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2400;
        this.match(ToscaParser.T__7);
        this.state = 2401;
        this.match(ToscaParser.COLON);
        this.state = 2402;
        this.match(ToscaParser.NEWLINE);
        this.state = 2403;
        this.match(ToscaParser.INDENT);
        this.state = 2405; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2404;
            this.policy_def();
            this.state = 2407; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2409;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Policy_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_policy_def;
    this._ID = null; // Token
    this._policy_def_clause = null; // Policy_def_clauseContext
    return this;
}

Policy_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Policy_defContext.prototype.constructor = Policy_defContext;

Policy_defContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Policy_defContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Policy_defContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Policy_defContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Policy_defContext.prototype.policy_def_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Policy_def_clauseContext);
    } else {
        return this.getTypedRuleContext(Policy_def_clauseContext,i);
    }
};

Policy_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterPolicy_def(this);
	}
};

Policy_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitPolicy_def(this);
	}
};




ToscaParser.Policy_defContext = Policy_defContext;

ToscaParser.prototype.policy_def = function() {

    var localctx = new Policy_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ToscaParser.RULE_policy_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2411;
        this.match(ToscaParser.MINUS);
        this.state = 2412;
        this.match(ToscaParser.INDENT);
        this.state = 2413;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2414;
        this.match(ToscaParser.COLON);
        this.state = 2415;
        this.match(ToscaParser.NEWLINE);
        this.state = 2416;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); 
                   u.label = (localctx._ID===null ? null : localctx._ID.text); u.mandatory = [ 'type' ] 
        this.state = 2421; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2418;
            localctx._policy_def_clause = this.policy_def_clause();
            u.add(localctx._policy_def_clause)
            this.state = 2423; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__6 || _la===ToscaParser.T__8 || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (ToscaParser.METADATA - 81)) | (1 << (ToscaParser.PROPERTIES - 81)) | (1 << (ToscaParser.TYPE - 81)) | (1 << (ToscaParser.DESCRIPTION - 81)))) !== 0));
        this.state = 2425;
        this.match(ToscaParser.DEDENT);
         u.check(); 
        this.state = 2427;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Policy_def_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_policy_def_clause;
    return this;
}

Policy_def_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Policy_def_clauseContext.prototype.constructor = Policy_def_clauseContext;

Policy_def_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Policy_def_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Policy_def_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Policy_def_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Policy_def_clauseContext.prototype.property_assignments = function() {
    return this.getTypedRuleContext(Property_assignmentsContext,0);
};

Policy_def_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Policy_def_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Policy_def_clauseContext.prototype.trigger_defs = function() {
    return this.getTypedRuleContext(Trigger_defsContext,0);
};

Policy_def_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterPolicy_def_clause(this);
	}
};

Policy_def_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitPolicy_def_clause(this);
	}
};




ToscaParser.Policy_def_clauseContext = Policy_def_clauseContext;

ToscaParser.prototype.policy_def_clause = function() {

    var localctx = new Policy_def_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ToscaParser.RULE_policy_def_clause);
    var _la = 0; // Token type
    try {
        this.state = 2464;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2429;
            this.match(ToscaParser.TYPE);
            this.state = 2430;
            this.match(ToscaParser.COLON);
            this.state = 2431;
            this.match(ToscaParser.ID);
            this.state = 2432;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2433;
            this.descr();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2434;
            this.entity_metadata();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2435;
            this.property_assignments();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2436;
            this.match(ToscaParser.T__6);
            this.state = 2437;
            this.match(ToscaParser.COLON);
            this.state = 2438;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 2439;
            this.match(ToscaParser.ID);
            this.state = 2444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 2440;
                this.match(ToscaParser.COMMA);
                this.state = 2441;
                this.match(ToscaParser.ID);
                this.state = 2446;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2447;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 2448;
            this.match(ToscaParser.NEWLINE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2449;
            this.match(ToscaParser.T__6);
            this.state = 2450;
            this.match(ToscaParser.COLON);
            this.state = 2451;
            this.match(ToscaParser.NEWLINE);
            this.state = 2452;
            this.match(ToscaParser.INDENT);
            this.state = 2458; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2453;
                this.match(ToscaParser.MINUS);
                this.state = 2454;
                this.match(ToscaParser.INDENT);
                this.state = 2455;
                this.match(ToscaParser.ID);
                this.state = 2456;
                this.match(ToscaParser.NEWLINE);
                this.state = 2457;
                this.match(ToscaParser.DEDENT);
                this.state = 2460; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 2462;
            this.match(ToscaParser.DEDENT);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2463;
            this.trigger_defs();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_defsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_trigger_defs;
    return this;
}

Trigger_defsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_defsContext.prototype.constructor = Trigger_defsContext;

Trigger_defsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Trigger_defsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Trigger_defsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Trigger_defsContext.prototype.trigger_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Trigger_defContext);
    } else {
        return this.getTypedRuleContext(Trigger_defContext,i);
    }
};

Trigger_defsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterTrigger_defs(this);
	}
};

Trigger_defsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitTrigger_defs(this);
	}
};




ToscaParser.Trigger_defsContext = Trigger_defsContext;

ToscaParser.prototype.trigger_defs = function() {

    var localctx = new Trigger_defsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ToscaParser.RULE_trigger_defs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2466;
        this.match(ToscaParser.T__8);
        this.state = 2467;
        this.match(ToscaParser.COLON);
        this.state = 2468;
        this.match(ToscaParser.NEWLINE);
        this.state = 2469;
        this.match(ToscaParser.INDENT);
        this.state = 2471; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2470;
            this.trigger_def();
            this.state = 2473; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2475;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_trigger_def;
    this._ID = null; // Token
    this._trigger_def_clause = null; // Trigger_def_clauseContext
    return this;
}

Trigger_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_defContext.prototype.constructor = Trigger_defContext;

Trigger_defContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Trigger_defContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Trigger_defContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Trigger_defContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Trigger_defContext.prototype.trigger_def_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Trigger_def_clauseContext);
    } else {
        return this.getTypedRuleContext(Trigger_def_clauseContext,i);
    }
};

Trigger_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterTrigger_def(this);
	}
};

Trigger_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitTrigger_def(this);
	}
};




ToscaParser.Trigger_defContext = Trigger_defContext;

ToscaParser.prototype.trigger_def = function() {

    var localctx = new Trigger_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, ToscaParser.RULE_trigger_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2477;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2478;
        this.match(ToscaParser.COLON);
        this.state = 2479;
        this.match(ToscaParser.NEWLINE);
        this.state = 2480;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text); 
        this.state = 2485; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2482;
            localctx._trigger_def_clause = this.trigger_def_clause();
            u.add(localctx._trigger_def_clause)
            this.state = 2487; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ToscaParser.T__9) | (1 << ToscaParser.T__10) | (1 << ToscaParser.T__11) | (1 << ToscaParser.T__12) | (1 << ToscaParser.T__14) | (1 << ToscaParser.T__15) | (1 << ToscaParser.T__16) | (1 << ToscaParser.T__17))) !== 0) || _la===ToscaParser.DESCRIPTION);
        this.state = 2489;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_def_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_trigger_def_clause;
    this._target_filter_clause = null; // Target_filter_clauseContext
    return this;
}

Trigger_def_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_def_clauseContext.prototype.constructor = Trigger_def_clauseContext;

Trigger_def_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Trigger_def_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Trigger_def_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Trigger_def_clauseContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Trigger_def_clauseContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Trigger_def_clauseContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Trigger_def_clauseContext.prototype.target_filter_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Target_filter_clauseContext);
    } else {
        return this.getTypedRuleContext(Target_filter_clauseContext,i);
    }
};

Trigger_def_clauseContext.prototype.constraint_clause = function() {
    return this.getTypedRuleContext(Constraint_clauseContext,0);
};

Trigger_def_clauseContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

Trigger_def_clauseContext.prototype.operation_def = function() {
    return this.getTypedRuleContext(Operation_defContext,0);
};

Trigger_def_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterTrigger_def_clause(this);
	}
};

Trigger_def_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitTrigger_def_clause(this);
	}
};




ToscaParser.Trigger_def_clauseContext = Trigger_def_clauseContext;

ToscaParser.prototype.trigger_def_clause = function() {

    var localctx = new Trigger_def_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ToscaParser.RULE_trigger_def_clause);
    var _la = 0; // Token type
    try {
        this.state = 2564;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2492;
            this.descr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2493;
            this.match(ToscaParser.T__9);
            this.state = 2494;
            this.match(ToscaParser.COLON);
            this.state = 2495;
            this.match(ToscaParser.ID);
            this.state = 2496;
            this.match(ToscaParser.NEWLINE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2497;
            this.match(ToscaParser.T__9);
            this.state = 2498;
            this.match(ToscaParser.COLON);
            this.state = 2499;
            this.match(ToscaParser.NEWLINE);
            this.state = 2500;
            this.match(ToscaParser.INDENT);
            this.state = 2501;
            this.match(ToscaParser.TYPE);
            this.state = 2502;
            this.match(ToscaParser.COLON);
            this.state = 2503;
            this.match(ToscaParser.ID);
            this.state = 2504;
            this.match(ToscaParser.NEWLINE);
            this.state = 2505;
            this.match(ToscaParser.DEDENT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2506;
            this.match(ToscaParser.T__10);
            this.state = 2507;
            this.match(ToscaParser.COLON);
            this.state = 2508;
            this.value();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2509;
            this.match(ToscaParser.T__11);
            this.state = 2510;
            this.match(ToscaParser.COLON);
            this.state = 2511;
            this.match(ToscaParser.NEWLINE);
            this.state = 2512;
            this.match(ToscaParser.INDENT);
             let u = new UnorderedClauses(this); 
            this.state = 2517; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2514;
                localctx._target_filter_clause = this.target_filter_clause();
                u.add(localctx._target_filter_clause)
                this.state = 2519; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.T__18 || _la===ToscaParser.NODE || _la===ToscaParser.CAPABILITY);
            this.state = 2521;
            this.match(ToscaParser.DEDENT);
             u.check(); 
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2524;
            this.match(ToscaParser.T__12);
            this.state = 2525;
            this.match(ToscaParser.COLON);
            this.state = 2526;
            this.constraint_clause();
            this.state = 2527;
            this.match(ToscaParser.NEWLINE);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2529;
            this.match(ToscaParser.T__12);
            this.state = 2530;
            this.match(ToscaParser.COLON);
            this.state = 2531;
            this.match(ToscaParser.NEWLINE);
            this.state = 2532;
            this.match(ToscaParser.INDENT);
            this.state = 2533;
            this.match(ToscaParser.T__13);
            this.state = 2534;
            this.match(ToscaParser.COLON);
            this.state = 2535;
            this.constraint_clause();
            this.state = 2536;
            this.match(ToscaParser.NEWLINE);
            this.state = 2537;
            this.match(ToscaParser.DEDENT);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 2539;
            this.match(ToscaParser.T__14);
            this.state = 2540;
            this.match(ToscaParser.COLON);
            this.state = 2541;
            this.value();
            this.state = 2542;
            this.match(ToscaParser.NEWLINE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 2544;
            this.match(ToscaParser.T__15);
            this.state = 2545;
            this.match(ToscaParser.COLON);
            this.state = 2546;
            this.integer();
            this.state = 2547;
            this.match(ToscaParser.NEWLINE);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 2549;
            this.match(ToscaParser.T__16);
            this.state = 2550;
            this.match(ToscaParser.COLON);
            this.state = 2551;
            this.match(ToscaParser.ID);
            this.state = 2552;
            this.match(ToscaParser.NEWLINE);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2553;
            this.match(ToscaParser.T__17);
            this.state = 2554;
            this.match(ToscaParser.COLON);
            this.state = 2555;
            this.match(ToscaParser.ID);
            this.state = 2556;
            this.match(ToscaParser.NEWLINE);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2557;
            this.match(ToscaParser.T__17);
            this.state = 2558;
            this.match(ToscaParser.COLON);
            this.state = 2559;
            this.match(ToscaParser.NEWLINE);
            this.state = 2560;
            this.match(ToscaParser.INDENT);
            this.state = 2561;
            this.operation_def();
            this.state = 2562;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Target_filter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_target_filter_clause;
    return this;
}

Target_filter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Target_filter_clauseContext.prototype.constructor = Target_filter_clauseContext;

Target_filter_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Target_filter_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Target_filter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterTarget_filter_clause(this);
	}
};

Target_filter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitTarget_filter_clause(this);
	}
};




ToscaParser.Target_filter_clauseContext = Target_filter_clauseContext;

ToscaParser.prototype.target_filter_clause = function() {

    var localctx = new Target_filter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ToscaParser.RULE_target_filter_clause);
    try {
        this.state = 2578;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.NODE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2566;
            this.match(ToscaParser.NODE);
            this.state = 2567;
            this.match(ToscaParser.COLON);
            this.state = 2568;
            this.match(ToscaParser.ID);
            this.state = 2569;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.T__18:
            this.enterOuterAlt(localctx, 2);
            this.state = 2570;
            this.match(ToscaParser.T__18);
            this.state = 2571;
            this.match(ToscaParser.COLON);
            this.state = 2572;
            this.match(ToscaParser.ID);
            this.state = 2573;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.CAPABILITY:
            this.enterOuterAlt(localctx, 3);
            this.state = 2574;
            this.match(ToscaParser.CAPABILITY);
            this.state = 2575;
            this.match(ToscaParser.COLON);
            this.state = 2576;
            this.match(ToscaParser.ID);
            this.state = 2577;
            this.match(ToscaParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_filterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_filter;
    this._node_filter_clause = null; // Node_filter_clauseContext
    return this;
}

Node_filterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_filterContext.prototype.constructor = Node_filterContext;

Node_filterContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Node_filterContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Node_filterContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Node_filterContext.prototype.node_filter_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Node_filter_clauseContext);
    } else {
        return this.getTypedRuleContext(Node_filter_clauseContext,i);
    }
};

Node_filterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_filter(this);
	}
};

Node_filterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_filter(this);
	}
};




ToscaParser.Node_filterContext = Node_filterContext;

ToscaParser.prototype.node_filter = function() {

    var localctx = new Node_filterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, ToscaParser.RULE_node_filter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2580;
        this.match(ToscaParser.T__19);
        this.state = 2581;
        this.match(ToscaParser.COLON);
        this.state = 2582;
        this.match(ToscaParser.NEWLINE);
        this.state = 2583;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); 
        this.state = 2588; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2585;
            localctx._node_filter_clause = this.node_filter_clause();
            u.add(localctx._node_filter_clause)
            this.state = 2590; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.PROPERTIES || _la===ToscaParser.CAPABILITIES);
        this.state = 2592;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Node_filter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_node_filter_clause;
    return this;
}

Node_filter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Node_filter_clauseContext.prototype.constructor = Node_filter_clauseContext;

Node_filter_clauseContext.prototype.properties_filter = function() {
    return this.getTypedRuleContext(Properties_filterContext,0);
};

Node_filter_clauseContext.prototype.capabilities_filter = function() {
    return this.getTypedRuleContext(Capabilities_filterContext,0);
};

Node_filter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNode_filter_clause(this);
	}
};

Node_filter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNode_filter_clause(this);
	}
};




ToscaParser.Node_filter_clauseContext = Node_filter_clauseContext;

ToscaParser.prototype.node_filter_clause = function() {

    var localctx = new Node_filter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, ToscaParser.RULE_node_filter_clause);
    try {
        this.state = 2597;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.PROPERTIES:
            this.enterOuterAlt(localctx, 1);
            this.state = 2595;
            this.properties_filter();
            break;
        case ToscaParser.CAPABILITIES:
            this.enterOuterAlt(localctx, 2);
            this.state = 2596;
            this.capabilities_filter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Properties_filterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_properties_filter;
    return this;
}

Properties_filterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Properties_filterContext.prototype.constructor = Properties_filterContext;

Properties_filterContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Properties_filterContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Properties_filterContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Properties_filterContext.prototype.property_filter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Property_filterContext);
    } else {
        return this.getTypedRuleContext(Property_filterContext,i);
    }
};

Properties_filterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperties_filter(this);
	}
};

Properties_filterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperties_filter(this);
	}
};




ToscaParser.Properties_filterContext = Properties_filterContext;

ToscaParser.prototype.properties_filter = function() {

    var localctx = new Properties_filterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, ToscaParser.RULE_properties_filter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2599;
        this.match(ToscaParser.PROPERTIES);
        this.state = 2600;
        this.match(ToscaParser.COLON);
        this.state = 2601;
        this.match(ToscaParser.NEWLINE);
        this.state = 2602;
        this.match(ToscaParser.INDENT);
        this.state = 2604; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2603;
            this.property_filter();
            this.state = 2606; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2608;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Property_filterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_property_filter;
    return this;
}

Property_filterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Property_filterContext.prototype.constructor = Property_filterContext;

Property_filterContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Property_filterContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Property_filterContext.prototype.constraint_clause = function() {
    return this.getTypedRuleContext(Constraint_clauseContext,0);
};

Property_filterContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Property_filterContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Property_filterContext.prototype.constraints = function() {
    return this.getTypedRuleContext(ConstraintsContext,0);
};

Property_filterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterProperty_filter(this);
	}
};

Property_filterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitProperty_filter(this);
	}
};




ToscaParser.Property_filterContext = Property_filterContext;

ToscaParser.prototype.property_filter = function() {

    var localctx = new Property_filterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, ToscaParser.RULE_property_filter);
    try {
        this.state = 2625;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2610;
            this.match(ToscaParser.MINUS);
            this.state = 2611;
            this.match(ToscaParser.INDENT);
            this.state = 2612;
            this.match(ToscaParser.ID);
            this.state = 2613;
            this.match(ToscaParser.COLON);
            this.state = 2614;
            this.constraint_clause();
            this.state = 2615;
            this.match(ToscaParser.NEWLINE);
            this.state = 2616;
            this.match(ToscaParser.DEDENT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2618;
            this.match(ToscaParser.MINUS);
            this.state = 2619;
            this.match(ToscaParser.INDENT);
            this.state = 2620;
            this.match(ToscaParser.ID);
            this.state = 2621;
            this.match(ToscaParser.COLON);
            this.state = 2622;
            this.constraints();
            this.state = 2623;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capabilities_filterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capabilities_filter;
    return this;
}

Capabilities_filterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capabilities_filterContext.prototype.constructor = Capabilities_filterContext;

Capabilities_filterContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Capabilities_filterContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Capabilities_filterContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Capabilities_filterContext.prototype.capability_filter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capability_filterContext);
    } else {
        return this.getTypedRuleContext(Capability_filterContext,i);
    }
};

Capabilities_filterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapabilities_filter(this);
	}
};

Capabilities_filterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapabilities_filter(this);
	}
};




ToscaParser.Capabilities_filterContext = Capabilities_filterContext;

ToscaParser.prototype.capabilities_filter = function() {

    var localctx = new Capabilities_filterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, ToscaParser.RULE_capabilities_filter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2627;
        this.match(ToscaParser.CAPABILITIES);
        this.state = 2628;
        this.match(ToscaParser.COLON);
        this.state = 2629;
        this.match(ToscaParser.NEWLINE);
        this.state = 2630;
        this.match(ToscaParser.INDENT);
        this.state = 2632; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2631;
            this.capability_filter();
            this.state = 2634; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2636;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Capability_filterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_capability_filter;
    return this;
}

Capability_filterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capability_filterContext.prototype.constructor = Capability_filterContext;

Capability_filterContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Capability_filterContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Capability_filterContext.prototype.properties_filter = function() {
    return this.getTypedRuleContext(Properties_filterContext,0);
};

Capability_filterContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Capability_filterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterCapability_filter(this);
	}
};

Capability_filterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitCapability_filter(this);
	}
};




ToscaParser.Capability_filterContext = Capability_filterContext;

ToscaParser.prototype.capability_filter = function() {

    var localctx = new Capability_filterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, ToscaParser.RULE_capability_filter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2638;
        this.match(ToscaParser.MINUS);
        this.state = 2639;
        this.match(ToscaParser.INDENT);
        this.state = 2640;
        this.match(ToscaParser.ID);
        this.state = 2641;
        this.match(ToscaParser.COLON);
        this.state = 2642;
        this.match(ToscaParser.INDENT);
        this.state = 2643;
        this.properties_filter();
        this.state = 2644;
        this.match(ToscaParser.DEDENT);
        this.state = 2645;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declarative_node_workflowsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_declarative_node_workflows;
    return this;
}

Declarative_node_workflowsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declarative_node_workflowsContext.prototype.constructor = Declarative_node_workflowsContext;

Declarative_node_workflowsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Declarative_node_workflowsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Declarative_node_workflowsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Declarative_node_workflowsContext.prototype.declarative_node_workflow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declarative_node_workflowContext);
    } else {
        return this.getTypedRuleContext(Declarative_node_workflowContext,i);
    }
};

Declarative_node_workflowsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterDeclarative_node_workflows(this);
	}
};

Declarative_node_workflowsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitDeclarative_node_workflows(this);
	}
};




ToscaParser.Declarative_node_workflowsContext = Declarative_node_workflowsContext;

ToscaParser.prototype.declarative_node_workflows = function() {

    var localctx = new Declarative_node_workflowsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, ToscaParser.RULE_declarative_node_workflows);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2647;
        this.match(ToscaParser.WORKFLOWS);
        this.state = 2648;
        this.match(ToscaParser.COLON);
        this.state = 2649;
        this.match(ToscaParser.NEWLINE);
        this.state = 2650;
        this.match(ToscaParser.INDENT);
        this.state = 2652; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2651;
            this.declarative_node_workflow();
            this.state = 2654; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2656;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declarative_node_workflowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_declarative_node_workflow;
    this._ID = null; // Token
    this._declarative_node_workflow_clause = null; // Declarative_node_workflow_clauseContext
    return this;
}

Declarative_node_workflowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declarative_node_workflowContext.prototype.constructor = Declarative_node_workflowContext;

Declarative_node_workflowContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Declarative_node_workflowContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Declarative_node_workflowContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Declarative_node_workflowContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Declarative_node_workflowContext.prototype.declarative_node_workflow_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declarative_node_workflow_clauseContext);
    } else {
        return this.getTypedRuleContext(Declarative_node_workflow_clauseContext,i);
    }
};

Declarative_node_workflowContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterDeclarative_node_workflow(this);
	}
};

Declarative_node_workflowContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitDeclarative_node_workflow(this);
	}
};




ToscaParser.Declarative_node_workflowContext = Declarative_node_workflowContext;

ToscaParser.prototype.declarative_node_workflow = function() {

    var localctx = new Declarative_node_workflowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, ToscaParser.RULE_declarative_node_workflow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2658;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2659;
        this.match(ToscaParser.COLON);
        this.state = 2660;
        this.match(ToscaParser.NEWLINE);
        this.state = 2661;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text); 
        this.state = 2666; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2663;
            localctx._declarative_node_workflow_clause = this.declarative_node_workflow_clause();
            u.add(localctx._declarative_node_workflow_clause)
            this.state = 2668; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__20 || _la===ToscaParser.T__21 || _la===ToscaParser.METADATA || _la===ToscaParser.DESCRIPTION || _la===ToscaParser.INPUTS);
        this.state = 2670;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declarative_node_workflow_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_declarative_node_workflow_clause;
    return this;
}

Declarative_node_workflow_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declarative_node_workflow_clauseContext.prototype.constructor = Declarative_node_workflow_clauseContext;

Declarative_node_workflow_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Declarative_node_workflow_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Declarative_node_workflow_clauseContext.prototype.inputs = function() {
    return this.getTypedRuleContext(InputsContext,0);
};

Declarative_node_workflow_clauseContext.prototype.workflow_preconditions = function() {
    return this.getTypedRuleContext(Workflow_preconditionsContext,0);
};

Declarative_node_workflow_clauseContext.prototype.workflow_steps = function() {
    return this.getTypedRuleContext(Workflow_stepsContext,0);
};

Declarative_node_workflow_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterDeclarative_node_workflow_clause(this);
	}
};

Declarative_node_workflow_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitDeclarative_node_workflow_clause(this);
	}
};




ToscaParser.Declarative_node_workflow_clauseContext = Declarative_node_workflow_clauseContext;

ToscaParser.prototype.declarative_node_workflow_clause = function() {

    var localctx = new Declarative_node_workflow_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, ToscaParser.RULE_declarative_node_workflow_clause);
    try {
        this.state = 2678;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 2673;
            this.descr();
            break;
        case ToscaParser.METADATA:
            this.enterOuterAlt(localctx, 2);
            this.state = 2674;
            this.entity_metadata();
            break;
        case ToscaParser.INPUTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 2675;
            this.inputs();
            break;
        case ToscaParser.T__20:
            this.enterOuterAlt(localctx, 4);
            this.state = 2676;
            this.workflow_preconditions();
            break;
        case ToscaParser.T__21:
            this.enterOuterAlt(localctx, 5);
            this.state = 2677;
            this.workflow_steps();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declarative_rel_workflowsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_declarative_rel_workflows;
    return this;
}

Declarative_rel_workflowsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declarative_rel_workflowsContext.prototype.constructor = Declarative_rel_workflowsContext;

Declarative_rel_workflowsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Declarative_rel_workflowsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Declarative_rel_workflowsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Declarative_rel_workflowsContext.prototype.declarative_rel_workflow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declarative_rel_workflowContext);
    } else {
        return this.getTypedRuleContext(Declarative_rel_workflowContext,i);
    }
};

Declarative_rel_workflowsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterDeclarative_rel_workflows(this);
	}
};

Declarative_rel_workflowsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitDeclarative_rel_workflows(this);
	}
};




ToscaParser.Declarative_rel_workflowsContext = Declarative_rel_workflowsContext;

ToscaParser.prototype.declarative_rel_workflows = function() {

    var localctx = new Declarative_rel_workflowsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, ToscaParser.RULE_declarative_rel_workflows);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2680;
        this.match(ToscaParser.WORKFLOWS);
        this.state = 2681;
        this.match(ToscaParser.COLON);
        this.state = 2682;
        this.match(ToscaParser.NEWLINE);
        this.state = 2683;
        this.match(ToscaParser.INDENT);
        this.state = 2685; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2684;
            this.declarative_rel_workflow();
            this.state = 2687; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2689;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declarative_rel_workflowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_declarative_rel_workflow;
    this._ID = null; // Token
    this._declarative_rel_workflow_clause = null; // Declarative_rel_workflow_clauseContext
    return this;
}

Declarative_rel_workflowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declarative_rel_workflowContext.prototype.constructor = Declarative_rel_workflowContext;

Declarative_rel_workflowContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Declarative_rel_workflowContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Declarative_rel_workflowContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Declarative_rel_workflowContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Declarative_rel_workflowContext.prototype.declarative_rel_workflow_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declarative_rel_workflow_clauseContext);
    } else {
        return this.getTypedRuleContext(Declarative_rel_workflow_clauseContext,i);
    }
};

Declarative_rel_workflowContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterDeclarative_rel_workflow(this);
	}
};

Declarative_rel_workflowContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitDeclarative_rel_workflow(this);
	}
};




ToscaParser.Declarative_rel_workflowContext = Declarative_rel_workflowContext;

ToscaParser.prototype.declarative_rel_workflow = function() {

    var localctx = new Declarative_rel_workflowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, ToscaParser.RULE_declarative_rel_workflow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2691;
        localctx._ID = this.match(ToscaParser.ID);
        this.state = 2692;
        this.match(ToscaParser.COLON);
        this.state = 2693;
        this.match(ToscaParser.NEWLINE);
        this.state = 2694;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); u.label = (localctx._ID===null ? null : localctx._ID.text); 
        this.state = 2699; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2696;
            localctx._declarative_rel_workflow_clause = this.declarative_rel_workflow_clause();
            u.add(localctx._declarative_rel_workflow_clause)
            this.state = 2701; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__20 || _la===ToscaParser.METADATA || _la===ToscaParser.DESCRIPTION || _la===ToscaParser.INPUTS || _la===ToscaParser.TARGET_WEAVING || _la===ToscaParser.SOURCE_WEAVING);
        this.state = 2703;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declarative_rel_workflow_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_declarative_rel_workflow_clause;
    return this;
}

Declarative_rel_workflow_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declarative_rel_workflow_clauseContext.prototype.constructor = Declarative_rel_workflow_clauseContext;

Declarative_rel_workflow_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Declarative_rel_workflow_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Declarative_rel_workflow_clauseContext.prototype.inputs = function() {
    return this.getTypedRuleContext(InputsContext,0);
};

Declarative_rel_workflow_clauseContext.prototype.workflow_preconditions = function() {
    return this.getTypedRuleContext(Workflow_preconditionsContext,0);
};

Declarative_rel_workflow_clauseContext.prototype.workflow_source_weavings = function() {
    return this.getTypedRuleContext(Workflow_source_weavingsContext,0);
};

Declarative_rel_workflow_clauseContext.prototype.workflow_target_weavings = function() {
    return this.getTypedRuleContext(Workflow_target_weavingsContext,0);
};

Declarative_rel_workflow_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterDeclarative_rel_workflow_clause(this);
	}
};

Declarative_rel_workflow_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitDeclarative_rel_workflow_clause(this);
	}
};




ToscaParser.Declarative_rel_workflow_clauseContext = Declarative_rel_workflow_clauseContext;

ToscaParser.prototype.declarative_rel_workflow_clause = function() {

    var localctx = new Declarative_rel_workflow_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, ToscaParser.RULE_declarative_rel_workflow_clause);
    try {
        this.state = 2712;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 2706;
            this.descr();
            break;
        case ToscaParser.METADATA:
            this.enterOuterAlt(localctx, 2);
            this.state = 2707;
            this.entity_metadata();
            break;
        case ToscaParser.INPUTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 2708;
            this.inputs();
            break;
        case ToscaParser.T__20:
            this.enterOuterAlt(localctx, 4);
            this.state = 2709;
            this.workflow_preconditions();
            break;
        case ToscaParser.SOURCE_WEAVING:
            this.enterOuterAlt(localctx, 5);
            this.state = 2710;
            this.workflow_source_weavings();
            break;
        case ToscaParser.TARGET_WEAVING:
            this.enterOuterAlt(localctx, 6);
            this.state = 2711;
            this.workflow_target_weavings();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_source_weavingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_source_weavings;
    return this;
}

Workflow_source_weavingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_source_weavingsContext.prototype.constructor = Workflow_source_weavingsContext;

Workflow_source_weavingsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_source_weavingsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_source_weavingsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_source_weavingsContext.prototype.workflow_source_weaving = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_source_weavingContext);
    } else {
        return this.getTypedRuleContext(Workflow_source_weavingContext,i);
    }
};

Workflow_source_weavingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_source_weavings(this);
	}
};

Workflow_source_weavingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_source_weavings(this);
	}
};




ToscaParser.Workflow_source_weavingsContext = Workflow_source_weavingsContext;

ToscaParser.prototype.workflow_source_weavings = function() {

    var localctx = new Workflow_source_weavingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, ToscaParser.RULE_workflow_source_weavings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2714;
        this.match(ToscaParser.SOURCE_WEAVING);
        this.state = 2715;
        this.match(ToscaParser.COLON);
        this.state = 2716;
        this.match(ToscaParser.NEWLINE);
        this.state = 2717;
        this.match(ToscaParser.INDENT);
        this.state = 2719; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2718;
            this.workflow_source_weaving();
            this.state = 2721; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2723;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_target_weavingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_target_weavings;
    return this;
}

Workflow_target_weavingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_target_weavingsContext.prototype.constructor = Workflow_target_weavingsContext;

Workflow_target_weavingsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_target_weavingsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_target_weavingsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_target_weavingsContext.prototype.workflow_target_weaving = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_target_weavingContext);
    } else {
        return this.getTypedRuleContext(Workflow_target_weavingContext,i);
    }
};

Workflow_target_weavingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_target_weavings(this);
	}
};

Workflow_target_weavingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_target_weavings(this);
	}
};




ToscaParser.Workflow_target_weavingsContext = Workflow_target_weavingsContext;

ToscaParser.prototype.workflow_target_weavings = function() {

    var localctx = new Workflow_target_weavingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, ToscaParser.RULE_workflow_target_weavings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2725;
        this.match(ToscaParser.TARGET_WEAVING);
        this.state = 2726;
        this.match(ToscaParser.COLON);
        this.state = 2727;
        this.match(ToscaParser.NEWLINE);
        this.state = 2728;
        this.match(ToscaParser.INDENT);
        this.state = 2730; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2729;
            this.workflow_target_weaving();
            this.state = 2732; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2734;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_source_weavingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_source_weaving;
    this._workflow_source_weaving_clause = null; // Workflow_source_weaving_clauseContext
    return this;
}

Workflow_source_weavingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_source_weavingContext.prototype.constructor = Workflow_source_weavingContext;

Workflow_source_weavingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_source_weavingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_source_weavingContext.prototype.workflow_source_weaving_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_source_weaving_clauseContext);
    } else {
        return this.getTypedRuleContext(Workflow_source_weaving_clauseContext,i);
    }
};

Workflow_source_weavingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_source_weaving(this);
	}
};

Workflow_source_weavingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_source_weaving(this);
	}
};




ToscaParser.Workflow_source_weavingContext = Workflow_source_weavingContext;

ToscaParser.prototype.workflow_source_weaving = function() {

    var localctx = new Workflow_source_weavingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, ToscaParser.RULE_workflow_source_weaving);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2736;
        this.match(ToscaParser.MINUS);
        this.state = 2737;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); 
        this.state = 2742; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2739;
            localctx._workflow_source_weaving_clause = this.workflow_source_weaving_clause();
            u.add(localctx._workflow_source_weaving_clause)
            this.state = 2744; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (ToscaParser.AFTER - 175)) | (1 << (ToscaParser.BEFORE - 175)) | (1 << (ToscaParser.WAIT_TARGET - 175)) | (1 << (ToscaParser.AFTER_TARGET - 175)) | (1 << (ToscaParser.ACTIVITY - 175)))) !== 0));
        this.state = 2746;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_source_weaving_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_source_weaving_clause;
    return this;
}

Workflow_source_weaving_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_source_weaving_clauseContext.prototype.constructor = Workflow_source_weaving_clauseContext;

Workflow_source_weaving_clauseContext.prototype.workflow_state = function() {
    return this.getTypedRuleContext(Workflow_stateContext,0);
};

Workflow_source_weaving_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_source_weaving_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Workflow_source_weaving_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_source_weaving_clause(this);
	}
};

Workflow_source_weaving_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_source_weaving_clause(this);
	}
};




ToscaParser.Workflow_source_weaving_clauseContext = Workflow_source_weaving_clauseContext;

ToscaParser.prototype.workflow_source_weaving_clause = function() {

    var localctx = new Workflow_source_weaving_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, ToscaParser.RULE_workflow_source_weaving_clause);
    var _la = 0; // Token type
    try {
        this.state = 2762;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.AFTER:
        case ToscaParser.BEFORE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2749;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.AFTER || _la===ToscaParser.BEFORE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2750;
            this.match(ToscaParser.COLON);
            this.state = 2751;
            this.workflow_state();
            this.state = 2752;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.WAIT_TARGET:
        case ToscaParser.AFTER_TARGET:
            this.enterOuterAlt(localctx, 2);
            this.state = 2754;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.WAIT_TARGET || _la===ToscaParser.AFTER_TARGET)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2755;
            this.match(ToscaParser.COLON);
            this.state = 2756;
            this.match(ToscaParser.ID);
            this.state = 2757;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.ACTIVITY:
            this.enterOuterAlt(localctx, 3);
            this.state = 2758;
            this.match(ToscaParser.ACTIVITY);
            this.state = 2759;
            this.match(ToscaParser.COLON);
            this.state = 2760;
            this.match(ToscaParser.ID);
            this.state = 2761;
            this.match(ToscaParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_target_weavingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_target_weaving;
    this._workflow_target_weaving_clause = null; // Workflow_target_weaving_clauseContext
    return this;
}

Workflow_target_weavingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_target_weavingContext.prototype.constructor = Workflow_target_weavingContext;

Workflow_target_weavingContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_target_weavingContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_target_weavingContext.prototype.workflow_target_weaving_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_target_weaving_clauseContext);
    } else {
        return this.getTypedRuleContext(Workflow_target_weaving_clauseContext,i);
    }
};

Workflow_target_weavingContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_target_weaving(this);
	}
};

Workflow_target_weavingContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_target_weaving(this);
	}
};




ToscaParser.Workflow_target_weavingContext = Workflow_target_weavingContext;

ToscaParser.prototype.workflow_target_weaving = function() {

    var localctx = new Workflow_target_weavingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, ToscaParser.RULE_workflow_target_weaving);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2764;
        this.match(ToscaParser.MINUS);
        this.state = 2765;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); 
        this.state = 2770; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2767;
            localctx._workflow_target_weaving_clause = this.workflow_target_weaving_clause();
            u.add(localctx._workflow_target_weaving_clause)
            this.state = 2772; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 175)) & ~0x1f) == 0 && ((1 << (_la - 175)) & ((1 << (ToscaParser.AFTER - 175)) | (1 << (ToscaParser.BEFORE - 175)) | (1 << (ToscaParser.WAIT_SOURCE - 175)) | (1 << (ToscaParser.AFTER_SOURCE - 175)) | (1 << (ToscaParser.ACTIVITY - 175)))) !== 0));
        this.state = 2774;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_target_weaving_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_target_weaving_clause;
    return this;
}

Workflow_target_weaving_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_target_weaving_clauseContext.prototype.constructor = Workflow_target_weaving_clauseContext;

Workflow_target_weaving_clauseContext.prototype.workflow_state = function() {
    return this.getTypedRuleContext(Workflow_stateContext,0);
};

Workflow_target_weaving_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_target_weaving_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Workflow_target_weaving_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_target_weaving_clause(this);
	}
};

Workflow_target_weaving_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_target_weaving_clause(this);
	}
};




ToscaParser.Workflow_target_weaving_clauseContext = Workflow_target_weaving_clauseContext;

ToscaParser.prototype.workflow_target_weaving_clause = function() {

    var localctx = new Workflow_target_weaving_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, ToscaParser.RULE_workflow_target_weaving_clause);
    var _la = 0; // Token type
    try {
        this.state = 2789;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.AFTER:
        case ToscaParser.BEFORE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2777;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.AFTER || _la===ToscaParser.BEFORE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2778;
            this.match(ToscaParser.COLON);
            this.state = 2779;
            this.workflow_state();
            this.state = 2780;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.WAIT_SOURCE:
        case ToscaParser.AFTER_SOURCE:
            this.enterOuterAlt(localctx, 2);
            this.state = 2782;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.WAIT_SOURCE || _la===ToscaParser.AFTER_SOURCE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2783;
            this.match(ToscaParser.COLON);
            this.state = 2784;
            this.match(ToscaParser.ID);
            this.state = 2785;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.ACTIVITY:
            this.enterOuterAlt(localctx, 3);
            this.state = 2786;
            this.match(ToscaParser.ACTIVITY);
            this.state = 2787;
            this.match(ToscaParser.COLON);
            this.state = 2788;
            this.match(ToscaParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_preconditionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_preconditions;
    return this;
}

Workflow_preconditionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_preconditionsContext.prototype.constructor = Workflow_preconditionsContext;

Workflow_preconditionsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_preconditionsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_preconditionsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_preconditionsContext.prototype.workflow_precondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_preconditionContext);
    } else {
        return this.getTypedRuleContext(Workflow_preconditionContext,i);
    }
};

Workflow_preconditionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_preconditions(this);
	}
};

Workflow_preconditionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_preconditions(this);
	}
};




ToscaParser.Workflow_preconditionsContext = Workflow_preconditionsContext;

ToscaParser.prototype.workflow_preconditions = function() {

    var localctx = new Workflow_preconditionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, ToscaParser.RULE_workflow_preconditions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2791;
        this.match(ToscaParser.T__20);
        this.state = 2792;
        this.match(ToscaParser.COLON);
        this.state = 2793;
        this.match(ToscaParser.NEWLINE);
        this.state = 2794;
        this.match(ToscaParser.INDENT);
        this.state = 2796; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2795;
            this.workflow_precondition();
            this.state = 2798; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2800;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_preconditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_precondition;
    this._workflow_precondition_clause = null; // Workflow_precondition_clauseContext
    return this;
}

Workflow_preconditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_preconditionContext.prototype.constructor = Workflow_preconditionContext;

Workflow_preconditionContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_preconditionContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_preconditionContext.prototype.workflow_precondition_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_precondition_clauseContext);
    } else {
        return this.getTypedRuleContext(Workflow_precondition_clauseContext,i);
    }
};

Workflow_preconditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_precondition(this);
	}
};

Workflow_preconditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_precondition(this);
	}
};




ToscaParser.Workflow_preconditionContext = Workflow_preconditionContext;

ToscaParser.prototype.workflow_precondition = function() {

    var localctx = new Workflow_preconditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, ToscaParser.RULE_workflow_precondition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2802;
        this.match(ToscaParser.MINUS);
        this.state = 2803;
        this.match(ToscaParser.INDENT);
         let u = new UnorderedClauses(this); 
        this.state = 2808; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2805;
            localctx._workflow_precondition_clause = this.workflow_precondition_clause();
            u.add(localctx._workflow_precondition_clause)
            this.state = 2810; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__12 || _la===ToscaParser.TARGET || _la===ToscaParser.TARGET_RELATIONSHIP);
        this.state = 2812;
        this.match(ToscaParser.DEDENT);
         u.check(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_precondition_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_precondition_clause;
    return this;
}

Workflow_precondition_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_precondition_clauseContext.prototype.constructor = Workflow_precondition_clauseContext;

Workflow_precondition_clauseContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Workflow_precondition_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_precondition_clauseContext.prototype.workflow_condition_clauses = function() {
    return this.getTypedRuleContext(Workflow_condition_clausesContext,0);
};

Workflow_precondition_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_precondition_clause(this);
	}
};

Workflow_precondition_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_precondition_clause(this);
	}
};




ToscaParser.Workflow_precondition_clauseContext = Workflow_precondition_clauseContext;

ToscaParser.prototype.workflow_precondition_clause = function() {

    var localctx = new Workflow_precondition_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, ToscaParser.RULE_workflow_precondition_clause);
    try {
        this.state = 2824;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.TARGET:
            this.enterOuterAlt(localctx, 1);
            this.state = 2815;
            this.match(ToscaParser.TARGET);
            this.state = 2816;
            this.match(ToscaParser.COLON);
            this.state = 2817;
            this.match(ToscaParser.ID);
            this.state = 2818;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.TARGET_RELATIONSHIP:
            this.enterOuterAlt(localctx, 2);
            this.state = 2819;
            this.match(ToscaParser.TARGET_RELATIONSHIP);
            this.state = 2820;
            this.match(ToscaParser.COLON);
            this.state = 2821;
            this.match(ToscaParser.ID);
            this.state = 2822;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.T__12:
            this.enterOuterAlt(localctx, 3);
            this.state = 2823;
            this.workflow_condition_clauses();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_condition_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_condition_clauses;
    return this;
}

Workflow_condition_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_condition_clausesContext.prototype.constructor = Workflow_condition_clausesContext;

Workflow_condition_clausesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_condition_clausesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_condition_clausesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_condition_clausesContext.prototype.workflow_condition_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_condition_clauseContext);
    } else {
        return this.getTypedRuleContext(Workflow_condition_clauseContext,i);
    }
};

Workflow_condition_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_condition_clauses(this);
	}
};

Workflow_condition_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_condition_clauses(this);
	}
};




ToscaParser.Workflow_condition_clausesContext = Workflow_condition_clausesContext;

ToscaParser.prototype.workflow_condition_clauses = function() {

    var localctx = new Workflow_condition_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, ToscaParser.RULE_workflow_condition_clauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2826;
        this.match(ToscaParser.T__12);
        this.state = 2827;
        this.match(ToscaParser.COLON);
        this.state = 2828;
        this.match(ToscaParser.NEWLINE);
        this.state = 2829;
        this.match(ToscaParser.INDENT);
        this.state = 2831; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2830;
            this.workflow_condition_clause();
            this.state = 2833; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2835;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_filter_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_filter_clauses;
    return this;
}

Workflow_filter_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_filter_clausesContext.prototype.constructor = Workflow_filter_clausesContext;

Workflow_filter_clausesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_filter_clausesContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_filter_clausesContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_filter_clausesContext.prototype.workflow_condition_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_condition_clauseContext);
    } else {
        return this.getTypedRuleContext(Workflow_condition_clauseContext,i);
    }
};

Workflow_filter_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_filter_clauses(this);
	}
};

Workflow_filter_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_filter_clauses(this);
	}
};




ToscaParser.Workflow_filter_clausesContext = Workflow_filter_clausesContext;

ToscaParser.prototype.workflow_filter_clauses = function() {

    var localctx = new Workflow_filter_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, ToscaParser.RULE_workflow_filter_clauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2837;
        this.match(ToscaParser.FILTER);
        this.state = 2838;
        this.match(ToscaParser.COLON);
        this.state = 2839;
        this.match(ToscaParser.NEWLINE);
        this.state = 2840;
        this.match(ToscaParser.INDENT);
        this.state = 2842; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2841;
            this.workflow_condition_clause();
            this.state = 2844; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2846;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_condition_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_condition_clause;
    return this;
}

Workflow_condition_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_condition_clauseContext.prototype.constructor = Workflow_condition_clauseContext;

Workflow_condition_clauseContext.prototype.workflow_condition_or_clause = function() {
    return this.getTypedRuleContext(Workflow_condition_or_clauseContext,0);
};

Workflow_condition_clauseContext.prototype.workflow_condition_and_clause = function() {
    return this.getTypedRuleContext(Workflow_condition_and_clauseContext,0);
};

Workflow_condition_clauseContext.prototype.workflow_condition_assert_clause = function() {
    return this.getTypedRuleContext(Workflow_condition_assert_clauseContext,0);
};

Workflow_condition_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_condition_clause(this);
	}
};

Workflow_condition_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_condition_clause(this);
	}
};




ToscaParser.Workflow_condition_clauseContext = Workflow_condition_clauseContext;

ToscaParser.prototype.workflow_condition_clause = function() {

    var localctx = new Workflow_condition_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, ToscaParser.RULE_workflow_condition_clause);
    try {
        this.state = 2851;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2848;
            this.workflow_condition_or_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2849;
            this.workflow_condition_and_clause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2850;
            this.workflow_condition_assert_clause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_condition_or_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_condition_or_clause;
    return this;
}

Workflow_condition_or_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_condition_or_clauseContext.prototype.constructor = Workflow_condition_or_clauseContext;

Workflow_condition_or_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Workflow_condition_or_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_condition_or_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Workflow_condition_or_clauseContext.prototype.workflow_condition_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_condition_clauseContext);
    } else {
        return this.getTypedRuleContext(Workflow_condition_clauseContext,i);
    }
};

Workflow_condition_or_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_condition_or_clause(this);
	}
};

Workflow_condition_or_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_condition_or_clause(this);
	}
};




ToscaParser.Workflow_condition_or_clauseContext = Workflow_condition_or_clauseContext;

ToscaParser.prototype.workflow_condition_or_clause = function() {

    var localctx = new Workflow_condition_or_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, ToscaParser.RULE_workflow_condition_or_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2853;
        this.match(ToscaParser.MINUS);
        this.state = 2854;
        this.match(ToscaParser.INDENT);
        this.state = 2855;
        this.match(ToscaParser.OR);
        this.state = 2856;
        this.match(ToscaParser.COLON);
        this.state = 2857;
        this.match(ToscaParser.NEWLINE);
        this.state = 2858;
        this.match(ToscaParser.INDENT);
        this.state = 2860; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2859;
            this.workflow_condition_clause();
            this.state = 2862; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2864;
        this.match(ToscaParser.DEDENT);
        this.state = 2865;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_condition_and_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_condition_and_clause;
    return this;
}

Workflow_condition_and_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_condition_and_clauseContext.prototype.constructor = Workflow_condition_and_clauseContext;

Workflow_condition_and_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Workflow_condition_and_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_condition_and_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Workflow_condition_and_clauseContext.prototype.workflow_condition_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_condition_clauseContext);
    } else {
        return this.getTypedRuleContext(Workflow_condition_clauseContext,i);
    }
};

Workflow_condition_and_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_condition_and_clause(this);
	}
};

Workflow_condition_and_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_condition_and_clause(this);
	}
};




ToscaParser.Workflow_condition_and_clauseContext = Workflow_condition_and_clauseContext;

ToscaParser.prototype.workflow_condition_and_clause = function() {

    var localctx = new Workflow_condition_and_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, ToscaParser.RULE_workflow_condition_and_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2867;
        this.match(ToscaParser.MINUS);
        this.state = 2868;
        this.match(ToscaParser.INDENT);
        this.state = 2869;
        this.match(ToscaParser.AND);
        this.state = 2870;
        this.match(ToscaParser.COLON);
        this.state = 2871;
        this.match(ToscaParser.NEWLINE);
        this.state = 2872;
        this.match(ToscaParser.INDENT);
        this.state = 2874; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2873;
            this.workflow_condition_clause();
            this.state = 2876; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.MINUS);
        this.state = 2878;
        this.match(ToscaParser.DEDENT);
        this.state = 2879;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_condition_assert_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_condition_assert_clause;
    return this;
}

Workflow_condition_assert_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_condition_assert_clauseContext.prototype.constructor = Workflow_condition_assert_clauseContext;

Workflow_condition_assert_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Workflow_condition_assert_clauseContext.prototype.workflow_assertion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_assertionContext);
    } else {
        return this.getTypedRuleContext(Workflow_assertionContext,i);
    }
};

Workflow_condition_assert_clauseContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_condition_assert_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Workflow_condition_assert_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_condition_assert_clause(this);
	}
};

Workflow_condition_assert_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_condition_assert_clause(this);
	}
};




ToscaParser.Workflow_condition_assert_clauseContext = Workflow_condition_assert_clauseContext;

ToscaParser.prototype.workflow_condition_assert_clause = function() {

    var localctx = new Workflow_condition_assert_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, ToscaParser.RULE_workflow_condition_assert_clause);
    var _la = 0; // Token type
    try {
        this.state = 2912;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2881;
            this.match(ToscaParser.MINUS);
            this.state = 2882;
            this.match(ToscaParser.INDENT);
            this.state = 2883;
            this.match(ToscaParser.ASSERT);
            this.state = 2884;
            this.match(ToscaParser.COLON);
            this.state = 2885;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 2886;
            this.workflow_assertion();
            this.state = 2891;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 2887;
                this.match(ToscaParser.COMMA);
                this.state = 2888;
                this.workflow_assertion();
                this.state = 2893;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2894;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 2895;
            this.match(ToscaParser.NEWLINE);
            this.state = 2896;
            this.match(ToscaParser.DEDENT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2898;
            this.match(ToscaParser.MINUS);
            this.state = 2899;
            this.match(ToscaParser.INDENT);
            this.state = 2900;
            this.match(ToscaParser.ASSERT);
            this.state = 2901;
            this.match(ToscaParser.COLON);
            this.state = 2902;
            this.match(ToscaParser.NEWLINE);
            this.state = 2903;
            this.match(ToscaParser.INDENT);
            this.state = 2905; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2904;
                this.workflow_assertion();
                this.state = 2907; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.ID);
            this.state = 2909;
            this.match(ToscaParser.DEDENT);
            this.state = 2910;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_assertionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_assertion;
    return this;
}

Workflow_assertionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_assertionContext.prototype.constructor = Workflow_assertionContext;

Workflow_assertionContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Workflow_assertionContext.prototype.constraint_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constraint_clauseContext);
    } else {
        return this.getTypedRuleContext(Constraint_clauseContext,i);
    }
};

Workflow_assertionContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_assertionContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_assertionContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_assertionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_assertion(this);
	}
};

Workflow_assertionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_assertion(this);
	}
};




ToscaParser.Workflow_assertionContext = Workflow_assertionContext;

ToscaParser.prototype.workflow_assertion = function() {

    var localctx = new Workflow_assertionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, ToscaParser.RULE_workflow_assertion);
    var _la = 0; // Token type
    try {
        this.state = 2945;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2914;
            this.match(ToscaParser.ID);
            this.state = 2915;
            this.match(ToscaParser.COLON);
            this.state = 2916;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 2917;
            this.match(ToscaParser.OPEN_BRACE);
            this.state = 2918;
            this.constraint_clause();
            this.state = 2919;
            this.match(ToscaParser.CLOSE_BRACE);
            this.state = 2927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 2920;
                this.match(ToscaParser.COMMA);
                this.state = 2921;
                this.match(ToscaParser.OPEN_BRACE);
                this.state = 2922;
                this.constraint_clause();
                this.state = 2923;
                this.match(ToscaParser.CLOSE_BRACE);
                this.state = 2929;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2930;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 2931;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2933;
            this.match(ToscaParser.ID);
            this.state = 2934;
            this.match(ToscaParser.COLON);
            this.state = 2935;
            this.match(ToscaParser.NEWLINE);
            this.state = 2936;
            this.match(ToscaParser.INDENT);
            this.state = 2939; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2937;
                this.match(ToscaParser.MINUS);
                this.state = 2938;
                this.constraint_clause();
                this.state = 2941; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 2943;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_stepsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_steps;
    return this;
}

Workflow_stepsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_stepsContext.prototype.constructor = Workflow_stepsContext;

Workflow_stepsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_stepsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_stepsContext.prototype.workflow_step = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_stepContext);
    } else {
        return this.getTypedRuleContext(Workflow_stepContext,i);
    }
};

Workflow_stepsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_steps(this);
	}
};

Workflow_stepsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_steps(this);
	}
};




ToscaParser.Workflow_stepsContext = Workflow_stepsContext;

ToscaParser.prototype.workflow_steps = function() {

    var localctx = new Workflow_stepsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, ToscaParser.RULE_workflow_steps);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2947;
        this.match(ToscaParser.T__21);
        this.state = 2948;
        this.match(ToscaParser.COLON);
        this.state = 2949;
        this.match(ToscaParser.INDENT);
        this.state = 2951; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2950;
            this.workflow_step();
            this.state = 2953; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 2955;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_stepContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_step;
    return this;
}

Workflow_stepContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_stepContext.prototype.constructor = Workflow_stepContext;

Workflow_stepContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Workflow_stepContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_stepContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Workflow_stepContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Workflow_stepContext.prototype.workflow_step_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_step_clauseContext);
    } else {
        return this.getTypedRuleContext(Workflow_step_clauseContext,i);
    }
};

Workflow_stepContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_step(this);
	}
};

Workflow_stepContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_step(this);
	}
};




ToscaParser.Workflow_stepContext = Workflow_stepContext;

ToscaParser.prototype.workflow_step = function() {

    var localctx = new Workflow_stepContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, ToscaParser.RULE_workflow_step);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2957;
        this.match(ToscaParser.ID);
        this.state = 2958;
        this.match(ToscaParser.COLON);
        this.state = 2959;
        this.match(ToscaParser.NEWLINE);
        this.state = 2960;
        this.match(ToscaParser.INDENT);
        this.state = 2962; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2961;
            this.workflow_step_clause();
            this.state = 2964; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 164)) & ~0x1f) == 0 && ((1 << (_la - 164)) & ((1 << (ToscaParser.TARGET - 164)) | (1 << (ToscaParser.TARGET_RELATIONSHIP - 164)) | (1 << (ToscaParser.FILTER - 164)) | (1 << (ToscaParser.ACTIVITIES - 164)) | (1 << (ToscaParser.OPERATION_HOST - 164)) | (1 << (ToscaParser.ON_SUCCESS - 164)) | (1 << (ToscaParser.ON_FAILURE - 164)))) !== 0));
        this.state = 2966;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_step_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_step_clause;
    return this;
}

Workflow_step_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_step_clauseContext.prototype.constructor = Workflow_step_clauseContext;

Workflow_step_clauseContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Workflow_step_clauseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


Workflow_step_clauseContext.prototype.workflow_filter_clauses = function() {
    return this.getTypedRuleContext(Workflow_filter_clausesContext,0);
};

Workflow_step_clauseContext.prototype.workflow_activities = function() {
    return this.getTypedRuleContext(Workflow_activitiesContext,0);
};

Workflow_step_clauseContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Workflow_step_clauseContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Workflow_step_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_step_clause(this);
	}
};

Workflow_step_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_step_clause(this);
	}
};




ToscaParser.Workflow_step_clauseContext = Workflow_step_clauseContext;

ToscaParser.prototype.workflow_step_clause = function() {

    var localctx = new Workflow_step_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, ToscaParser.RULE_workflow_step_clause);
    var _la = 0; // Token type
    try {
        this.state = 3036;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2968;
            this.match(ToscaParser.TARGET);
            this.state = 2969;
            this.match(ToscaParser.COLON);
            this.state = 2970;
            this.match(ToscaParser.ID);
            this.state = 2971;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2972;
            this.match(ToscaParser.TARGET_RELATIONSHIP);
            this.state = 2973;
            this.match(ToscaParser.COLON);
            this.state = 2974;
            this.match(ToscaParser.ID);
            this.state = 2975;
            this.match(ToscaParser.NEWLINE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2976;
            this.workflow_filter_clauses();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 2977;
            this.workflow_activities();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 2978;
            this.match(ToscaParser.OPERATION_HOST);
            this.state = 2979;
            this.match(ToscaParser.COLON);
            this.state = 2980;
            this.match(ToscaParser.ID);
            this.state = 2981;
            this.match(ToscaParser.NEWLINE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 2982;
            this.match(ToscaParser.ON_SUCCESS);
            this.state = 2983;
            this.match(ToscaParser.COLON);
            this.state = 2984;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 2985;
            this.match(ToscaParser.ID);
            this.state = 2990;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 2986;
                this.match(ToscaParser.COMMA);
                this.state = 2987;
                this.match(ToscaParser.ID);
                this.state = 2992;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2993;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 2994;
            this.match(ToscaParser.NEWLINE);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 2995;
            this.match(ToscaParser.ON_SUCCESS);
            this.state = 2996;
            this.match(ToscaParser.COLON);
            this.state = 2997;
            this.match(ToscaParser.NEWLINE);
            this.state = 2998;
            this.match(ToscaParser.INDENT);
            this.state = 3004; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2999;
                this.match(ToscaParser.MINUS);
                this.state = 3000;
                this.match(ToscaParser.INDENT);
                this.state = 3001;
                this.match(ToscaParser.ID);
                this.state = 3002;
                this.match(ToscaParser.NEWLINE);
                this.state = 3003;
                this.match(ToscaParser.DEDENT);
                this.state = 3006; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 3008;
            this.match(ToscaParser.DEDENT);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 3009;
            this.match(ToscaParser.ON_FAILURE);
            this.state = 3010;
            this.match(ToscaParser.COLON);
            this.state = 3011;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 3012;
            this.match(ToscaParser.ID);
            this.state = 3017;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 3013;
                this.match(ToscaParser.COMMA);
                this.state = 3014;
                this.match(ToscaParser.ID);
                this.state = 3019;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3020;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 3021;
            this.match(ToscaParser.NEWLINE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 3022;
            this.match(ToscaParser.ON_FAILURE);
            this.state = 3023;
            this.match(ToscaParser.COLON);
            this.state = 3024;
            this.match(ToscaParser.NEWLINE);
            this.state = 3025;
            this.match(ToscaParser.INDENT);
            this.state = 3031; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3026;
                this.match(ToscaParser.MINUS);
                this.state = 3027;
                this.match(ToscaParser.INDENT);
                this.state = 3028;
                this.match(ToscaParser.ID);
                this.state = 3029;
                this.match(ToscaParser.NEWLINE);
                this.state = 3030;
                this.match(ToscaParser.DEDENT);
                this.state = 3033; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 3035;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_activitiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_activities;
    return this;
}

Workflow_activitiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_activitiesContext.prototype.constructor = Workflow_activitiesContext;

Workflow_activitiesContext.prototype.workflow_activity = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Workflow_activityContext);
    } else {
        return this.getTypedRuleContext(Workflow_activityContext,i);
    }
};

Workflow_activitiesContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_activitiesContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


Workflow_activitiesContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


Workflow_activitiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_activities(this);
	}
};

Workflow_activitiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_activities(this);
	}
};




ToscaParser.Workflow_activitiesContext = Workflow_activitiesContext;

ToscaParser.prototype.workflow_activities = function() {

    var localctx = new Workflow_activitiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, ToscaParser.RULE_workflow_activities);
    var _la = 0; // Token type
    try {
        this.state = 3067;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3038;
            this.match(ToscaParser.ACTIVITIES);
            this.state = 3039;
            this.match(ToscaParser.COLON);
            this.state = 3040;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 3041;
            this.workflow_activity();
            this.state = 3046;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ToscaParser.COMMA) {
                this.state = 3042;
                this.match(ToscaParser.COMMA);
                this.state = 3043;
                this.workflow_activity();
                this.state = 3048;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3049;
            this.match(ToscaParser.CLOSE_BRACK);
            this.state = 3050;
            this.match(ToscaParser.NEWLINE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3052;
            this.match(ToscaParser.ACTIVITIES);
            this.state = 3053;
            this.match(ToscaParser.COLON);
            this.state = 3054;
            this.match(ToscaParser.NEWLINE);
            this.state = 3055;
            this.match(ToscaParser.INDENT);
            this.state = 3061; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3056;
                this.match(ToscaParser.MINUS);
                this.state = 3057;
                this.match(ToscaParser.INDENT);
                this.state = 3058;
                this.workflow_activity();
                this.state = 3059;
                this.match(ToscaParser.DEDENT);
                this.state = 3063; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.MINUS);
            this.state = 3065;
            this.match(ToscaParser.DEDENT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_activityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_activity;
    return this;
}

Workflow_activityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_activityContext.prototype.constructor = Workflow_activityContext;

Workflow_activityContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Workflow_activityContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Workflow_activityContext.prototype.workflow_state = function() {
    return this.getTypedRuleContext(Workflow_stateContext,0);
};

Workflow_activityContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_activity(this);
	}
};

Workflow_activityContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_activity(this);
	}
};




ToscaParser.Workflow_activityContext = Workflow_activityContext;

ToscaParser.prototype.workflow_activity = function() {

    var localctx = new Workflow_activityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, ToscaParser.RULE_workflow_activity);
    try {
        this.state = 3086;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.DELEGATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 3069;
            this.match(ToscaParser.DELEGATE);
            this.state = 3070;
            this.match(ToscaParser.COLON);
            this.state = 3071;
            this.match(ToscaParser.ID);
            this.state = 3072;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.SET_STATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 3073;
            this.match(ToscaParser.SET_STATE);
            this.state = 3074;
            this.match(ToscaParser.COLON);
            this.state = 3075;
            this.workflow_state();
            this.state = 3076;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.CALL_OPERATION:
            this.enterOuterAlt(localctx, 3);
            this.state = 3078;
            this.match(ToscaParser.CALL_OPERATION);
            this.state = 3079;
            this.match(ToscaParser.COLON);
            this.state = 3080;
            this.match(ToscaParser.ID);
            this.state = 3081;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.INLINE:
            this.enterOuterAlt(localctx, 4);
            this.state = 3082;
            this.match(ToscaParser.INLINE);
            this.state = 3083;
            this.match(ToscaParser.COLON);
            this.state = 3084;
            this.match(ToscaParser.ID);
            this.state = 3085;
            this.match(ToscaParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Imperative_workflowsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_imperative_workflows;
    return this;
}

Imperative_workflowsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Imperative_workflowsContext.prototype.constructor = Imperative_workflowsContext;

Imperative_workflowsContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Imperative_workflowsContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Imperative_workflowsContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Imperative_workflowsContext.prototype.imperative_workflow = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Imperative_workflowContext);
    } else {
        return this.getTypedRuleContext(Imperative_workflowContext,i);
    }
};

Imperative_workflowsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterImperative_workflows(this);
	}
};

Imperative_workflowsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitImperative_workflows(this);
	}
};




ToscaParser.Imperative_workflowsContext = Imperative_workflowsContext;

ToscaParser.prototype.imperative_workflows = function() {

    var localctx = new Imperative_workflowsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, ToscaParser.RULE_imperative_workflows);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3088;
        this.match(ToscaParser.WORKFLOWS);
        this.state = 3089;
        this.match(ToscaParser.COLON);
        this.state = 3090;
        this.match(ToscaParser.NEWLINE);
        this.state = 3091;
        this.match(ToscaParser.INDENT);
        this.state = 3093; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3092;
            this.imperative_workflow();
            this.state = 3095; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.ID);
        this.state = 3097;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Imperative_workflowContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_imperative_workflow;
    return this;
}

Imperative_workflowContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Imperative_workflowContext.prototype.constructor = Imperative_workflowContext;

Imperative_workflowContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Imperative_workflowContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Imperative_workflowContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Imperative_workflowContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Imperative_workflowContext.prototype.imperative_workflow_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Imperative_workflow_clauseContext);
    } else {
        return this.getTypedRuleContext(Imperative_workflow_clauseContext,i);
    }
};

Imperative_workflowContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterImperative_workflow(this);
	}
};

Imperative_workflowContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitImperative_workflow(this);
	}
};




ToscaParser.Imperative_workflowContext = Imperative_workflowContext;

ToscaParser.prototype.imperative_workflow = function() {

    var localctx = new Imperative_workflowContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, ToscaParser.RULE_imperative_workflow);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3099;
        this.match(ToscaParser.ID);
        this.state = 3100;
        this.match(ToscaParser.COLON);
        this.state = 3101;
        this.match(ToscaParser.NEWLINE);
        this.state = 3102;
        this.match(ToscaParser.INDENT);
        this.state = 3104; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3103;
            this.imperative_workflow_clause();
            this.state = 3106; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.T__20 || _la===ToscaParser.T__21 || _la===ToscaParser.METADATA || _la===ToscaParser.DESCRIPTION || _la===ToscaParser.INPUTS);
        this.state = 3108;
        this.match(ToscaParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Imperative_workflow_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_imperative_workflow_clause;
    return this;
}

Imperative_workflow_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Imperative_workflow_clauseContext.prototype.constructor = Imperative_workflow_clauseContext;

Imperative_workflow_clauseContext.prototype.descr = function() {
    return this.getTypedRuleContext(DescrContext,0);
};

Imperative_workflow_clauseContext.prototype.entity_metadata = function() {
    return this.getTypedRuleContext(Entity_metadataContext,0);
};

Imperative_workflow_clauseContext.prototype.inputs = function() {
    return this.getTypedRuleContext(InputsContext,0);
};

Imperative_workflow_clauseContext.prototype.workflow_preconditions = function() {
    return this.getTypedRuleContext(Workflow_preconditionsContext,0);
};

Imperative_workflow_clauseContext.prototype.workflow_steps = function() {
    return this.getTypedRuleContext(Workflow_stepsContext,0);
};

Imperative_workflow_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterImperative_workflow_clause(this);
	}
};

Imperative_workflow_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitImperative_workflow_clause(this);
	}
};




ToscaParser.Imperative_workflow_clauseContext = Imperative_workflow_clauseContext;

ToscaParser.prototype.imperative_workflow_clause = function() {

    var localctx = new Imperative_workflow_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, ToscaParser.RULE_imperative_workflow_clause);
    try {
        this.state = 3115;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.DESCRIPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 3110;
            this.descr();
            break;
        case ToscaParser.METADATA:
            this.enterOuterAlt(localctx, 2);
            this.state = 3111;
            this.entity_metadata();
            break;
        case ToscaParser.INPUTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 3112;
            this.inputs();
            break;
        case ToscaParser.T__20:
            this.enterOuterAlt(localctx, 4);
            this.state = 3113;
            this.workflow_preconditions();
            break;
        case ToscaParser.T__21:
            this.enterOuterAlt(localctx, 5);
            this.state = 3114;
            this.workflow_steps();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_value_expr;
    return this;
}

Value_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_exprContext.prototype.constructor = Value_exprContext;

Value_exprContext.prototype.func_expr = function() {
    return this.getTypedRuleContext(Func_exprContext,0);
};

Value_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterValue_expr(this);
	}
};

Value_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitValue_expr(this);
	}
};




ToscaParser.Value_exprContext = Value_exprContext;

ToscaParser.prototype.value_expr = function() {

    var localctx = new Value_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, ToscaParser.RULE_value_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3117;
        this.match(ToscaParser.OPEN_BRACE);
        this.state = 3118;
        this.func_expr();
        this.state = 3119;
        this.match(ToscaParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_expr;
    return this;
}

Func_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_exprContext.prototype.constructor = Func_exprContext;

Func_exprContext.prototype.func_concat = function() {
    return this.getTypedRuleContext(Func_concatContext,0);
};

Func_exprContext.prototype.func_token = function() {
    return this.getTypedRuleContext(Func_tokenContext,0);
};

Func_exprContext.prototype.func_join = function() {
    return this.getTypedRuleContext(Func_joinContext,0);
};

Func_exprContext.prototype.func_get_input = function() {
    return this.getTypedRuleContext(Func_get_inputContext,0);
};

Func_exprContext.prototype.func_get_property = function() {
    return this.getTypedRuleContext(Func_get_propertyContext,0);
};

Func_exprContext.prototype.func_get_attribute = function() {
    return this.getTypedRuleContext(Func_get_attributeContext,0);
};

Func_exprContext.prototype.func_get_operation_output = function() {
    return this.getTypedRuleContext(Func_get_operation_outputContext,0);
};

Func_exprContext.prototype.func_get_nodes_of_types = function() {
    return this.getTypedRuleContext(Func_get_nodes_of_typesContext,0);
};

Func_exprContext.prototype.func_get_artifact = function() {
    return this.getTypedRuleContext(Func_get_artifactContext,0);
};

Func_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_expr(this);
	}
};

Func_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_expr(this);
	}
};




ToscaParser.Func_exprContext = Func_exprContext;

ToscaParser.prototype.func_expr = function() {

    var localctx = new Func_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, ToscaParser.RULE_func_expr);
    try {
        this.state = 3130;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3121;
            this.func_concat();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3122;
            this.func_token();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3123;
            this.func_join();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3124;
            this.func_get_input();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3125;
            this.func_get_property();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 3126;
            this.func_get_attribute();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 3127;
            this.func_get_operation_output();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 3128;
            this.func_get_nodes_of_types();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 3129;
            this.func_get_artifact();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_arg;
    return this;
}

Func_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_argContext.prototype.constructor = Func_argContext;

Func_argContext.prototype.value_expr = function() {
    return this.getTypedRuleContext(Value_exprContext,0);
};

Func_argContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

Func_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_arg(this);
	}
};

Func_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_arg(this);
	}
};




ToscaParser.Func_argContext = Func_argContext;

ToscaParser.prototype.func_arg = function() {

    var localctx = new Func_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, ToscaParser.RULE_func_arg);
    try {
        this.state = 3134;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3132;
            this.value_expr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3133;
            this.short_str();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_concatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_concat;
    return this;
}

Func_concatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_concatContext.prototype.constructor = Func_concatContext;

Func_concatContext.prototype.func_arg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Func_argContext);
    } else {
        return this.getTypedRuleContext(Func_argContext,i);
    }
};

Func_concatContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_concat(this);
	}
};

Func_concatContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_concat(this);
	}
};




ToscaParser.Func_concatContext = Func_concatContext;

ToscaParser.prototype.func_concat = function() {

    var localctx = new Func_concatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, ToscaParser.RULE_func_concat);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3136;
        this.match(ToscaParser.CONCAT);
        this.state = 3137;
        this.match(ToscaParser.COLON);
        this.state = 3138;
        this.match(ToscaParser.OPEN_BRACK);
        this.state = 3139;
        this.func_arg();
        this.state = 3142; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3140;
            this.match(ToscaParser.COMMA);
            this.state = 3141;
            this.func_arg();
            this.state = 3144; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.COMMA);
        this.state = 3146;
        this.match(ToscaParser.CLOSE_BRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_joinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_join;
    return this;
}

Func_joinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_joinContext.prototype.constructor = Func_joinContext;

Func_joinContext.prototype.short_str = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Short_strContext);
    } else {
        return this.getTypedRuleContext(Short_strContext,i);
    }
};

Func_joinContext.prototype.func_arg = function() {
    return this.getTypedRuleContext(Func_argContext,0);
};

Func_joinContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_join(this);
	}
};

Func_joinContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_join(this);
	}
};




ToscaParser.Func_joinContext = Func_joinContext;

ToscaParser.prototype.func_join = function() {

    var localctx = new Func_joinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, ToscaParser.RULE_func_join);
    var _la = 0; // Token type
    try {
        this.state = 3168;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.T__22:
            this.enterOuterAlt(localctx, 1);
            this.state = 3148;
            this.match(ToscaParser.T__22);
            this.state = 3149;
            this.match(ToscaParser.COLON);
            this.state = 3150;
            this.match(ToscaParser.OPEN_BRACK);

            this.state = 3151;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 3152;
            this.short_str();
            this.state = 3155; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3153;
                this.match(ToscaParser.COMMA);
                this.state = 3154;
                this.short_str();
                this.state = 3157; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ToscaParser.COMMA);
            this.state = 3159;
            this.match(ToscaParser.CLOSE_BRACK);
            break;
        case ToscaParser.BASETYPE_NAMES:
        case ToscaParser.TOSCA_SIMPLE_YAML_1_0:
        case ToscaParser.TOSCA_SIMPLE_YAML_1_1:
        case ToscaParser.SUPPORTED:
        case ToscaParser.UNSUPPORTED:
        case ToscaParser.EXPERIMENTAL:
        case ToscaParser.DEPRECATED:
        case ToscaParser.S_B:
        case ToscaParser.S_KB:
        case ToscaParser.S_KIB:
        case ToscaParser.S_MB:
        case ToscaParser.S_GB:
        case ToscaParser.S_GIB:
        case ToscaParser.S_TB:
        case ToscaParser.S_TIB:
        case ToscaParser.T_D:
        case ToscaParser.T_H:
        case ToscaParser.T_M:
        case ToscaParser.T_S:
        case ToscaParser.T_MS:
        case ToscaParser.T_US:
        case ToscaParser.T_NS:
        case ToscaParser.F_HZ:
        case ToscaParser.F_KHZ:
        case ToscaParser.F_MHZ:
        case ToscaParser.F_GHZ:
        case ToscaParser.INITIAL:
        case ToscaParser.CREATING:
        case ToscaParser.CREATED:
        case ToscaParser.CONFIGURING:
        case ToscaParser.CONFIGURED:
        case ToscaParser.STARTING:
        case ToscaParser.STARTED:
        case ToscaParser.STOPPING:
        case ToscaParser.STOPPED:
        case ToscaParser.DELETING:
        case ToscaParser.ERROR:
        case ToscaParser.AVAILABLE:
        case ToscaParser.TOSCA_DEFINITION_VERSION:
        case ToscaParser.METADATA:
        case ToscaParser.TEMPLATE_NAME:
        case ToscaParser.TEMPLATE_AUTHOR:
        case ToscaParser.TEMPLATE_VERSION:
        case ToscaParser.ARTIFACT_TYPES:
        case ToscaParser.DERIVED_FROM:
        case ToscaParser.MIME_TYPE:
        case ToscaParser.FILE_EXT:
        case ToscaParser.DATA_TYPES:
        case ToscaParser.PROPERTIES:
        case ToscaParser.TYPE:
        case ToscaParser.REQUIRED:
        case ToscaParser.STATUS:
        case ToscaParser.DEFAULT:
        case ToscaParser.REPOSITORIES:
        case ToscaParser.URL:
        case ToscaParser.DESCRIPTION:
        case ToscaParser.CREDENTIAL:
        case ToscaParser.TOKEN:
        case ToscaParser.PROTOCOL:
        case ToscaParser.TOKEN_TYPE:
        case ToscaParser.USER:
        case ToscaParser.IMPORTS:
        case ToscaParser.FILE:
        case ToscaParser.REPOSITORY:
        case ToscaParser.NAMESPACE_PREFIX:
        case ToscaParser.NAMESPACE_URI:
        case ToscaParser.CAPABILITY_TYPES:
        case ToscaParser.NODE_TYPES:
        case ToscaParser.INTERFACE_TYPES:
        case ToscaParser.RELATIONSHIP_TYPES:
        case ToscaParser.GROUP_TYPES:
        case ToscaParser.GROUPS:
        case ToscaParser.COPY:
        case ToscaParser.POLICY_TYPES:
        case ToscaParser.TOPOLOGY_TYPES:
        case ToscaParser.RELATIONSHIP_TEMPLATES:
        case ToscaParser.CONSTRAINTS:
        case ToscaParser.EQUAL:
        case ToscaParser.GREATER_THAN:
        case ToscaParser.GREATER_OR_EQUAL:
        case ToscaParser.LESS_THAN:
        case ToscaParser.LESS_OR_EQUAL:
        case ToscaParser.IN_RANGE:
        case ToscaParser.VALID_VALUES:
        case ToscaParser.VALUE:
        case ToscaParser.LENGTH:
        case ToscaParser.MIN_LENGTH:
        case ToscaParser.MAX_LENGTH:
        case ToscaParser.PATTERN:
        case ToscaParser.ENTRY_SCHEMA:
        case ToscaParser.ATTRIBUTES:
        case ToscaParser.VALID_SOURCE_TYPES:
        case ToscaParser.VALID_TARGET_TYPES:
        case ToscaParser.INPUTS:
        case ToscaParser.INTERFACES:
        case ToscaParser.RELATIONSHIP:
        case ToscaParser.OCCURENCES:
        case ToscaParser.DEPLOY_PATH:
        case ToscaParser.CAPABILITIES:
        case ToscaParser.NODE:
        case ToscaParser.IMPLEMENTATION:
        case ToscaParser.DEPENDENCIES:
        case ToscaParser.CAPABILITY:
        case ToscaParser.REQUIREMENTS:
        case ToscaParser.PRIMARY:
        case ToscaParser.K_SELF:
        case ToscaParser.K_HOST:
        case ToscaParser.K_SOURCE:
        case ToscaParser.K_TARGET:
        case ToscaParser.LOCAL_FILE:
        case ToscaParser.GET_INPUT:
        case ToscaParser.GET_PROPERTY:
        case ToscaParser.GET_ATTRIBUTE:
        case ToscaParser.GET_OPERATION_ATTRIBUTE:
        case ToscaParser.GET_NODES_OF_TYPES:
        case ToscaParser.GET_ARTIFACT:
        case ToscaParser.CONCAT:
        case ToscaParser.DELEGATE:
        case ToscaParser.SET_STATE:
        case ToscaParser.CALL_OPERATION:
        case ToscaParser.DIRECTIVES:
        case ToscaParser.INLINE:
        case ToscaParser.TARGET:
        case ToscaParser.TARGET_RELATIONSHIP:
        case ToscaParser.FILTER:
        case ToscaParser.ACTIVITIES:
        case ToscaParser.OPERATION_HOST:
        case ToscaParser.ON_SUCCESS:
        case ToscaParser.ON_FAILURE:
        case ToscaParser.ASSERT:
        case ToscaParser.OR:
        case ToscaParser.AND:
        case ToscaParser.NOT:
        case ToscaParser.AFTER:
        case ToscaParser.BEFORE:
        case ToscaParser.WAIT_SOURCE:
        case ToscaParser.AFTER_SOURCE:
        case ToscaParser.WAIT_TARGET:
        case ToscaParser.AFTER_TARGET:
        case ToscaParser.ACTIVITY:
        case ToscaParser.TARGET_WEAVING:
        case ToscaParser.SOURCE_WEAVING:
        case ToscaParser.WORKFLOWS:
        case ToscaParser.MEMBERS:
        case ToscaParser.TRUE:
        case ToscaParser.FALSE:
        case ToscaParser.STRING_LITERAL:
        case ToscaParser.DECIMAL_INTEGER:
        case ToscaParser.OCT_INTEGER:
        case ToscaParser.HEX_INTEGER:
        case ToscaParser.BIN_INTEGER:
        case ToscaParser.FLOAT_NUMBER:
        case ToscaParser.IMAG_NUMBER:
        case ToscaParser.DOT:
        case ToscaParser.STAR:
        case ToscaParser.OPEN_PAREN:
        case ToscaParser.CLOSE_PAREN:
        case ToscaParser.COMMA:
        case ToscaParser.COLON:
        case ToscaParser.SEMI_COLON:
        case ToscaParser.POWER:
        case ToscaParser.ASSIGN:
        case ToscaParser.OPEN_BRACK:
        case ToscaParser.CLOSE_BRACK:
        case ToscaParser.XOR:
        case ToscaParser.LEFT_SHIFT:
        case ToscaParser.RIGHT_SHIFT:
        case ToscaParser.ADD:
        case ToscaParser.MINUS:
        case ToscaParser.DIV:
        case ToscaParser.MOD:
        case ToscaParser.IDIV:
        case ToscaParser.OPEN_BRACE:
        case ToscaParser.CLOSE_BRACE:
        case ToscaParser.INFINITY:
        case ToscaParser.VERSION:
        case ToscaParser.UNBOUNDED:
        case ToscaParser.NULL:
        case ToscaParser.NAN:
        case ToscaParser.TIMESTAMP:
        case ToscaParser.ID:
        case ToscaParser.UNKNOWN_CHAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 3161;
            this.func_arg();
            this.state = 3164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ToscaParser.COMMA) {
                this.state = 3162;
                this.match(ToscaParser.COMMA);
                this.state = 3163;
                this.short_str();
            }

            this.state = 3166;
            this.match(ToscaParser.CLOSE_BRACK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_token;
    return this;
}

Func_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_tokenContext.prototype.constructor = Func_tokenContext;

Func_tokenContext.prototype.func_arg = function() {
    return this.getTypedRuleContext(Func_argContext,0);
};

Func_tokenContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

Func_tokenContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

Func_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_token(this);
	}
};

Func_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_token(this);
	}
};




ToscaParser.Func_tokenContext = Func_tokenContext;

ToscaParser.prototype.func_token = function() {

    var localctx = new Func_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, ToscaParser.RULE_func_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3170;
        this.match(ToscaParser.TOKEN);
        this.state = 3171;
        this.match(ToscaParser.COLON);
        this.state = 3172;
        this.match(ToscaParser.OPEN_BRACK);
        this.state = 3173;
        this.func_arg();
        this.state = 3174;
        this.match(ToscaParser.COMMA);
        this.state = 3175;
        this.short_str();
        this.state = 3176;
        this.match(ToscaParser.COMMA);
        this.state = 3177;
        this.integer();
        this.state = 3178;
        this.match(ToscaParser.CLOSE_BRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_get_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_get_input;
    return this;
}

Func_get_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_get_inputContext.prototype.constructor = Func_get_inputContext;

Func_get_inputContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Func_get_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_get_input(this);
	}
};

Func_get_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_get_input(this);
	}
};




ToscaParser.Func_get_inputContext = Func_get_inputContext;

ToscaParser.prototype.func_get_input = function() {

    var localctx = new Func_get_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, ToscaParser.RULE_func_get_input);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3180;
        this.match(ToscaParser.GET_INPUT);
        this.state = 3181;
        this.match(ToscaParser.COLON);
        this.state = 3182;
        this.match(ToscaParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_get_propertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_get_property;
    return this;
}

Func_get_propertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_get_propertyContext.prototype.constructor = Func_get_propertyContext;

Func_get_propertyContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Func_get_propertyContext.prototype.integer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerContext);
    } else {
        return this.getTypedRuleContext(IntegerContext,i);
    }
};

Func_get_propertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_get_property(this);
	}
};

Func_get_propertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_get_property(this);
	}
};




ToscaParser.Func_get_propertyContext = Func_get_propertyContext;

ToscaParser.prototype.func_get_property = function() {

    var localctx = new Func_get_propertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, ToscaParser.RULE_func_get_property);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3184;
        this.match(ToscaParser.GET_PROPERTY);
        this.state = 3185;
        this.match(ToscaParser.COLON);
        this.state = 3186;
        this.match(ToscaParser.OPEN_BRACK);
        this.state = 3189;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.K_SELF:
        case ToscaParser.K_HOST:
        case ToscaParser.K_SOURCE:
        case ToscaParser.K_TARGET:
            this.state = 3187;
            _la = this._input.LA(1);
            if(!(((((_la - 147)) & ~0x1f) == 0 && ((1 << (_la - 147)) & ((1 << (ToscaParser.K_SELF - 147)) | (1 << (ToscaParser.K_HOST - 147)) | (1 << (ToscaParser.K_SOURCE - 147)) | (1 << (ToscaParser.K_TARGET - 147)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ToscaParser.ID:
            this.state = 3188;
            this.match(ToscaParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3191;
        this.match(ToscaParser.COMMA);
        this.state = 3192;
        this.match(ToscaParser.ID);
        this.state = 3198; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3193;
            this.match(ToscaParser.COMMA);
            this.state = 3196;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ToscaParser.ID:
                this.state = 3194;
                this.match(ToscaParser.ID);
                break;
            case ToscaParser.DECIMAL_INTEGER:
            case ToscaParser.OCT_INTEGER:
            case ToscaParser.HEX_INTEGER:
            case ToscaParser.BIN_INTEGER:
                this.state = 3195;
                this.integer();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3200; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.COMMA);
        this.state = 3202;
        this.match(ToscaParser.CLOSE_BRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_get_attributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_get_attribute;
    return this;
}

Func_get_attributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_get_attributeContext.prototype.constructor = Func_get_attributeContext;

Func_get_attributeContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Func_get_attributeContext.prototype.integer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntegerContext);
    } else {
        return this.getTypedRuleContext(IntegerContext,i);
    }
};

Func_get_attributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_get_attribute(this);
	}
};

Func_get_attributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_get_attribute(this);
	}
};




ToscaParser.Func_get_attributeContext = Func_get_attributeContext;

ToscaParser.prototype.func_get_attribute = function() {

    var localctx = new Func_get_attributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, ToscaParser.RULE_func_get_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3204;
        this.match(ToscaParser.GET_ATTRIBUTE);
        this.state = 3205;
        this.match(ToscaParser.COLON);
        this.state = 3206;
        this.match(ToscaParser.OPEN_BRACK);
        this.state = 3209;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.T__23:
        case ToscaParser.K_SELF:
        case ToscaParser.K_HOST:
        case ToscaParser.K_SOURCE:
            this.state = 3207;
            _la = this._input.LA(1);
            if(!(_la===ToscaParser.T__23 || ((((_la - 147)) & ~0x1f) == 0 && ((1 << (_la - 147)) & ((1 << (ToscaParser.K_SELF - 147)) | (1 << (ToscaParser.K_HOST - 147)) | (1 << (ToscaParser.K_SOURCE - 147)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ToscaParser.ID:
            this.state = 3208;
            this.match(ToscaParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3211;
        this.match(ToscaParser.COMMA);
        this.state = 3212;
        this.match(ToscaParser.ID);
        this.state = 3218; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3213;
            this.match(ToscaParser.COMMA);
            this.state = 3216;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ToscaParser.ID:
                this.state = 3214;
                this.match(ToscaParser.ID);
                break;
            case ToscaParser.DECIMAL_INTEGER:
            case ToscaParser.OCT_INTEGER:
            case ToscaParser.HEX_INTEGER:
            case ToscaParser.BIN_INTEGER:
                this.state = 3215;
                this.integer();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3220; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ToscaParser.COMMA);
        this.state = 3222;
        this.match(ToscaParser.CLOSE_BRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_get_operation_outputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_get_operation_output;
    return this;
}

Func_get_operation_outputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_get_operation_outputContext.prototype.constructor = Func_get_operation_outputContext;

Func_get_operation_outputContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Func_get_operation_outputContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_get_operation_output(this);
	}
};

Func_get_operation_outputContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_get_operation_output(this);
	}
};




ToscaParser.Func_get_operation_outputContext = Func_get_operation_outputContext;

ToscaParser.prototype.func_get_operation_output = function() {

    var localctx = new Func_get_operation_outputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, ToscaParser.RULE_func_get_operation_output);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3224;
        this.match(ToscaParser.T__24);
        this.state = 3225;
        this.match(ToscaParser.COLON);
        this.state = 3226;
        this.match(ToscaParser.OPEN_BRACK);
        this.state = 3229;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.K_SELF:
        case ToscaParser.K_HOST:
        case ToscaParser.K_SOURCE:
        case ToscaParser.K_TARGET:
            this.state = 3227;
            _la = this._input.LA(1);
            if(!(((((_la - 147)) & ~0x1f) == 0 && ((1 << (_la - 147)) & ((1 << (ToscaParser.K_SELF - 147)) | (1 << (ToscaParser.K_HOST - 147)) | (1 << (ToscaParser.K_SOURCE - 147)) | (1 << (ToscaParser.K_TARGET - 147)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ToscaParser.ID:
            this.state = 3228;
            this.match(ToscaParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3231;
        this.match(ToscaParser.COMMA);
        this.state = 3232;
        this.match(ToscaParser.ID);
        this.state = 3233;
        this.match(ToscaParser.COMMA);
        this.state = 3234;
        this.match(ToscaParser.ID);
        this.state = 3235;
        this.match(ToscaParser.COMMA);
        this.state = 3236;
        this.match(ToscaParser.ID);
        this.state = 3237;
        this.match(ToscaParser.CLOSE_BRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_get_nodes_of_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_get_nodes_of_types;
    return this;
}

Func_get_nodes_of_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_get_nodes_of_typesContext.prototype.constructor = Func_get_nodes_of_typesContext;

Func_get_nodes_of_typesContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Func_get_nodes_of_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_get_nodes_of_types(this);
	}
};

Func_get_nodes_of_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_get_nodes_of_types(this);
	}
};




ToscaParser.Func_get_nodes_of_typesContext = Func_get_nodes_of_typesContext;

ToscaParser.prototype.func_get_nodes_of_types = function() {

    var localctx = new Func_get_nodes_of_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, ToscaParser.RULE_func_get_nodes_of_types);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3239;
        this.match(ToscaParser.GET_NODES_OF_TYPES);
        this.state = 3240;
        this.match(ToscaParser.COLON);
        this.state = 3241;
        this.match(ToscaParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_get_artifactContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_func_get_artifact;
    return this;
}

Func_get_artifactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_get_artifactContext.prototype.constructor = Func_get_artifactContext;

Func_get_artifactContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.ID);
    } else {
        return this.getToken(ToscaParser.ID, i);
    }
};


Func_get_artifactContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

Func_get_artifactContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

Func_get_artifactContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFunc_get_artifact(this);
	}
};

Func_get_artifactContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFunc_get_artifact(this);
	}
};




ToscaParser.Func_get_artifactContext = Func_get_artifactContext;

ToscaParser.prototype.func_get_artifact = function() {

    var localctx = new Func_get_artifactContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, ToscaParser.RULE_func_get_artifact);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3243;
        this.match(ToscaParser.GET_ARTIFACT);
        this.state = 3244;
        this.match(ToscaParser.COLON);
        this.state = 3245;
        this.match(ToscaParser.OPEN_BRACK);
        this.state = 3248;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.K_SELF:
        case ToscaParser.K_HOST:
        case ToscaParser.K_SOURCE:
        case ToscaParser.K_TARGET:
            this.state = 3246;
            _la = this._input.LA(1);
            if(!(((((_la - 147)) & ~0x1f) == 0 && ((1 << (_la - 147)) & ((1 << (ToscaParser.K_SELF - 147)) | (1 << (ToscaParser.K_HOST - 147)) | (1 << (ToscaParser.K_SOURCE - 147)) | (1 << (ToscaParser.K_TARGET - 147)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ToscaParser.ID:
            this.state = 3247;
            this.match(ToscaParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3250;
        this.match(ToscaParser.COMMA);
        this.state = 3251;
        this.match(ToscaParser.ID);
        this.state = 3257;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        if(la_===1) {
            this.state = 3252;
            this.match(ToscaParser.COMMA);
            this.state = 3255;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ToscaParser.BASETYPE_NAMES:
            case ToscaParser.TOSCA_SIMPLE_YAML_1_0:
            case ToscaParser.TOSCA_SIMPLE_YAML_1_1:
            case ToscaParser.SUPPORTED:
            case ToscaParser.UNSUPPORTED:
            case ToscaParser.EXPERIMENTAL:
            case ToscaParser.DEPRECATED:
            case ToscaParser.S_B:
            case ToscaParser.S_KB:
            case ToscaParser.S_KIB:
            case ToscaParser.S_MB:
            case ToscaParser.S_GB:
            case ToscaParser.S_GIB:
            case ToscaParser.S_TB:
            case ToscaParser.S_TIB:
            case ToscaParser.T_D:
            case ToscaParser.T_H:
            case ToscaParser.T_M:
            case ToscaParser.T_S:
            case ToscaParser.T_MS:
            case ToscaParser.T_US:
            case ToscaParser.T_NS:
            case ToscaParser.F_HZ:
            case ToscaParser.F_KHZ:
            case ToscaParser.F_MHZ:
            case ToscaParser.F_GHZ:
            case ToscaParser.INITIAL:
            case ToscaParser.CREATING:
            case ToscaParser.CREATED:
            case ToscaParser.CONFIGURING:
            case ToscaParser.CONFIGURED:
            case ToscaParser.STARTING:
            case ToscaParser.STARTED:
            case ToscaParser.STOPPING:
            case ToscaParser.STOPPED:
            case ToscaParser.DELETING:
            case ToscaParser.ERROR:
            case ToscaParser.AVAILABLE:
            case ToscaParser.TOSCA_DEFINITION_VERSION:
            case ToscaParser.METADATA:
            case ToscaParser.TEMPLATE_NAME:
            case ToscaParser.TEMPLATE_AUTHOR:
            case ToscaParser.TEMPLATE_VERSION:
            case ToscaParser.ARTIFACT_TYPES:
            case ToscaParser.DERIVED_FROM:
            case ToscaParser.MIME_TYPE:
            case ToscaParser.FILE_EXT:
            case ToscaParser.DATA_TYPES:
            case ToscaParser.PROPERTIES:
            case ToscaParser.TYPE:
            case ToscaParser.REQUIRED:
            case ToscaParser.STATUS:
            case ToscaParser.DEFAULT:
            case ToscaParser.REPOSITORIES:
            case ToscaParser.URL:
            case ToscaParser.DESCRIPTION:
            case ToscaParser.CREDENTIAL:
            case ToscaParser.TOKEN:
            case ToscaParser.PROTOCOL:
            case ToscaParser.TOKEN_TYPE:
            case ToscaParser.USER:
            case ToscaParser.IMPORTS:
            case ToscaParser.FILE:
            case ToscaParser.REPOSITORY:
            case ToscaParser.NAMESPACE_PREFIX:
            case ToscaParser.NAMESPACE_URI:
            case ToscaParser.CAPABILITY_TYPES:
            case ToscaParser.NODE_TYPES:
            case ToscaParser.INTERFACE_TYPES:
            case ToscaParser.RELATIONSHIP_TYPES:
            case ToscaParser.GROUP_TYPES:
            case ToscaParser.GROUPS:
            case ToscaParser.COPY:
            case ToscaParser.POLICY_TYPES:
            case ToscaParser.TOPOLOGY_TYPES:
            case ToscaParser.RELATIONSHIP_TEMPLATES:
            case ToscaParser.CONSTRAINTS:
            case ToscaParser.EQUAL:
            case ToscaParser.GREATER_THAN:
            case ToscaParser.GREATER_OR_EQUAL:
            case ToscaParser.LESS_THAN:
            case ToscaParser.LESS_OR_EQUAL:
            case ToscaParser.IN_RANGE:
            case ToscaParser.VALID_VALUES:
            case ToscaParser.VALUE:
            case ToscaParser.LENGTH:
            case ToscaParser.MIN_LENGTH:
            case ToscaParser.MAX_LENGTH:
            case ToscaParser.PATTERN:
            case ToscaParser.ENTRY_SCHEMA:
            case ToscaParser.ATTRIBUTES:
            case ToscaParser.VALID_SOURCE_TYPES:
            case ToscaParser.VALID_TARGET_TYPES:
            case ToscaParser.INPUTS:
            case ToscaParser.INTERFACES:
            case ToscaParser.RELATIONSHIP:
            case ToscaParser.OCCURENCES:
            case ToscaParser.DEPLOY_PATH:
            case ToscaParser.CAPABILITIES:
            case ToscaParser.NODE:
            case ToscaParser.IMPLEMENTATION:
            case ToscaParser.DEPENDENCIES:
            case ToscaParser.CAPABILITY:
            case ToscaParser.REQUIREMENTS:
            case ToscaParser.PRIMARY:
            case ToscaParser.K_SELF:
            case ToscaParser.K_HOST:
            case ToscaParser.K_SOURCE:
            case ToscaParser.K_TARGET:
            case ToscaParser.LOCAL_FILE:
            case ToscaParser.GET_INPUT:
            case ToscaParser.GET_PROPERTY:
            case ToscaParser.GET_ATTRIBUTE:
            case ToscaParser.GET_OPERATION_ATTRIBUTE:
            case ToscaParser.GET_NODES_OF_TYPES:
            case ToscaParser.GET_ARTIFACT:
            case ToscaParser.CONCAT:
            case ToscaParser.DELEGATE:
            case ToscaParser.SET_STATE:
            case ToscaParser.CALL_OPERATION:
            case ToscaParser.DIRECTIVES:
            case ToscaParser.INLINE:
            case ToscaParser.TARGET:
            case ToscaParser.TARGET_RELATIONSHIP:
            case ToscaParser.FILTER:
            case ToscaParser.ACTIVITIES:
            case ToscaParser.OPERATION_HOST:
            case ToscaParser.ON_SUCCESS:
            case ToscaParser.ON_FAILURE:
            case ToscaParser.ASSERT:
            case ToscaParser.OR:
            case ToscaParser.AND:
            case ToscaParser.NOT:
            case ToscaParser.AFTER:
            case ToscaParser.BEFORE:
            case ToscaParser.WAIT_SOURCE:
            case ToscaParser.AFTER_SOURCE:
            case ToscaParser.WAIT_TARGET:
            case ToscaParser.AFTER_TARGET:
            case ToscaParser.ACTIVITY:
            case ToscaParser.TARGET_WEAVING:
            case ToscaParser.SOURCE_WEAVING:
            case ToscaParser.WORKFLOWS:
            case ToscaParser.MEMBERS:
            case ToscaParser.TRUE:
            case ToscaParser.FALSE:
            case ToscaParser.STRING_LITERAL:
            case ToscaParser.DECIMAL_INTEGER:
            case ToscaParser.OCT_INTEGER:
            case ToscaParser.HEX_INTEGER:
            case ToscaParser.BIN_INTEGER:
            case ToscaParser.FLOAT_NUMBER:
            case ToscaParser.IMAG_NUMBER:
            case ToscaParser.DOT:
            case ToscaParser.STAR:
            case ToscaParser.OPEN_PAREN:
            case ToscaParser.CLOSE_PAREN:
            case ToscaParser.COMMA:
            case ToscaParser.COLON:
            case ToscaParser.SEMI_COLON:
            case ToscaParser.POWER:
            case ToscaParser.ASSIGN:
            case ToscaParser.OPEN_BRACK:
            case ToscaParser.CLOSE_BRACK:
            case ToscaParser.XOR:
            case ToscaParser.LEFT_SHIFT:
            case ToscaParser.RIGHT_SHIFT:
            case ToscaParser.ADD:
            case ToscaParser.MINUS:
            case ToscaParser.DIV:
            case ToscaParser.MOD:
            case ToscaParser.IDIV:
            case ToscaParser.OPEN_BRACE:
            case ToscaParser.CLOSE_BRACE:
            case ToscaParser.INFINITY:
            case ToscaParser.VERSION:
            case ToscaParser.UNBOUNDED:
            case ToscaParser.NULL:
            case ToscaParser.NAN:
            case ToscaParser.TIMESTAMP:
            case ToscaParser.ID:
            case ToscaParser.UNKNOWN_CHAR:
                this.state = 3253;
                this.short_str();
                break;
            case ToscaParser.T__25:
                this.state = 3254;
                this.match(ToscaParser.T__25);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
        this.state = 3261;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ToscaParser.COMMA) {
            this.state = 3259;
            this.match(ToscaParser.COMMA);
            this.state = 3260;
            this.bool();
        }

        this.state = 3263;
        this.match(ToscaParser.CLOSE_BRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.size = function() {
    return this.getTypedRuleContext(SizeContext,0);
};

ValueContext.prototype.time = function() {
    return this.getTypedRuleContext(TimeContext,0);
};

ValueContext.prototype.freq = function() {
    return this.getTypedRuleContext(FreqContext,0);
};

ValueContext.prototype.INFINITY = function() {
    return this.getToken(ToscaParser.INFINITY, 0);
};

ValueContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

ValueContext.prototype.VERSION = function() {
    return this.getToken(ToscaParser.VERSION, 0);
};

ValueContext.prototype.NULL = function() {
    return this.getToken(ToscaParser.NULL, 0);
};

ValueContext.prototype.NAN = function() {
    return this.getToken(ToscaParser.NAN, 0);
};

ValueContext.prototype.TIMESTAMP = function() {
    return this.getToken(ToscaParser.TIMESTAMP, 0);
};

ValueContext.prototype.list = function() {
    return this.getTypedRuleContext(ListContext,0);
};

ValueContext.prototype.map = function() {
    return this.getTypedRuleContext(MapContext,0);
};

ValueContext.prototype.range = function() {
    return this.getTypedRuleContext(RangeContext,0);
};

ValueContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

ValueContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitValue(this);
	}
};




ToscaParser.ValueContext = ValueContext;

ToscaParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, ToscaParser.RULE_value);
    try {
        this.state = 3279;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3265;
            this.size();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3266;
            this.time();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3267;
            this.freq();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 3268;
            this.match(ToscaParser.INFINITY);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 3269;
            this.number();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 3270;
            this.match(ToscaParser.VERSION);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 3271;
            this.match(ToscaParser.NULL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 3272;
            this.match(ToscaParser.NAN);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 3273;
            this.match(ToscaParser.TIMESTAMP);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 3274;
            this.list();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 3275;
            this.map();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 3276;
            this.range();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 3277;
            this.bool();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 3278;
            this.short_str();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_descr;
    return this;
}

DescrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescrContext.prototype.constructor = DescrContext;

DescrContext.prototype.str = function() {
    return this.getTypedRuleContext(StrContext,0);
};

DescrContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterDescr(this);
	}
};

DescrContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitDescr(this);
	}
};




ToscaParser.DescrContext = DescrContext;

ToscaParser.prototype.descr = function() {

    var localctx = new DescrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, ToscaParser.RULE_descr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3281;
        this.match(ToscaParser.DESCRIPTION);
        this.state = 3282;
        this.match(ToscaParser.COLON);
        this.state = 3283;
        this.str();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_list;
    return this;
}

ListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListContext.prototype.constructor = ListContext;

ListContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

ListContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


ListContext.prototype.INDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.INDENT);
    } else {
        return this.getToken(ToscaParser.INDENT, i);
    }
};


ListContext.prototype.DEDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.DEDENT);
    } else {
        return this.getToken(ToscaParser.DEDENT, i);
    }
};


ListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterList(this);
	}
};

ListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitList(this);
	}
};




ToscaParser.ListContext = ListContext;

ToscaParser.prototype.list = function() {

    var localctx = new ListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, ToscaParser.RULE_list);
    var _la = 0; // Token type
    try {
        this.state = 3320;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3285;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 3287;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
            if(la_===1) {
                this.state = 3286;
                this.match(ToscaParser.NEWLINE);

            }
            this.state = 3296;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,227,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3289;
                    this.value();
                    this.state = 3290;
                    this.match(ToscaParser.COMMA);
                    this.state = 3292;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
                    if(la_===1) {
                        this.state = 3291;
                        this.match(ToscaParser.NEWLINE);

                    } 
                }
                this.state = 3298;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,227,this._ctx);
            }

            this.state = 3299;
            this.value();
            this.state = 3301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ToscaParser.NEWLINE) {
                this.state = 3300;
                this.match(ToscaParser.NEWLINE);
            }

            this.state = 3303;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3305;
            this.match(ToscaParser.OPEN_BRACK);
            this.state = 3307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ToscaParser.NEWLINE) {
                this.state = 3306;
                this.match(ToscaParser.NEWLINE);
            }

            this.state = 3309;
            this.match(ToscaParser.CLOSE_BRACK);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3316; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3310;
            		this.match(ToscaParser.MINUS);
            		this.state = 3311;
            		this.match(ToscaParser.INDENT);
            		this.state = 3312;
            		this.value();
            		this.state = 3313;
            		this.match(ToscaParser.DEDENT);
            		this.state = 3314;
            		this.match(ToscaParser.NEWLINE);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3318; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,230, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_map;
    return this;
}

MapContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapContext.prototype.constructor = MapContext;

MapContext.prototype.value_assoc = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Value_assocContext);
    } else {
        return this.getTypedRuleContext(Value_assocContext,i);
    }
};

MapContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.NEWLINE);
    } else {
        return this.getToken(ToscaParser.NEWLINE, i);
    }
};


MapContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterMap(this);
	}
};

MapContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitMap(this);
	}
};




ToscaParser.MapContext = MapContext;

ToscaParser.prototype.map = function() {

    var localctx = new MapContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, ToscaParser.RULE_map);
    var _la = 0; // Token type
    try {
        this.state = 3354;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3322;
            this.match(ToscaParser.OPEN_BRACE);
            this.state = 3324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ToscaParser.NEWLINE) {
                this.state = 3323;
                this.match(ToscaParser.NEWLINE);
            }

            this.state = 3333;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,234,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3326;
                    this.value_assoc();
                    this.state = 3327;
                    this.match(ToscaParser.COMMA);
                    this.state = 3329;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ToscaParser.NEWLINE) {
                        this.state = 3328;
                        this.match(ToscaParser.NEWLINE);
                    }
             
                }
                this.state = 3335;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,234,this._ctx);
            }

            this.state = 3336;
            this.value_assoc();
            this.state = 3338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ToscaParser.NEWLINE) {
                this.state = 3337;
                this.match(ToscaParser.NEWLINE);
            }

            this.state = 3340;
            this.match(ToscaParser.CLOSE_BRACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3342;
            this.match(ToscaParser.OPEN_BRACE);
            this.state = 3344;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ToscaParser.NEWLINE) {
                this.state = 3343;
                this.match(ToscaParser.NEWLINE);
            }

            this.state = 3346;
            this.match(ToscaParser.CLOSE_BRACE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 3350; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3347;
            		this.value_assoc();
            		this.state = 3348;
            		this.match(ToscaParser.NEWLINE);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3352; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,237, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_assocContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_value_assoc;
    return this;
}

Value_assocContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_assocContext.prototype.constructor = Value_assocContext;

Value_assocContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

Value_assocContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

Value_assocContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterValue_assoc(this);
	}
};

Value_assocContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitValue_assoc(this);
	}
};




ToscaParser.Value_assocContext = Value_assocContext;

ToscaParser.prototype.value_assoc = function() {

    var localctx = new Value_assocContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, ToscaParser.RULE_value_assoc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3356;
        this.match(ToscaParser.ID);
        this.state = 3357;
        this.match(ToscaParser.COLON);
        this.state = 3358;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_range;
    return this;
}

RangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeContext.prototype.constructor = RangeContext;

RangeContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

RangeContext.prototype.UNBOUNDED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ToscaParser.UNBOUNDED);
    } else {
        return this.getToken(ToscaParser.UNBOUNDED, i);
    }
};


RangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterRange(this);
	}
};

RangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitRange(this);
	}
};




ToscaParser.RangeContext = RangeContext;

ToscaParser.prototype.range = function() {

    var localctx = new RangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, ToscaParser.RULE_range);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3360;
        this.match(ToscaParser.OPEN_BRACK);
        this.state = 3363;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3361;
            this.value();
            break;

        case 2:
            this.state = 3362;
            this.match(ToscaParser.UNBOUNDED);
            break;

        }
        this.state = 3365;
        this.match(ToscaParser.COMMA);
        this.state = 3368;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3366;
            this.value();
            break;

        case 2:
            this.state = 3367;
            this.match(ToscaParser.UNBOUNDED);
            break;

        }
        this.state = 3370;
        this.match(ToscaParser.CLOSE_BRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Short_strContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_short_str;
    return this;
}

Short_strContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Short_strContext.prototype.constructor = Short_strContext;

Short_strContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ToscaParser.STRING_LITERAL, 0);
};

Short_strContext.prototype.alltoken = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlltokenContext);
    } else {
        return this.getTypedRuleContext(AlltokenContext,i);
    }
};

Short_strContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterShort_str(this);
	}
};

Short_strContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitShort_str(this);
	}
};




ToscaParser.Short_strContext = Short_strContext;

ToscaParser.prototype.short_str = function() {

    var localctx = new Short_strContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, ToscaParser.RULE_short_str);
    try {
        this.state = 3379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3372;
            this.match(ToscaParser.STRING_LITERAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3376;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,241,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 3373;
                    this.alltoken(); 
                }
                this.state = 3378;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,241,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_str;
    return this;
}

StrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrContext.prototype.constructor = StrContext;

StrContext.prototype.short_str = function() {
    return this.getTypedRuleContext(Short_strContext,0);
};

StrContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

StrContext.prototype.MLPREF = function() {
    return this.getToken(ToscaParser.MLPREF, 0);
};

StrContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

StrContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

StrContext.prototype.alltoken = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlltokenContext);
    } else {
        return this.getTypedRuleContext(AlltokenContext,i);
    }
};

StrContext.prototype.sub_mlstring = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sub_mlstringContext);
    } else {
        return this.getTypedRuleContext(Sub_mlstringContext,i);
    }
};

StrContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterStr(this);
	}
};

StrContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitStr(this);
	}
};




ToscaParser.StrContext = StrContext;

ToscaParser.prototype.str = function() {

    var localctx = new StrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, ToscaParser.RULE_str);
    var _la = 0; // Token type
    try {
        this.state = 3400;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.BASETYPE_NAMES:
        case ToscaParser.TOSCA_SIMPLE_YAML_1_0:
        case ToscaParser.TOSCA_SIMPLE_YAML_1_1:
        case ToscaParser.SUPPORTED:
        case ToscaParser.UNSUPPORTED:
        case ToscaParser.EXPERIMENTAL:
        case ToscaParser.DEPRECATED:
        case ToscaParser.S_B:
        case ToscaParser.S_KB:
        case ToscaParser.S_KIB:
        case ToscaParser.S_MB:
        case ToscaParser.S_GB:
        case ToscaParser.S_GIB:
        case ToscaParser.S_TB:
        case ToscaParser.S_TIB:
        case ToscaParser.T_D:
        case ToscaParser.T_H:
        case ToscaParser.T_M:
        case ToscaParser.T_S:
        case ToscaParser.T_MS:
        case ToscaParser.T_US:
        case ToscaParser.T_NS:
        case ToscaParser.F_HZ:
        case ToscaParser.F_KHZ:
        case ToscaParser.F_MHZ:
        case ToscaParser.F_GHZ:
        case ToscaParser.INITIAL:
        case ToscaParser.CREATING:
        case ToscaParser.CREATED:
        case ToscaParser.CONFIGURING:
        case ToscaParser.CONFIGURED:
        case ToscaParser.STARTING:
        case ToscaParser.STARTED:
        case ToscaParser.STOPPING:
        case ToscaParser.STOPPED:
        case ToscaParser.DELETING:
        case ToscaParser.ERROR:
        case ToscaParser.AVAILABLE:
        case ToscaParser.TOSCA_DEFINITION_VERSION:
        case ToscaParser.METADATA:
        case ToscaParser.TEMPLATE_NAME:
        case ToscaParser.TEMPLATE_AUTHOR:
        case ToscaParser.TEMPLATE_VERSION:
        case ToscaParser.ARTIFACT_TYPES:
        case ToscaParser.DERIVED_FROM:
        case ToscaParser.MIME_TYPE:
        case ToscaParser.FILE_EXT:
        case ToscaParser.DATA_TYPES:
        case ToscaParser.PROPERTIES:
        case ToscaParser.TYPE:
        case ToscaParser.REQUIRED:
        case ToscaParser.STATUS:
        case ToscaParser.DEFAULT:
        case ToscaParser.REPOSITORIES:
        case ToscaParser.URL:
        case ToscaParser.DESCRIPTION:
        case ToscaParser.CREDENTIAL:
        case ToscaParser.TOKEN:
        case ToscaParser.PROTOCOL:
        case ToscaParser.TOKEN_TYPE:
        case ToscaParser.USER:
        case ToscaParser.IMPORTS:
        case ToscaParser.FILE:
        case ToscaParser.REPOSITORY:
        case ToscaParser.NAMESPACE_PREFIX:
        case ToscaParser.NAMESPACE_URI:
        case ToscaParser.CAPABILITY_TYPES:
        case ToscaParser.NODE_TYPES:
        case ToscaParser.INTERFACE_TYPES:
        case ToscaParser.RELATIONSHIP_TYPES:
        case ToscaParser.GROUP_TYPES:
        case ToscaParser.GROUPS:
        case ToscaParser.COPY:
        case ToscaParser.POLICY_TYPES:
        case ToscaParser.TOPOLOGY_TYPES:
        case ToscaParser.RELATIONSHIP_TEMPLATES:
        case ToscaParser.CONSTRAINTS:
        case ToscaParser.EQUAL:
        case ToscaParser.GREATER_THAN:
        case ToscaParser.GREATER_OR_EQUAL:
        case ToscaParser.LESS_THAN:
        case ToscaParser.LESS_OR_EQUAL:
        case ToscaParser.IN_RANGE:
        case ToscaParser.VALID_VALUES:
        case ToscaParser.VALUE:
        case ToscaParser.LENGTH:
        case ToscaParser.MIN_LENGTH:
        case ToscaParser.MAX_LENGTH:
        case ToscaParser.PATTERN:
        case ToscaParser.ENTRY_SCHEMA:
        case ToscaParser.ATTRIBUTES:
        case ToscaParser.VALID_SOURCE_TYPES:
        case ToscaParser.VALID_TARGET_TYPES:
        case ToscaParser.INPUTS:
        case ToscaParser.INTERFACES:
        case ToscaParser.RELATIONSHIP:
        case ToscaParser.OCCURENCES:
        case ToscaParser.DEPLOY_PATH:
        case ToscaParser.CAPABILITIES:
        case ToscaParser.NODE:
        case ToscaParser.IMPLEMENTATION:
        case ToscaParser.DEPENDENCIES:
        case ToscaParser.CAPABILITY:
        case ToscaParser.REQUIREMENTS:
        case ToscaParser.PRIMARY:
        case ToscaParser.K_SELF:
        case ToscaParser.K_HOST:
        case ToscaParser.K_SOURCE:
        case ToscaParser.K_TARGET:
        case ToscaParser.LOCAL_FILE:
        case ToscaParser.GET_INPUT:
        case ToscaParser.GET_PROPERTY:
        case ToscaParser.GET_ATTRIBUTE:
        case ToscaParser.GET_OPERATION_ATTRIBUTE:
        case ToscaParser.GET_NODES_OF_TYPES:
        case ToscaParser.GET_ARTIFACT:
        case ToscaParser.CONCAT:
        case ToscaParser.DELEGATE:
        case ToscaParser.SET_STATE:
        case ToscaParser.CALL_OPERATION:
        case ToscaParser.DIRECTIVES:
        case ToscaParser.INLINE:
        case ToscaParser.TARGET:
        case ToscaParser.TARGET_RELATIONSHIP:
        case ToscaParser.FILTER:
        case ToscaParser.ACTIVITIES:
        case ToscaParser.OPERATION_HOST:
        case ToscaParser.ON_SUCCESS:
        case ToscaParser.ON_FAILURE:
        case ToscaParser.ASSERT:
        case ToscaParser.OR:
        case ToscaParser.AND:
        case ToscaParser.NOT:
        case ToscaParser.AFTER:
        case ToscaParser.BEFORE:
        case ToscaParser.WAIT_SOURCE:
        case ToscaParser.AFTER_SOURCE:
        case ToscaParser.WAIT_TARGET:
        case ToscaParser.AFTER_TARGET:
        case ToscaParser.ACTIVITY:
        case ToscaParser.TARGET_WEAVING:
        case ToscaParser.SOURCE_WEAVING:
        case ToscaParser.WORKFLOWS:
        case ToscaParser.MEMBERS:
        case ToscaParser.TRUE:
        case ToscaParser.FALSE:
        case ToscaParser.NEWLINE:
        case ToscaParser.STRING_LITERAL:
        case ToscaParser.DECIMAL_INTEGER:
        case ToscaParser.OCT_INTEGER:
        case ToscaParser.HEX_INTEGER:
        case ToscaParser.BIN_INTEGER:
        case ToscaParser.FLOAT_NUMBER:
        case ToscaParser.IMAG_NUMBER:
        case ToscaParser.DOT:
        case ToscaParser.STAR:
        case ToscaParser.OPEN_PAREN:
        case ToscaParser.CLOSE_PAREN:
        case ToscaParser.COMMA:
        case ToscaParser.COLON:
        case ToscaParser.SEMI_COLON:
        case ToscaParser.POWER:
        case ToscaParser.ASSIGN:
        case ToscaParser.OPEN_BRACK:
        case ToscaParser.CLOSE_BRACK:
        case ToscaParser.XOR:
        case ToscaParser.LEFT_SHIFT:
        case ToscaParser.RIGHT_SHIFT:
        case ToscaParser.ADD:
        case ToscaParser.MINUS:
        case ToscaParser.DIV:
        case ToscaParser.MOD:
        case ToscaParser.IDIV:
        case ToscaParser.OPEN_BRACE:
        case ToscaParser.CLOSE_BRACE:
        case ToscaParser.INFINITY:
        case ToscaParser.VERSION:
        case ToscaParser.UNBOUNDED:
        case ToscaParser.NULL:
        case ToscaParser.NAN:
        case ToscaParser.TIMESTAMP:
        case ToscaParser.ID:
        case ToscaParser.UNKNOWN_CHAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 3381;
            this.short_str();
            this.state = 3382;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.MLPREF:
            this.enterOuterAlt(localctx, 2);
            this.state = 3384;
            this.match(ToscaParser.MLPREF);
            this.state = 3388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (ToscaParser.BASETYPE_NAMES - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_0 - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_1 - 27)) | (1 << (ToscaParser.SUPPORTED - 27)) | (1 << (ToscaParser.UNSUPPORTED - 27)) | (1 << (ToscaParser.EXPERIMENTAL - 27)) | (1 << (ToscaParser.DEPRECATED - 27)) | (1 << (ToscaParser.S_B - 27)) | (1 << (ToscaParser.S_KB - 27)) | (1 << (ToscaParser.S_KIB - 27)) | (1 << (ToscaParser.S_MB - 27)) | (1 << (ToscaParser.S_GB - 27)) | (1 << (ToscaParser.S_GIB - 27)) | (1 << (ToscaParser.S_TB - 27)) | (1 << (ToscaParser.S_TIB - 27)) | (1 << (ToscaParser.T_D - 27)) | (1 << (ToscaParser.T_H - 27)) | (1 << (ToscaParser.T_M - 27)) | (1 << (ToscaParser.T_S - 27)) | (1 << (ToscaParser.T_MS - 27)) | (1 << (ToscaParser.T_US - 27)) | (1 << (ToscaParser.T_NS - 27)) | (1 << (ToscaParser.F_HZ - 27)) | (1 << (ToscaParser.F_KHZ - 27)) | (1 << (ToscaParser.F_MHZ - 27)) | (1 << (ToscaParser.F_GHZ - 27)) | (1 << (ToscaParser.INITIAL - 27)) | (1 << (ToscaParser.CREATING - 27)) | (1 << (ToscaParser.CREATED - 27)) | (1 << (ToscaParser.CONFIGURING - 27)) | (1 << (ToscaParser.CONFIGURED - 27)))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ToscaParser.STARTING - 59)) | (1 << (ToscaParser.STARTED - 59)) | (1 << (ToscaParser.STOPPING - 59)) | (1 << (ToscaParser.STOPPED - 59)) | (1 << (ToscaParser.DELETING - 59)) | (1 << (ToscaParser.ERROR - 59)) | (1 << (ToscaParser.AVAILABLE - 59)) | (1 << (ToscaParser.TOSCA_DEFINITION_VERSION - 59)) | (1 << (ToscaParser.METADATA - 59)) | (1 << (ToscaParser.TEMPLATE_NAME - 59)) | (1 << (ToscaParser.TEMPLATE_AUTHOR - 59)) | (1 << (ToscaParser.TEMPLATE_VERSION - 59)) | (1 << (ToscaParser.ARTIFACT_TYPES - 59)) | (1 << (ToscaParser.DERIVED_FROM - 59)) | (1 << (ToscaParser.MIME_TYPE - 59)) | (1 << (ToscaParser.FILE_EXT - 59)) | (1 << (ToscaParser.DATA_TYPES - 59)) | (1 << (ToscaParser.PROPERTIES - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.REQUIRED - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.REPOSITORIES - 91)) | (1 << (ToscaParser.URL - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CREDENTIAL - 91)) | (1 << (ToscaParser.TOKEN - 91)) | (1 << (ToscaParser.PROTOCOL - 91)) | (1 << (ToscaParser.TOKEN_TYPE - 91)) | (1 << (ToscaParser.USER - 91)) | (1 << (ToscaParser.IMPORTS - 91)) | (1 << (ToscaParser.FILE - 91)) | (1 << (ToscaParser.REPOSITORY - 91)) | (1 << (ToscaParser.NAMESPACE_PREFIX - 91)) | (1 << (ToscaParser.NAMESPACE_URI - 91)) | (1 << (ToscaParser.CAPABILITY_TYPES - 91)) | (1 << (ToscaParser.NODE_TYPES - 91)) | (1 << (ToscaParser.INTERFACE_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TYPES - 91)) | (1 << (ToscaParser.GROUP_TYPES - 91)) | (1 << (ToscaParser.GROUPS - 91)) | (1 << (ToscaParser.COPY - 91)) | (1 << (ToscaParser.POLICY_TYPES - 91)) | (1 << (ToscaParser.TOPOLOGY_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TEMPLATES - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)) | (1 << (ToscaParser.EQUAL - 91)) | (1 << (ToscaParser.GREATER_THAN - 91)) | (1 << (ToscaParser.GREATER_OR_EQUAL - 91)) | (1 << (ToscaParser.LESS_THAN - 91)))) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (ToscaParser.LESS_OR_EQUAL - 123)) | (1 << (ToscaParser.IN_RANGE - 123)) | (1 << (ToscaParser.VALID_VALUES - 123)) | (1 << (ToscaParser.VALUE - 123)) | (1 << (ToscaParser.LENGTH - 123)) | (1 << (ToscaParser.MIN_LENGTH - 123)) | (1 << (ToscaParser.MAX_LENGTH - 123)) | (1 << (ToscaParser.PATTERN - 123)) | (1 << (ToscaParser.ENTRY_SCHEMA - 123)) | (1 << (ToscaParser.ATTRIBUTES - 123)) | (1 << (ToscaParser.VALID_SOURCE_TYPES - 123)) | (1 << (ToscaParser.VALID_TARGET_TYPES - 123)) | (1 << (ToscaParser.INPUTS - 123)) | (1 << (ToscaParser.INTERFACES - 123)) | (1 << (ToscaParser.RELATIONSHIP - 123)) | (1 << (ToscaParser.OCCURENCES - 123)) | (1 << (ToscaParser.DEPLOY_PATH - 123)) | (1 << (ToscaParser.CAPABILITIES - 123)) | (1 << (ToscaParser.NODE - 123)) | (1 << (ToscaParser.IMPLEMENTATION - 123)) | (1 << (ToscaParser.DEPENDENCIES - 123)) | (1 << (ToscaParser.CAPABILITY - 123)) | (1 << (ToscaParser.REQUIREMENTS - 123)) | (1 << (ToscaParser.PRIMARY - 123)) | (1 << (ToscaParser.K_SELF - 123)) | (1 << (ToscaParser.K_HOST - 123)) | (1 << (ToscaParser.K_SOURCE - 123)) | (1 << (ToscaParser.K_TARGET - 123)) | (1 << (ToscaParser.LOCAL_FILE - 123)) | (1 << (ToscaParser.GET_INPUT - 123)) | (1 << (ToscaParser.GET_PROPERTY - 123)) | (1 << (ToscaParser.GET_ATTRIBUTE - 123)))) !== 0) || ((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (ToscaParser.GET_OPERATION_ATTRIBUTE - 155)) | (1 << (ToscaParser.GET_NODES_OF_TYPES - 155)) | (1 << (ToscaParser.GET_ARTIFACT - 155)) | (1 << (ToscaParser.CONCAT - 155)) | (1 << (ToscaParser.DELEGATE - 155)) | (1 << (ToscaParser.SET_STATE - 155)) | (1 << (ToscaParser.CALL_OPERATION - 155)) | (1 << (ToscaParser.DIRECTIVES - 155)) | (1 << (ToscaParser.INLINE - 155)) | (1 << (ToscaParser.TARGET - 155)) | (1 << (ToscaParser.TARGET_RELATIONSHIP - 155)) | (1 << (ToscaParser.FILTER - 155)) | (1 << (ToscaParser.ACTIVITIES - 155)) | (1 << (ToscaParser.OPERATION_HOST - 155)) | (1 << (ToscaParser.ON_SUCCESS - 155)) | (1 << (ToscaParser.ON_FAILURE - 155)) | (1 << (ToscaParser.ASSERT - 155)) | (1 << (ToscaParser.OR - 155)) | (1 << (ToscaParser.AND - 155)) | (1 << (ToscaParser.NOT - 155)) | (1 << (ToscaParser.AFTER - 155)) | (1 << (ToscaParser.BEFORE - 155)) | (1 << (ToscaParser.WAIT_SOURCE - 155)) | (1 << (ToscaParser.AFTER_SOURCE - 155)) | (1 << (ToscaParser.WAIT_TARGET - 155)) | (1 << (ToscaParser.AFTER_TARGET - 155)) | (1 << (ToscaParser.ACTIVITY - 155)) | (1 << (ToscaParser.TARGET_WEAVING - 155)) | (1 << (ToscaParser.SOURCE_WEAVING - 155)) | (1 << (ToscaParser.WORKFLOWS - 155)) | (1 << (ToscaParser.MEMBERS - 155)) | (1 << (ToscaParser.TRUE - 155)))) !== 0) || ((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (ToscaParser.FALSE - 187)) | (1 << (ToscaParser.STRING_LITERAL - 187)) | (1 << (ToscaParser.DECIMAL_INTEGER - 187)) | (1 << (ToscaParser.OCT_INTEGER - 187)) | (1 << (ToscaParser.HEX_INTEGER - 187)) | (1 << (ToscaParser.BIN_INTEGER - 187)) | (1 << (ToscaParser.FLOAT_NUMBER - 187)) | (1 << (ToscaParser.IMAG_NUMBER - 187)) | (1 << (ToscaParser.DOT - 187)) | (1 << (ToscaParser.STAR - 187)) | (1 << (ToscaParser.OPEN_PAREN - 187)) | (1 << (ToscaParser.CLOSE_PAREN - 187)) | (1 << (ToscaParser.COMMA - 187)) | (1 << (ToscaParser.COLON - 187)) | (1 << (ToscaParser.SEMI_COLON - 187)) | (1 << (ToscaParser.POWER - 187)) | (1 << (ToscaParser.ASSIGN - 187)) | (1 << (ToscaParser.OPEN_BRACK - 187)) | (1 << (ToscaParser.CLOSE_BRACK - 187)) | (1 << (ToscaParser.XOR - 187)) | (1 << (ToscaParser.LEFT_SHIFT - 187)) | (1 << (ToscaParser.RIGHT_SHIFT - 187)) | (1 << (ToscaParser.ADD - 187)) | (1 << (ToscaParser.MINUS - 187)) | (1 << (ToscaParser.DIV - 187)) | (1 << (ToscaParser.MOD - 187)) | (1 << (ToscaParser.IDIV - 187)) | (1 << (ToscaParser.OPEN_BRACE - 187)))) !== 0) || ((((_la - 219)) & ~0x1f) == 0 && ((1 << (_la - 219)) & ((1 << (ToscaParser.CLOSE_BRACE - 219)) | (1 << (ToscaParser.INFINITY - 219)) | (1 << (ToscaParser.VERSION - 219)) | (1 << (ToscaParser.UNBOUNDED - 219)) | (1 << (ToscaParser.NULL - 219)) | (1 << (ToscaParser.NAN - 219)) | (1 << (ToscaParser.TIMESTAMP - 219)) | (1 << (ToscaParser.ID - 219)) | (1 << (ToscaParser.UNKNOWN_CHAR - 219)))) !== 0)) {
                this.state = 3385;
                this.alltoken();
                this.state = 3390;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3391;
            this.match(ToscaParser.NEWLINE);
            this.state = 3392;
            this.match(ToscaParser.INDENT);
            this.state = 3394; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3393;
                this.sub_mlstring();
                this.state = 3396; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (ToscaParser.BASETYPE_NAMES - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_0 - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_1 - 27)) | (1 << (ToscaParser.SUPPORTED - 27)) | (1 << (ToscaParser.UNSUPPORTED - 27)) | (1 << (ToscaParser.EXPERIMENTAL - 27)) | (1 << (ToscaParser.DEPRECATED - 27)) | (1 << (ToscaParser.S_B - 27)) | (1 << (ToscaParser.S_KB - 27)) | (1 << (ToscaParser.S_KIB - 27)) | (1 << (ToscaParser.S_MB - 27)) | (1 << (ToscaParser.S_GB - 27)) | (1 << (ToscaParser.S_GIB - 27)) | (1 << (ToscaParser.S_TB - 27)) | (1 << (ToscaParser.S_TIB - 27)) | (1 << (ToscaParser.T_D - 27)) | (1 << (ToscaParser.T_H - 27)) | (1 << (ToscaParser.T_M - 27)) | (1 << (ToscaParser.T_S - 27)) | (1 << (ToscaParser.T_MS - 27)) | (1 << (ToscaParser.T_US - 27)) | (1 << (ToscaParser.T_NS - 27)) | (1 << (ToscaParser.F_HZ - 27)) | (1 << (ToscaParser.F_KHZ - 27)) | (1 << (ToscaParser.F_MHZ - 27)) | (1 << (ToscaParser.F_GHZ - 27)) | (1 << (ToscaParser.INITIAL - 27)) | (1 << (ToscaParser.CREATING - 27)) | (1 << (ToscaParser.CREATED - 27)) | (1 << (ToscaParser.CONFIGURING - 27)) | (1 << (ToscaParser.CONFIGURED - 27)))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ToscaParser.STARTING - 59)) | (1 << (ToscaParser.STARTED - 59)) | (1 << (ToscaParser.STOPPING - 59)) | (1 << (ToscaParser.STOPPED - 59)) | (1 << (ToscaParser.DELETING - 59)) | (1 << (ToscaParser.ERROR - 59)) | (1 << (ToscaParser.AVAILABLE - 59)) | (1 << (ToscaParser.TOSCA_DEFINITION_VERSION - 59)) | (1 << (ToscaParser.METADATA - 59)) | (1 << (ToscaParser.TEMPLATE_NAME - 59)) | (1 << (ToscaParser.TEMPLATE_AUTHOR - 59)) | (1 << (ToscaParser.TEMPLATE_VERSION - 59)) | (1 << (ToscaParser.ARTIFACT_TYPES - 59)) | (1 << (ToscaParser.DERIVED_FROM - 59)) | (1 << (ToscaParser.MIME_TYPE - 59)) | (1 << (ToscaParser.FILE_EXT - 59)) | (1 << (ToscaParser.DATA_TYPES - 59)) | (1 << (ToscaParser.PROPERTIES - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.REQUIRED - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.REPOSITORIES - 91)) | (1 << (ToscaParser.URL - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CREDENTIAL - 91)) | (1 << (ToscaParser.TOKEN - 91)) | (1 << (ToscaParser.PROTOCOL - 91)) | (1 << (ToscaParser.TOKEN_TYPE - 91)) | (1 << (ToscaParser.USER - 91)) | (1 << (ToscaParser.IMPORTS - 91)) | (1 << (ToscaParser.FILE - 91)) | (1 << (ToscaParser.REPOSITORY - 91)) | (1 << (ToscaParser.NAMESPACE_PREFIX - 91)) | (1 << (ToscaParser.NAMESPACE_URI - 91)) | (1 << (ToscaParser.CAPABILITY_TYPES - 91)) | (1 << (ToscaParser.NODE_TYPES - 91)) | (1 << (ToscaParser.INTERFACE_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TYPES - 91)) | (1 << (ToscaParser.GROUP_TYPES - 91)) | (1 << (ToscaParser.GROUPS - 91)) | (1 << (ToscaParser.COPY - 91)) | (1 << (ToscaParser.POLICY_TYPES - 91)) | (1 << (ToscaParser.TOPOLOGY_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TEMPLATES - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)) | (1 << (ToscaParser.EQUAL - 91)) | (1 << (ToscaParser.GREATER_THAN - 91)) | (1 << (ToscaParser.GREATER_OR_EQUAL - 91)) | (1 << (ToscaParser.LESS_THAN - 91)))) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (ToscaParser.LESS_OR_EQUAL - 123)) | (1 << (ToscaParser.IN_RANGE - 123)) | (1 << (ToscaParser.VALID_VALUES - 123)) | (1 << (ToscaParser.VALUE - 123)) | (1 << (ToscaParser.LENGTH - 123)) | (1 << (ToscaParser.MIN_LENGTH - 123)) | (1 << (ToscaParser.MAX_LENGTH - 123)) | (1 << (ToscaParser.PATTERN - 123)) | (1 << (ToscaParser.ENTRY_SCHEMA - 123)) | (1 << (ToscaParser.ATTRIBUTES - 123)) | (1 << (ToscaParser.VALID_SOURCE_TYPES - 123)) | (1 << (ToscaParser.VALID_TARGET_TYPES - 123)) | (1 << (ToscaParser.INPUTS - 123)) | (1 << (ToscaParser.INTERFACES - 123)) | (1 << (ToscaParser.RELATIONSHIP - 123)) | (1 << (ToscaParser.OCCURENCES - 123)) | (1 << (ToscaParser.DEPLOY_PATH - 123)) | (1 << (ToscaParser.CAPABILITIES - 123)) | (1 << (ToscaParser.NODE - 123)) | (1 << (ToscaParser.IMPLEMENTATION - 123)) | (1 << (ToscaParser.DEPENDENCIES - 123)) | (1 << (ToscaParser.CAPABILITY - 123)) | (1 << (ToscaParser.REQUIREMENTS - 123)) | (1 << (ToscaParser.PRIMARY - 123)) | (1 << (ToscaParser.K_SELF - 123)) | (1 << (ToscaParser.K_HOST - 123)) | (1 << (ToscaParser.K_SOURCE - 123)) | (1 << (ToscaParser.K_TARGET - 123)) | (1 << (ToscaParser.LOCAL_FILE - 123)) | (1 << (ToscaParser.GET_INPUT - 123)) | (1 << (ToscaParser.GET_PROPERTY - 123)) | (1 << (ToscaParser.GET_ATTRIBUTE - 123)))) !== 0) || ((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (ToscaParser.GET_OPERATION_ATTRIBUTE - 155)) | (1 << (ToscaParser.GET_NODES_OF_TYPES - 155)) | (1 << (ToscaParser.GET_ARTIFACT - 155)) | (1 << (ToscaParser.CONCAT - 155)) | (1 << (ToscaParser.DELEGATE - 155)) | (1 << (ToscaParser.SET_STATE - 155)) | (1 << (ToscaParser.CALL_OPERATION - 155)) | (1 << (ToscaParser.DIRECTIVES - 155)) | (1 << (ToscaParser.INLINE - 155)) | (1 << (ToscaParser.TARGET - 155)) | (1 << (ToscaParser.TARGET_RELATIONSHIP - 155)) | (1 << (ToscaParser.FILTER - 155)) | (1 << (ToscaParser.ACTIVITIES - 155)) | (1 << (ToscaParser.OPERATION_HOST - 155)) | (1 << (ToscaParser.ON_SUCCESS - 155)) | (1 << (ToscaParser.ON_FAILURE - 155)) | (1 << (ToscaParser.ASSERT - 155)) | (1 << (ToscaParser.OR - 155)) | (1 << (ToscaParser.AND - 155)) | (1 << (ToscaParser.NOT - 155)) | (1 << (ToscaParser.AFTER - 155)) | (1 << (ToscaParser.BEFORE - 155)) | (1 << (ToscaParser.WAIT_SOURCE - 155)) | (1 << (ToscaParser.AFTER_SOURCE - 155)) | (1 << (ToscaParser.WAIT_TARGET - 155)) | (1 << (ToscaParser.AFTER_TARGET - 155)) | (1 << (ToscaParser.ACTIVITY - 155)) | (1 << (ToscaParser.TARGET_WEAVING - 155)) | (1 << (ToscaParser.SOURCE_WEAVING - 155)) | (1 << (ToscaParser.WORKFLOWS - 155)) | (1 << (ToscaParser.MEMBERS - 155)) | (1 << (ToscaParser.TRUE - 155)))) !== 0) || ((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (ToscaParser.FALSE - 187)) | (1 << (ToscaParser.NEWLINE - 187)) | (1 << (ToscaParser.STRING_LITERAL - 187)) | (1 << (ToscaParser.DECIMAL_INTEGER - 187)) | (1 << (ToscaParser.OCT_INTEGER - 187)) | (1 << (ToscaParser.HEX_INTEGER - 187)) | (1 << (ToscaParser.BIN_INTEGER - 187)) | (1 << (ToscaParser.FLOAT_NUMBER - 187)) | (1 << (ToscaParser.IMAG_NUMBER - 187)) | (1 << (ToscaParser.DOT - 187)) | (1 << (ToscaParser.STAR - 187)) | (1 << (ToscaParser.OPEN_PAREN - 187)) | (1 << (ToscaParser.CLOSE_PAREN - 187)) | (1 << (ToscaParser.COMMA - 187)) | (1 << (ToscaParser.COLON - 187)) | (1 << (ToscaParser.SEMI_COLON - 187)) | (1 << (ToscaParser.POWER - 187)) | (1 << (ToscaParser.ASSIGN - 187)) | (1 << (ToscaParser.OPEN_BRACK - 187)) | (1 << (ToscaParser.CLOSE_BRACK - 187)) | (1 << (ToscaParser.XOR - 187)) | (1 << (ToscaParser.LEFT_SHIFT - 187)) | (1 << (ToscaParser.RIGHT_SHIFT - 187)) | (1 << (ToscaParser.ADD - 187)) | (1 << (ToscaParser.MINUS - 187)) | (1 << (ToscaParser.DIV - 187)) | (1 << (ToscaParser.MOD - 187)) | (1 << (ToscaParser.IDIV - 187)) | (1 << (ToscaParser.OPEN_BRACE - 187)))) !== 0) || ((((_la - 219)) & ~0x1f) == 0 && ((1 << (_la - 219)) & ((1 << (ToscaParser.CLOSE_BRACE - 219)) | (1 << (ToscaParser.INFINITY - 219)) | (1 << (ToscaParser.VERSION - 219)) | (1 << (ToscaParser.UNBOUNDED - 219)) | (1 << (ToscaParser.NULL - 219)) | (1 << (ToscaParser.NAN - 219)) | (1 << (ToscaParser.TIMESTAMP - 219)) | (1 << (ToscaParser.ID - 219)) | (1 << (ToscaParser.UNKNOWN_CHAR - 219)) | (1 << (ToscaParser.INDENT - 219)))) !== 0));
            this.state = 3398;
            this.match(ToscaParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sub_mlstringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_sub_mlstring;
    return this;
}

Sub_mlstringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sub_mlstringContext.prototype.constructor = Sub_mlstringContext;

Sub_mlstringContext.prototype.NEWLINE = function() {
    return this.getToken(ToscaParser.NEWLINE, 0);
};

Sub_mlstringContext.prototype.alltoken = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlltokenContext);
    } else {
        return this.getTypedRuleContext(AlltokenContext,i);
    }
};

Sub_mlstringContext.prototype.INDENT = function() {
    return this.getToken(ToscaParser.INDENT, 0);
};

Sub_mlstringContext.prototype.DEDENT = function() {
    return this.getToken(ToscaParser.DEDENT, 0);
};

Sub_mlstringContext.prototype.sub_mlstring = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sub_mlstringContext);
    } else {
        return this.getTypedRuleContext(Sub_mlstringContext,i);
    }
};

Sub_mlstringContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterSub_mlstring(this);
	}
};

Sub_mlstringContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitSub_mlstring(this);
	}
};




ToscaParser.Sub_mlstringContext = Sub_mlstringContext;

ToscaParser.prototype.sub_mlstring = function() {

    var localctx = new Sub_mlstringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, ToscaParser.RULE_sub_mlstring);
    var _la = 0; // Token type
    try {
        this.state = 3417;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.BASETYPE_NAMES:
        case ToscaParser.TOSCA_SIMPLE_YAML_1_0:
        case ToscaParser.TOSCA_SIMPLE_YAML_1_1:
        case ToscaParser.SUPPORTED:
        case ToscaParser.UNSUPPORTED:
        case ToscaParser.EXPERIMENTAL:
        case ToscaParser.DEPRECATED:
        case ToscaParser.S_B:
        case ToscaParser.S_KB:
        case ToscaParser.S_KIB:
        case ToscaParser.S_MB:
        case ToscaParser.S_GB:
        case ToscaParser.S_GIB:
        case ToscaParser.S_TB:
        case ToscaParser.S_TIB:
        case ToscaParser.T_D:
        case ToscaParser.T_H:
        case ToscaParser.T_M:
        case ToscaParser.T_S:
        case ToscaParser.T_MS:
        case ToscaParser.T_US:
        case ToscaParser.T_NS:
        case ToscaParser.F_HZ:
        case ToscaParser.F_KHZ:
        case ToscaParser.F_MHZ:
        case ToscaParser.F_GHZ:
        case ToscaParser.INITIAL:
        case ToscaParser.CREATING:
        case ToscaParser.CREATED:
        case ToscaParser.CONFIGURING:
        case ToscaParser.CONFIGURED:
        case ToscaParser.STARTING:
        case ToscaParser.STARTED:
        case ToscaParser.STOPPING:
        case ToscaParser.STOPPED:
        case ToscaParser.DELETING:
        case ToscaParser.ERROR:
        case ToscaParser.AVAILABLE:
        case ToscaParser.TOSCA_DEFINITION_VERSION:
        case ToscaParser.METADATA:
        case ToscaParser.TEMPLATE_NAME:
        case ToscaParser.TEMPLATE_AUTHOR:
        case ToscaParser.TEMPLATE_VERSION:
        case ToscaParser.ARTIFACT_TYPES:
        case ToscaParser.DERIVED_FROM:
        case ToscaParser.MIME_TYPE:
        case ToscaParser.FILE_EXT:
        case ToscaParser.DATA_TYPES:
        case ToscaParser.PROPERTIES:
        case ToscaParser.TYPE:
        case ToscaParser.REQUIRED:
        case ToscaParser.STATUS:
        case ToscaParser.DEFAULT:
        case ToscaParser.REPOSITORIES:
        case ToscaParser.URL:
        case ToscaParser.DESCRIPTION:
        case ToscaParser.CREDENTIAL:
        case ToscaParser.TOKEN:
        case ToscaParser.PROTOCOL:
        case ToscaParser.TOKEN_TYPE:
        case ToscaParser.USER:
        case ToscaParser.IMPORTS:
        case ToscaParser.FILE:
        case ToscaParser.REPOSITORY:
        case ToscaParser.NAMESPACE_PREFIX:
        case ToscaParser.NAMESPACE_URI:
        case ToscaParser.CAPABILITY_TYPES:
        case ToscaParser.NODE_TYPES:
        case ToscaParser.INTERFACE_TYPES:
        case ToscaParser.RELATIONSHIP_TYPES:
        case ToscaParser.GROUP_TYPES:
        case ToscaParser.GROUPS:
        case ToscaParser.COPY:
        case ToscaParser.POLICY_TYPES:
        case ToscaParser.TOPOLOGY_TYPES:
        case ToscaParser.RELATIONSHIP_TEMPLATES:
        case ToscaParser.CONSTRAINTS:
        case ToscaParser.EQUAL:
        case ToscaParser.GREATER_THAN:
        case ToscaParser.GREATER_OR_EQUAL:
        case ToscaParser.LESS_THAN:
        case ToscaParser.LESS_OR_EQUAL:
        case ToscaParser.IN_RANGE:
        case ToscaParser.VALID_VALUES:
        case ToscaParser.VALUE:
        case ToscaParser.LENGTH:
        case ToscaParser.MIN_LENGTH:
        case ToscaParser.MAX_LENGTH:
        case ToscaParser.PATTERN:
        case ToscaParser.ENTRY_SCHEMA:
        case ToscaParser.ATTRIBUTES:
        case ToscaParser.VALID_SOURCE_TYPES:
        case ToscaParser.VALID_TARGET_TYPES:
        case ToscaParser.INPUTS:
        case ToscaParser.INTERFACES:
        case ToscaParser.RELATIONSHIP:
        case ToscaParser.OCCURENCES:
        case ToscaParser.DEPLOY_PATH:
        case ToscaParser.CAPABILITIES:
        case ToscaParser.NODE:
        case ToscaParser.IMPLEMENTATION:
        case ToscaParser.DEPENDENCIES:
        case ToscaParser.CAPABILITY:
        case ToscaParser.REQUIREMENTS:
        case ToscaParser.PRIMARY:
        case ToscaParser.K_SELF:
        case ToscaParser.K_HOST:
        case ToscaParser.K_SOURCE:
        case ToscaParser.K_TARGET:
        case ToscaParser.LOCAL_FILE:
        case ToscaParser.GET_INPUT:
        case ToscaParser.GET_PROPERTY:
        case ToscaParser.GET_ATTRIBUTE:
        case ToscaParser.GET_OPERATION_ATTRIBUTE:
        case ToscaParser.GET_NODES_OF_TYPES:
        case ToscaParser.GET_ARTIFACT:
        case ToscaParser.CONCAT:
        case ToscaParser.DELEGATE:
        case ToscaParser.SET_STATE:
        case ToscaParser.CALL_OPERATION:
        case ToscaParser.DIRECTIVES:
        case ToscaParser.INLINE:
        case ToscaParser.TARGET:
        case ToscaParser.TARGET_RELATIONSHIP:
        case ToscaParser.FILTER:
        case ToscaParser.ACTIVITIES:
        case ToscaParser.OPERATION_HOST:
        case ToscaParser.ON_SUCCESS:
        case ToscaParser.ON_FAILURE:
        case ToscaParser.ASSERT:
        case ToscaParser.OR:
        case ToscaParser.AND:
        case ToscaParser.NOT:
        case ToscaParser.AFTER:
        case ToscaParser.BEFORE:
        case ToscaParser.WAIT_SOURCE:
        case ToscaParser.AFTER_SOURCE:
        case ToscaParser.WAIT_TARGET:
        case ToscaParser.AFTER_TARGET:
        case ToscaParser.ACTIVITY:
        case ToscaParser.TARGET_WEAVING:
        case ToscaParser.SOURCE_WEAVING:
        case ToscaParser.WORKFLOWS:
        case ToscaParser.MEMBERS:
        case ToscaParser.TRUE:
        case ToscaParser.FALSE:
        case ToscaParser.NEWLINE:
        case ToscaParser.STRING_LITERAL:
        case ToscaParser.DECIMAL_INTEGER:
        case ToscaParser.OCT_INTEGER:
        case ToscaParser.HEX_INTEGER:
        case ToscaParser.BIN_INTEGER:
        case ToscaParser.FLOAT_NUMBER:
        case ToscaParser.IMAG_NUMBER:
        case ToscaParser.DOT:
        case ToscaParser.STAR:
        case ToscaParser.OPEN_PAREN:
        case ToscaParser.CLOSE_PAREN:
        case ToscaParser.COMMA:
        case ToscaParser.COLON:
        case ToscaParser.SEMI_COLON:
        case ToscaParser.POWER:
        case ToscaParser.ASSIGN:
        case ToscaParser.OPEN_BRACK:
        case ToscaParser.CLOSE_BRACK:
        case ToscaParser.XOR:
        case ToscaParser.LEFT_SHIFT:
        case ToscaParser.RIGHT_SHIFT:
        case ToscaParser.ADD:
        case ToscaParser.MINUS:
        case ToscaParser.DIV:
        case ToscaParser.MOD:
        case ToscaParser.IDIV:
        case ToscaParser.OPEN_BRACE:
        case ToscaParser.CLOSE_BRACE:
        case ToscaParser.INFINITY:
        case ToscaParser.VERSION:
        case ToscaParser.UNBOUNDED:
        case ToscaParser.NULL:
        case ToscaParser.NAN:
        case ToscaParser.TIMESTAMP:
        case ToscaParser.ID:
        case ToscaParser.UNKNOWN_CHAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 3405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (ToscaParser.BASETYPE_NAMES - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_0 - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_1 - 27)) | (1 << (ToscaParser.SUPPORTED - 27)) | (1 << (ToscaParser.UNSUPPORTED - 27)) | (1 << (ToscaParser.EXPERIMENTAL - 27)) | (1 << (ToscaParser.DEPRECATED - 27)) | (1 << (ToscaParser.S_B - 27)) | (1 << (ToscaParser.S_KB - 27)) | (1 << (ToscaParser.S_KIB - 27)) | (1 << (ToscaParser.S_MB - 27)) | (1 << (ToscaParser.S_GB - 27)) | (1 << (ToscaParser.S_GIB - 27)) | (1 << (ToscaParser.S_TB - 27)) | (1 << (ToscaParser.S_TIB - 27)) | (1 << (ToscaParser.T_D - 27)) | (1 << (ToscaParser.T_H - 27)) | (1 << (ToscaParser.T_M - 27)) | (1 << (ToscaParser.T_S - 27)) | (1 << (ToscaParser.T_MS - 27)) | (1 << (ToscaParser.T_US - 27)) | (1 << (ToscaParser.T_NS - 27)) | (1 << (ToscaParser.F_HZ - 27)) | (1 << (ToscaParser.F_KHZ - 27)) | (1 << (ToscaParser.F_MHZ - 27)) | (1 << (ToscaParser.F_GHZ - 27)) | (1 << (ToscaParser.INITIAL - 27)) | (1 << (ToscaParser.CREATING - 27)) | (1 << (ToscaParser.CREATED - 27)) | (1 << (ToscaParser.CONFIGURING - 27)) | (1 << (ToscaParser.CONFIGURED - 27)))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ToscaParser.STARTING - 59)) | (1 << (ToscaParser.STARTED - 59)) | (1 << (ToscaParser.STOPPING - 59)) | (1 << (ToscaParser.STOPPED - 59)) | (1 << (ToscaParser.DELETING - 59)) | (1 << (ToscaParser.ERROR - 59)) | (1 << (ToscaParser.AVAILABLE - 59)) | (1 << (ToscaParser.TOSCA_DEFINITION_VERSION - 59)) | (1 << (ToscaParser.METADATA - 59)) | (1 << (ToscaParser.TEMPLATE_NAME - 59)) | (1 << (ToscaParser.TEMPLATE_AUTHOR - 59)) | (1 << (ToscaParser.TEMPLATE_VERSION - 59)) | (1 << (ToscaParser.ARTIFACT_TYPES - 59)) | (1 << (ToscaParser.DERIVED_FROM - 59)) | (1 << (ToscaParser.MIME_TYPE - 59)) | (1 << (ToscaParser.FILE_EXT - 59)) | (1 << (ToscaParser.DATA_TYPES - 59)) | (1 << (ToscaParser.PROPERTIES - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.REQUIRED - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.REPOSITORIES - 91)) | (1 << (ToscaParser.URL - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CREDENTIAL - 91)) | (1 << (ToscaParser.TOKEN - 91)) | (1 << (ToscaParser.PROTOCOL - 91)) | (1 << (ToscaParser.TOKEN_TYPE - 91)) | (1 << (ToscaParser.USER - 91)) | (1 << (ToscaParser.IMPORTS - 91)) | (1 << (ToscaParser.FILE - 91)) | (1 << (ToscaParser.REPOSITORY - 91)) | (1 << (ToscaParser.NAMESPACE_PREFIX - 91)) | (1 << (ToscaParser.NAMESPACE_URI - 91)) | (1 << (ToscaParser.CAPABILITY_TYPES - 91)) | (1 << (ToscaParser.NODE_TYPES - 91)) | (1 << (ToscaParser.INTERFACE_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TYPES - 91)) | (1 << (ToscaParser.GROUP_TYPES - 91)) | (1 << (ToscaParser.GROUPS - 91)) | (1 << (ToscaParser.COPY - 91)) | (1 << (ToscaParser.POLICY_TYPES - 91)) | (1 << (ToscaParser.TOPOLOGY_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TEMPLATES - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)) | (1 << (ToscaParser.EQUAL - 91)) | (1 << (ToscaParser.GREATER_THAN - 91)) | (1 << (ToscaParser.GREATER_OR_EQUAL - 91)) | (1 << (ToscaParser.LESS_THAN - 91)))) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (ToscaParser.LESS_OR_EQUAL - 123)) | (1 << (ToscaParser.IN_RANGE - 123)) | (1 << (ToscaParser.VALID_VALUES - 123)) | (1 << (ToscaParser.VALUE - 123)) | (1 << (ToscaParser.LENGTH - 123)) | (1 << (ToscaParser.MIN_LENGTH - 123)) | (1 << (ToscaParser.MAX_LENGTH - 123)) | (1 << (ToscaParser.PATTERN - 123)) | (1 << (ToscaParser.ENTRY_SCHEMA - 123)) | (1 << (ToscaParser.ATTRIBUTES - 123)) | (1 << (ToscaParser.VALID_SOURCE_TYPES - 123)) | (1 << (ToscaParser.VALID_TARGET_TYPES - 123)) | (1 << (ToscaParser.INPUTS - 123)) | (1 << (ToscaParser.INTERFACES - 123)) | (1 << (ToscaParser.RELATIONSHIP - 123)) | (1 << (ToscaParser.OCCURENCES - 123)) | (1 << (ToscaParser.DEPLOY_PATH - 123)) | (1 << (ToscaParser.CAPABILITIES - 123)) | (1 << (ToscaParser.NODE - 123)) | (1 << (ToscaParser.IMPLEMENTATION - 123)) | (1 << (ToscaParser.DEPENDENCIES - 123)) | (1 << (ToscaParser.CAPABILITY - 123)) | (1 << (ToscaParser.REQUIREMENTS - 123)) | (1 << (ToscaParser.PRIMARY - 123)) | (1 << (ToscaParser.K_SELF - 123)) | (1 << (ToscaParser.K_HOST - 123)) | (1 << (ToscaParser.K_SOURCE - 123)) | (1 << (ToscaParser.K_TARGET - 123)) | (1 << (ToscaParser.LOCAL_FILE - 123)) | (1 << (ToscaParser.GET_INPUT - 123)) | (1 << (ToscaParser.GET_PROPERTY - 123)) | (1 << (ToscaParser.GET_ATTRIBUTE - 123)))) !== 0) || ((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (ToscaParser.GET_OPERATION_ATTRIBUTE - 155)) | (1 << (ToscaParser.GET_NODES_OF_TYPES - 155)) | (1 << (ToscaParser.GET_ARTIFACT - 155)) | (1 << (ToscaParser.CONCAT - 155)) | (1 << (ToscaParser.DELEGATE - 155)) | (1 << (ToscaParser.SET_STATE - 155)) | (1 << (ToscaParser.CALL_OPERATION - 155)) | (1 << (ToscaParser.DIRECTIVES - 155)) | (1 << (ToscaParser.INLINE - 155)) | (1 << (ToscaParser.TARGET - 155)) | (1 << (ToscaParser.TARGET_RELATIONSHIP - 155)) | (1 << (ToscaParser.FILTER - 155)) | (1 << (ToscaParser.ACTIVITIES - 155)) | (1 << (ToscaParser.OPERATION_HOST - 155)) | (1 << (ToscaParser.ON_SUCCESS - 155)) | (1 << (ToscaParser.ON_FAILURE - 155)) | (1 << (ToscaParser.ASSERT - 155)) | (1 << (ToscaParser.OR - 155)) | (1 << (ToscaParser.AND - 155)) | (1 << (ToscaParser.NOT - 155)) | (1 << (ToscaParser.AFTER - 155)) | (1 << (ToscaParser.BEFORE - 155)) | (1 << (ToscaParser.WAIT_SOURCE - 155)) | (1 << (ToscaParser.AFTER_SOURCE - 155)) | (1 << (ToscaParser.WAIT_TARGET - 155)) | (1 << (ToscaParser.AFTER_TARGET - 155)) | (1 << (ToscaParser.ACTIVITY - 155)) | (1 << (ToscaParser.TARGET_WEAVING - 155)) | (1 << (ToscaParser.SOURCE_WEAVING - 155)) | (1 << (ToscaParser.WORKFLOWS - 155)) | (1 << (ToscaParser.MEMBERS - 155)) | (1 << (ToscaParser.TRUE - 155)))) !== 0) || ((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (ToscaParser.FALSE - 187)) | (1 << (ToscaParser.STRING_LITERAL - 187)) | (1 << (ToscaParser.DECIMAL_INTEGER - 187)) | (1 << (ToscaParser.OCT_INTEGER - 187)) | (1 << (ToscaParser.HEX_INTEGER - 187)) | (1 << (ToscaParser.BIN_INTEGER - 187)) | (1 << (ToscaParser.FLOAT_NUMBER - 187)) | (1 << (ToscaParser.IMAG_NUMBER - 187)) | (1 << (ToscaParser.DOT - 187)) | (1 << (ToscaParser.STAR - 187)) | (1 << (ToscaParser.OPEN_PAREN - 187)) | (1 << (ToscaParser.CLOSE_PAREN - 187)) | (1 << (ToscaParser.COMMA - 187)) | (1 << (ToscaParser.COLON - 187)) | (1 << (ToscaParser.SEMI_COLON - 187)) | (1 << (ToscaParser.POWER - 187)) | (1 << (ToscaParser.ASSIGN - 187)) | (1 << (ToscaParser.OPEN_BRACK - 187)) | (1 << (ToscaParser.CLOSE_BRACK - 187)) | (1 << (ToscaParser.XOR - 187)) | (1 << (ToscaParser.LEFT_SHIFT - 187)) | (1 << (ToscaParser.RIGHT_SHIFT - 187)) | (1 << (ToscaParser.ADD - 187)) | (1 << (ToscaParser.MINUS - 187)) | (1 << (ToscaParser.DIV - 187)) | (1 << (ToscaParser.MOD - 187)) | (1 << (ToscaParser.IDIV - 187)) | (1 << (ToscaParser.OPEN_BRACE - 187)))) !== 0) || ((((_la - 219)) & ~0x1f) == 0 && ((1 << (_la - 219)) & ((1 << (ToscaParser.CLOSE_BRACE - 219)) | (1 << (ToscaParser.INFINITY - 219)) | (1 << (ToscaParser.VERSION - 219)) | (1 << (ToscaParser.UNBOUNDED - 219)) | (1 << (ToscaParser.NULL - 219)) | (1 << (ToscaParser.NAN - 219)) | (1 << (ToscaParser.TIMESTAMP - 219)) | (1 << (ToscaParser.ID - 219)) | (1 << (ToscaParser.UNKNOWN_CHAR - 219)))) !== 0)) {
                this.state = 3402;
                this.alltoken();
                this.state = 3407;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3408;
            this.match(ToscaParser.NEWLINE);
            break;
        case ToscaParser.INDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3409;
            this.match(ToscaParser.INDENT);
            this.state = 3411; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3410;
                this.sub_mlstring();
                this.state = 3413; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (ToscaParser.BASETYPE_NAMES - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_0 - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_1 - 27)) | (1 << (ToscaParser.SUPPORTED - 27)) | (1 << (ToscaParser.UNSUPPORTED - 27)) | (1 << (ToscaParser.EXPERIMENTAL - 27)) | (1 << (ToscaParser.DEPRECATED - 27)) | (1 << (ToscaParser.S_B - 27)) | (1 << (ToscaParser.S_KB - 27)) | (1 << (ToscaParser.S_KIB - 27)) | (1 << (ToscaParser.S_MB - 27)) | (1 << (ToscaParser.S_GB - 27)) | (1 << (ToscaParser.S_GIB - 27)) | (1 << (ToscaParser.S_TB - 27)) | (1 << (ToscaParser.S_TIB - 27)) | (1 << (ToscaParser.T_D - 27)) | (1 << (ToscaParser.T_H - 27)) | (1 << (ToscaParser.T_M - 27)) | (1 << (ToscaParser.T_S - 27)) | (1 << (ToscaParser.T_MS - 27)) | (1 << (ToscaParser.T_US - 27)) | (1 << (ToscaParser.T_NS - 27)) | (1 << (ToscaParser.F_HZ - 27)) | (1 << (ToscaParser.F_KHZ - 27)) | (1 << (ToscaParser.F_MHZ - 27)) | (1 << (ToscaParser.F_GHZ - 27)) | (1 << (ToscaParser.INITIAL - 27)) | (1 << (ToscaParser.CREATING - 27)) | (1 << (ToscaParser.CREATED - 27)) | (1 << (ToscaParser.CONFIGURING - 27)) | (1 << (ToscaParser.CONFIGURED - 27)))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ToscaParser.STARTING - 59)) | (1 << (ToscaParser.STARTED - 59)) | (1 << (ToscaParser.STOPPING - 59)) | (1 << (ToscaParser.STOPPED - 59)) | (1 << (ToscaParser.DELETING - 59)) | (1 << (ToscaParser.ERROR - 59)) | (1 << (ToscaParser.AVAILABLE - 59)) | (1 << (ToscaParser.TOSCA_DEFINITION_VERSION - 59)) | (1 << (ToscaParser.METADATA - 59)) | (1 << (ToscaParser.TEMPLATE_NAME - 59)) | (1 << (ToscaParser.TEMPLATE_AUTHOR - 59)) | (1 << (ToscaParser.TEMPLATE_VERSION - 59)) | (1 << (ToscaParser.ARTIFACT_TYPES - 59)) | (1 << (ToscaParser.DERIVED_FROM - 59)) | (1 << (ToscaParser.MIME_TYPE - 59)) | (1 << (ToscaParser.FILE_EXT - 59)) | (1 << (ToscaParser.DATA_TYPES - 59)) | (1 << (ToscaParser.PROPERTIES - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.REQUIRED - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.REPOSITORIES - 91)) | (1 << (ToscaParser.URL - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CREDENTIAL - 91)) | (1 << (ToscaParser.TOKEN - 91)) | (1 << (ToscaParser.PROTOCOL - 91)) | (1 << (ToscaParser.TOKEN_TYPE - 91)) | (1 << (ToscaParser.USER - 91)) | (1 << (ToscaParser.IMPORTS - 91)) | (1 << (ToscaParser.FILE - 91)) | (1 << (ToscaParser.REPOSITORY - 91)) | (1 << (ToscaParser.NAMESPACE_PREFIX - 91)) | (1 << (ToscaParser.NAMESPACE_URI - 91)) | (1 << (ToscaParser.CAPABILITY_TYPES - 91)) | (1 << (ToscaParser.NODE_TYPES - 91)) | (1 << (ToscaParser.INTERFACE_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TYPES - 91)) | (1 << (ToscaParser.GROUP_TYPES - 91)) | (1 << (ToscaParser.GROUPS - 91)) | (1 << (ToscaParser.COPY - 91)) | (1 << (ToscaParser.POLICY_TYPES - 91)) | (1 << (ToscaParser.TOPOLOGY_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TEMPLATES - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)) | (1 << (ToscaParser.EQUAL - 91)) | (1 << (ToscaParser.GREATER_THAN - 91)) | (1 << (ToscaParser.GREATER_OR_EQUAL - 91)) | (1 << (ToscaParser.LESS_THAN - 91)))) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (ToscaParser.LESS_OR_EQUAL - 123)) | (1 << (ToscaParser.IN_RANGE - 123)) | (1 << (ToscaParser.VALID_VALUES - 123)) | (1 << (ToscaParser.VALUE - 123)) | (1 << (ToscaParser.LENGTH - 123)) | (1 << (ToscaParser.MIN_LENGTH - 123)) | (1 << (ToscaParser.MAX_LENGTH - 123)) | (1 << (ToscaParser.PATTERN - 123)) | (1 << (ToscaParser.ENTRY_SCHEMA - 123)) | (1 << (ToscaParser.ATTRIBUTES - 123)) | (1 << (ToscaParser.VALID_SOURCE_TYPES - 123)) | (1 << (ToscaParser.VALID_TARGET_TYPES - 123)) | (1 << (ToscaParser.INPUTS - 123)) | (1 << (ToscaParser.INTERFACES - 123)) | (1 << (ToscaParser.RELATIONSHIP - 123)) | (1 << (ToscaParser.OCCURENCES - 123)) | (1 << (ToscaParser.DEPLOY_PATH - 123)) | (1 << (ToscaParser.CAPABILITIES - 123)) | (1 << (ToscaParser.NODE - 123)) | (1 << (ToscaParser.IMPLEMENTATION - 123)) | (1 << (ToscaParser.DEPENDENCIES - 123)) | (1 << (ToscaParser.CAPABILITY - 123)) | (1 << (ToscaParser.REQUIREMENTS - 123)) | (1 << (ToscaParser.PRIMARY - 123)) | (1 << (ToscaParser.K_SELF - 123)) | (1 << (ToscaParser.K_HOST - 123)) | (1 << (ToscaParser.K_SOURCE - 123)) | (1 << (ToscaParser.K_TARGET - 123)) | (1 << (ToscaParser.LOCAL_FILE - 123)) | (1 << (ToscaParser.GET_INPUT - 123)) | (1 << (ToscaParser.GET_PROPERTY - 123)) | (1 << (ToscaParser.GET_ATTRIBUTE - 123)))) !== 0) || ((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (ToscaParser.GET_OPERATION_ATTRIBUTE - 155)) | (1 << (ToscaParser.GET_NODES_OF_TYPES - 155)) | (1 << (ToscaParser.GET_ARTIFACT - 155)) | (1 << (ToscaParser.CONCAT - 155)) | (1 << (ToscaParser.DELEGATE - 155)) | (1 << (ToscaParser.SET_STATE - 155)) | (1 << (ToscaParser.CALL_OPERATION - 155)) | (1 << (ToscaParser.DIRECTIVES - 155)) | (1 << (ToscaParser.INLINE - 155)) | (1 << (ToscaParser.TARGET - 155)) | (1 << (ToscaParser.TARGET_RELATIONSHIP - 155)) | (1 << (ToscaParser.FILTER - 155)) | (1 << (ToscaParser.ACTIVITIES - 155)) | (1 << (ToscaParser.OPERATION_HOST - 155)) | (1 << (ToscaParser.ON_SUCCESS - 155)) | (1 << (ToscaParser.ON_FAILURE - 155)) | (1 << (ToscaParser.ASSERT - 155)) | (1 << (ToscaParser.OR - 155)) | (1 << (ToscaParser.AND - 155)) | (1 << (ToscaParser.NOT - 155)) | (1 << (ToscaParser.AFTER - 155)) | (1 << (ToscaParser.BEFORE - 155)) | (1 << (ToscaParser.WAIT_SOURCE - 155)) | (1 << (ToscaParser.AFTER_SOURCE - 155)) | (1 << (ToscaParser.WAIT_TARGET - 155)) | (1 << (ToscaParser.AFTER_TARGET - 155)) | (1 << (ToscaParser.ACTIVITY - 155)) | (1 << (ToscaParser.TARGET_WEAVING - 155)) | (1 << (ToscaParser.SOURCE_WEAVING - 155)) | (1 << (ToscaParser.WORKFLOWS - 155)) | (1 << (ToscaParser.MEMBERS - 155)) | (1 << (ToscaParser.TRUE - 155)))) !== 0) || ((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (ToscaParser.FALSE - 187)) | (1 << (ToscaParser.NEWLINE - 187)) | (1 << (ToscaParser.STRING_LITERAL - 187)) | (1 << (ToscaParser.DECIMAL_INTEGER - 187)) | (1 << (ToscaParser.OCT_INTEGER - 187)) | (1 << (ToscaParser.HEX_INTEGER - 187)) | (1 << (ToscaParser.BIN_INTEGER - 187)) | (1 << (ToscaParser.FLOAT_NUMBER - 187)) | (1 << (ToscaParser.IMAG_NUMBER - 187)) | (1 << (ToscaParser.DOT - 187)) | (1 << (ToscaParser.STAR - 187)) | (1 << (ToscaParser.OPEN_PAREN - 187)) | (1 << (ToscaParser.CLOSE_PAREN - 187)) | (1 << (ToscaParser.COMMA - 187)) | (1 << (ToscaParser.COLON - 187)) | (1 << (ToscaParser.SEMI_COLON - 187)) | (1 << (ToscaParser.POWER - 187)) | (1 << (ToscaParser.ASSIGN - 187)) | (1 << (ToscaParser.OPEN_BRACK - 187)) | (1 << (ToscaParser.CLOSE_BRACK - 187)) | (1 << (ToscaParser.XOR - 187)) | (1 << (ToscaParser.LEFT_SHIFT - 187)) | (1 << (ToscaParser.RIGHT_SHIFT - 187)) | (1 << (ToscaParser.ADD - 187)) | (1 << (ToscaParser.MINUS - 187)) | (1 << (ToscaParser.DIV - 187)) | (1 << (ToscaParser.MOD - 187)) | (1 << (ToscaParser.IDIV - 187)) | (1 << (ToscaParser.OPEN_BRACE - 187)))) !== 0) || ((((_la - 219)) & ~0x1f) == 0 && ((1 << (_la - 219)) & ((1 << (ToscaParser.CLOSE_BRACE - 219)) | (1 << (ToscaParser.INFINITY - 219)) | (1 << (ToscaParser.VERSION - 219)) | (1 << (ToscaParser.UNBOUNDED - 219)) | (1 << (ToscaParser.NULL - 219)) | (1 << (ToscaParser.NAN - 219)) | (1 << (ToscaParser.TIMESTAMP - 219)) | (1 << (ToscaParser.ID - 219)) | (1 << (ToscaParser.UNKNOWN_CHAR - 219)) | (1 << (ToscaParser.INDENT - 219)))) !== 0));
            this.state = 3415;
            this.match(ToscaParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

NumberContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(ToscaParser.FLOAT_NUMBER, 0);
};

NumberContext.prototype.IMAG_NUMBER = function() {
    return this.getToken(ToscaParser.IMAG_NUMBER, 0);
};

NumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterNumber(this);
	}
};

NumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitNumber(this);
	}
};




ToscaParser.NumberContext = NumberContext;

ToscaParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, ToscaParser.RULE_number);
    try {
        this.state = 3422;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ToscaParser.DECIMAL_INTEGER:
        case ToscaParser.OCT_INTEGER:
        case ToscaParser.HEX_INTEGER:
        case ToscaParser.BIN_INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 3419;
            this.integer();
            break;
        case ToscaParser.FLOAT_NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 3420;
            this.match(ToscaParser.FLOAT_NUMBER);
            break;
        case ToscaParser.IMAG_NUMBER:
            this.enterOuterAlt(localctx, 3);
            this.state = 3421;
            this.match(ToscaParser.IMAG_NUMBER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BoolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_bool;
    return this;
}

BoolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolContext.prototype.constructor = BoolContext;

BoolContext.prototype.TRUE = function() {
    return this.getToken(ToscaParser.TRUE, 0);
};

BoolContext.prototype.FALSE = function() {
    return this.getToken(ToscaParser.FALSE, 0);
};

BoolContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterBool(this);
	}
};

BoolContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitBool(this);
	}
};




ToscaParser.BoolContext = BoolContext;

ToscaParser.prototype.bool = function() {

    var localctx = new BoolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, ToscaParser.RULE_bool);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3424;
        _la = this._input.LA(1);
        if(!(_la===ToscaParser.TRUE || _la===ToscaParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_integer;
    return this;
}

IntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerContext.prototype.constructor = IntegerContext;

IntegerContext.prototype.DECIMAL_INTEGER = function() {
    return this.getToken(ToscaParser.DECIMAL_INTEGER, 0);
};

IntegerContext.prototype.OCT_INTEGER = function() {
    return this.getToken(ToscaParser.OCT_INTEGER, 0);
};

IntegerContext.prototype.HEX_INTEGER = function() {
    return this.getToken(ToscaParser.HEX_INTEGER, 0);
};

IntegerContext.prototype.BIN_INTEGER = function() {
    return this.getToken(ToscaParser.BIN_INTEGER, 0);
};

IntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterInteger(this);
	}
};

IntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitInteger(this);
	}
};




ToscaParser.IntegerContext = IntegerContext;

ToscaParser.prototype.integer = function() {

    var localctx = new IntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, ToscaParser.RULE_integer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3426;
        _la = this._input.LA(1);
        if(!(((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & ((1 << (ToscaParser.DECIMAL_INTEGER - 191)) | (1 << (ToscaParser.OCT_INTEGER - 191)) | (1 << (ToscaParser.HEX_INTEGER - 191)) | (1 << (ToscaParser.BIN_INTEGER - 191)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_size;
    return this;
}

SizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SizeContext.prototype.constructor = SizeContext;

SizeContext.prototype.DECIMAL_INTEGER = function() {
    return this.getToken(ToscaParser.DECIMAL_INTEGER, 0);
};

SizeContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(ToscaParser.FLOAT_NUMBER, 0);
};

SizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterSize(this);
	}
};

SizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitSize(this);
	}
};




ToscaParser.SizeContext = SizeContext;

ToscaParser.prototype.size = function() {

    var localctx = new SizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, ToscaParser.RULE_size);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3428;
        _la = this._input.LA(1);
        if(!(_la===ToscaParser.DECIMAL_INTEGER || _la===ToscaParser.FLOAT_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3429;
        _la = this._input.LA(1);
        if(!(((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ToscaParser.S_B - 34)) | (1 << (ToscaParser.S_KB - 34)) | (1 << (ToscaParser.S_KIB - 34)) | (1 << (ToscaParser.S_MB - 34)) | (1 << (ToscaParser.S_GB - 34)) | (1 << (ToscaParser.S_GIB - 34)) | (1 << (ToscaParser.S_TB - 34)) | (1 << (ToscaParser.S_TIB - 34)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_time;
    return this;
}

TimeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeContext.prototype.constructor = TimeContext;

TimeContext.prototype.DECIMAL_INTEGER = function() {
    return this.getToken(ToscaParser.DECIMAL_INTEGER, 0);
};

TimeContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(ToscaParser.FLOAT_NUMBER, 0);
};

TimeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterTime(this);
	}
};

TimeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitTime(this);
	}
};




ToscaParser.TimeContext = TimeContext;

ToscaParser.prototype.time = function() {

    var localctx = new TimeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, ToscaParser.RULE_time);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3431;
        _la = this._input.LA(1);
        if(!(_la===ToscaParser.DECIMAL_INTEGER || _la===ToscaParser.FLOAT_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3432;
        _la = this._input.LA(1);
        if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (ToscaParser.T_D - 43)) | (1 << (ToscaParser.T_H - 43)) | (1 << (ToscaParser.T_M - 43)) | (1 << (ToscaParser.T_S - 43)) | (1 << (ToscaParser.T_MS - 43)) | (1 << (ToscaParser.T_US - 43)) | (1 << (ToscaParser.T_NS - 43)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FreqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_freq;
    return this;
}

FreqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FreqContext.prototype.constructor = FreqContext;

FreqContext.prototype.DECIMAL_INTEGER = function() {
    return this.getToken(ToscaParser.DECIMAL_INTEGER, 0);
};

FreqContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(ToscaParser.FLOAT_NUMBER, 0);
};

FreqContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterFreq(this);
	}
};

FreqContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitFreq(this);
	}
};




ToscaParser.FreqContext = FreqContext;

ToscaParser.prototype.freq = function() {

    var localctx = new FreqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, ToscaParser.RULE_freq);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3434;
        _la = this._input.LA(1);
        if(!(_la===ToscaParser.DECIMAL_INTEGER || _la===ToscaParser.FLOAT_NUMBER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3435;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (ToscaParser.F_HZ - 50)) | (1 << (ToscaParser.F_KHZ - 50)) | (1 << (ToscaParser.F_MHZ - 50)) | (1 << (ToscaParser.F_GHZ - 50)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Workflow_stateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_workflow_state;
    return this;
}

Workflow_stateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Workflow_stateContext.prototype.constructor = Workflow_stateContext;


Workflow_stateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterWorkflow_state(this);
	}
};

Workflow_stateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitWorkflow_state(this);
	}
};




ToscaParser.Workflow_stateContext = Workflow_stateContext;

ToscaParser.prototype.workflow_state = function() {

    var localctx = new Workflow_stateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, ToscaParser.RULE_workflow_state);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3437;
        _la = this._input.LA(1);
        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (ToscaParser.INITIAL - 54)) | (1 << (ToscaParser.CREATING - 54)) | (1 << (ToscaParser.CREATED - 54)) | (1 << (ToscaParser.CONFIGURING - 54)) | (1 << (ToscaParser.CONFIGURED - 54)) | (1 << (ToscaParser.STARTING - 54)) | (1 << (ToscaParser.STARTED - 54)) | (1 << (ToscaParser.STOPPING - 54)) | (1 << (ToscaParser.STOPPED - 54)) | (1 << (ToscaParser.DELETING - 54)) | (1 << (ToscaParser.ERROR - 54)) | (1 << (ToscaParser.AVAILABLE - 54)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlltokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ToscaParser.RULE_alltoken;
    return this;
}

AlltokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlltokenContext.prototype.constructor = AlltokenContext;

AlltokenContext.prototype.TOSCA_SIMPLE_YAML_1_0 = function() {
    return this.getToken(ToscaParser.TOSCA_SIMPLE_YAML_1_0, 0);
};

AlltokenContext.prototype.TOSCA_SIMPLE_YAML_1_1 = function() {
    return this.getToken(ToscaParser.TOSCA_SIMPLE_YAML_1_1, 0);
};

AlltokenContext.prototype.SUPPORTED = function() {
    return this.getToken(ToscaParser.SUPPORTED, 0);
};

AlltokenContext.prototype.UNSUPPORTED = function() {
    return this.getToken(ToscaParser.UNSUPPORTED, 0);
};

AlltokenContext.prototype.EXPERIMENTAL = function() {
    return this.getToken(ToscaParser.EXPERIMENTAL, 0);
};

AlltokenContext.prototype.DEPRECATED = function() {
    return this.getToken(ToscaParser.DEPRECATED, 0);
};

AlltokenContext.prototype.S_B = function() {
    return this.getToken(ToscaParser.S_B, 0);
};

AlltokenContext.prototype.S_KB = function() {
    return this.getToken(ToscaParser.S_KB, 0);
};

AlltokenContext.prototype.S_KIB = function() {
    return this.getToken(ToscaParser.S_KIB, 0);
};

AlltokenContext.prototype.S_MB = function() {
    return this.getToken(ToscaParser.S_MB, 0);
};

AlltokenContext.prototype.S_GB = function() {
    return this.getToken(ToscaParser.S_GB, 0);
};

AlltokenContext.prototype.S_GIB = function() {
    return this.getToken(ToscaParser.S_GIB, 0);
};

AlltokenContext.prototype.S_TB = function() {
    return this.getToken(ToscaParser.S_TB, 0);
};

AlltokenContext.prototype.S_TIB = function() {
    return this.getToken(ToscaParser.S_TIB, 0);
};

AlltokenContext.prototype.T_D = function() {
    return this.getToken(ToscaParser.T_D, 0);
};

AlltokenContext.prototype.T_H = function() {
    return this.getToken(ToscaParser.T_H, 0);
};

AlltokenContext.prototype.T_M = function() {
    return this.getToken(ToscaParser.T_M, 0);
};

AlltokenContext.prototype.T_S = function() {
    return this.getToken(ToscaParser.T_S, 0);
};

AlltokenContext.prototype.T_MS = function() {
    return this.getToken(ToscaParser.T_MS, 0);
};

AlltokenContext.prototype.T_US = function() {
    return this.getToken(ToscaParser.T_US, 0);
};

AlltokenContext.prototype.T_NS = function() {
    return this.getToken(ToscaParser.T_NS, 0);
};

AlltokenContext.prototype.F_HZ = function() {
    return this.getToken(ToscaParser.F_HZ, 0);
};

AlltokenContext.prototype.F_KHZ = function() {
    return this.getToken(ToscaParser.F_KHZ, 0);
};

AlltokenContext.prototype.F_MHZ = function() {
    return this.getToken(ToscaParser.F_MHZ, 0);
};

AlltokenContext.prototype.F_GHZ = function() {
    return this.getToken(ToscaParser.F_GHZ, 0);
};

AlltokenContext.prototype.INITIAL = function() {
    return this.getToken(ToscaParser.INITIAL, 0);
};

AlltokenContext.prototype.CREATING = function() {
    return this.getToken(ToscaParser.CREATING, 0);
};

AlltokenContext.prototype.CREATED = function() {
    return this.getToken(ToscaParser.CREATED, 0);
};

AlltokenContext.prototype.CONFIGURING = function() {
    return this.getToken(ToscaParser.CONFIGURING, 0);
};

AlltokenContext.prototype.CONFIGURED = function() {
    return this.getToken(ToscaParser.CONFIGURED, 0);
};

AlltokenContext.prototype.STARTING = function() {
    return this.getToken(ToscaParser.STARTING, 0);
};

AlltokenContext.prototype.STARTED = function() {
    return this.getToken(ToscaParser.STARTED, 0);
};

AlltokenContext.prototype.STOPPING = function() {
    return this.getToken(ToscaParser.STOPPING, 0);
};

AlltokenContext.prototype.STOPPED = function() {
    return this.getToken(ToscaParser.STOPPED, 0);
};

AlltokenContext.prototype.DELETING = function() {
    return this.getToken(ToscaParser.DELETING, 0);
};

AlltokenContext.prototype.ERROR = function() {
    return this.getToken(ToscaParser.ERROR, 0);
};

AlltokenContext.prototype.AVAILABLE = function() {
    return this.getToken(ToscaParser.AVAILABLE, 0);
};

AlltokenContext.prototype.TOSCA_DEFINITION_VERSION = function() {
    return this.getToken(ToscaParser.TOSCA_DEFINITION_VERSION, 0);
};

AlltokenContext.prototype.VERSION = function() {
    return this.getToken(ToscaParser.VERSION, 0);
};

AlltokenContext.prototype.METADATA = function() {
    return this.getToken(ToscaParser.METADATA, 0);
};

AlltokenContext.prototype.TEMPLATE_NAME = function() {
    return this.getToken(ToscaParser.TEMPLATE_NAME, 0);
};

AlltokenContext.prototype.TEMPLATE_AUTHOR = function() {
    return this.getToken(ToscaParser.TEMPLATE_AUTHOR, 0);
};

AlltokenContext.prototype.TEMPLATE_VERSION = function() {
    return this.getToken(ToscaParser.TEMPLATE_VERSION, 0);
};

AlltokenContext.prototype.ARTIFACT_TYPES = function() {
    return this.getToken(ToscaParser.ARTIFACT_TYPES, 0);
};

AlltokenContext.prototype.DERIVED_FROM = function() {
    return this.getToken(ToscaParser.DERIVED_FROM, 0);
};

AlltokenContext.prototype.MIME_TYPE = function() {
    return this.getToken(ToscaParser.MIME_TYPE, 0);
};

AlltokenContext.prototype.FILE_EXT = function() {
    return this.getToken(ToscaParser.FILE_EXT, 0);
};

AlltokenContext.prototype.DATA_TYPES = function() {
    return this.getToken(ToscaParser.DATA_TYPES, 0);
};

AlltokenContext.prototype.PROPERTIES = function() {
    return this.getToken(ToscaParser.PROPERTIES, 0);
};

AlltokenContext.prototype.TYPE = function() {
    return this.getToken(ToscaParser.TYPE, 0);
};

AlltokenContext.prototype.REQUIRED = function() {
    return this.getToken(ToscaParser.REQUIRED, 0);
};

AlltokenContext.prototype.STATUS = function() {
    return this.getToken(ToscaParser.STATUS, 0);
};

AlltokenContext.prototype.DEFAULT = function() {
    return this.getToken(ToscaParser.DEFAULT, 0);
};

AlltokenContext.prototype.REPOSITORIES = function() {
    return this.getToken(ToscaParser.REPOSITORIES, 0);
};

AlltokenContext.prototype.URL = function() {
    return this.getToken(ToscaParser.URL, 0);
};

AlltokenContext.prototype.DESCRIPTION = function() {
    return this.getToken(ToscaParser.DESCRIPTION, 0);
};

AlltokenContext.prototype.CREDENTIAL = function() {
    return this.getToken(ToscaParser.CREDENTIAL, 0);
};

AlltokenContext.prototype.TOKEN = function() {
    return this.getToken(ToscaParser.TOKEN, 0);
};

AlltokenContext.prototype.PROTOCOL = function() {
    return this.getToken(ToscaParser.PROTOCOL, 0);
};

AlltokenContext.prototype.TOKEN_TYPE = function() {
    return this.getToken(ToscaParser.TOKEN_TYPE, 0);
};

AlltokenContext.prototype.USER = function() {
    return this.getToken(ToscaParser.USER, 0);
};

AlltokenContext.prototype.IMPORTS = function() {
    return this.getToken(ToscaParser.IMPORTS, 0);
};

AlltokenContext.prototype.FILE = function() {
    return this.getToken(ToscaParser.FILE, 0);
};

AlltokenContext.prototype.REPOSITORY = function() {
    return this.getToken(ToscaParser.REPOSITORY, 0);
};

AlltokenContext.prototype.NAMESPACE_PREFIX = function() {
    return this.getToken(ToscaParser.NAMESPACE_PREFIX, 0);
};

AlltokenContext.prototype.NAMESPACE_URI = function() {
    return this.getToken(ToscaParser.NAMESPACE_URI, 0);
};

AlltokenContext.prototype.CAPABILITY_TYPES = function() {
    return this.getToken(ToscaParser.CAPABILITY_TYPES, 0);
};

AlltokenContext.prototype.NODE_TYPES = function() {
    return this.getToken(ToscaParser.NODE_TYPES, 0);
};

AlltokenContext.prototype.INTERFACE_TYPES = function() {
    return this.getToken(ToscaParser.INTERFACE_TYPES, 0);
};

AlltokenContext.prototype.RELATIONSHIP_TYPES = function() {
    return this.getToken(ToscaParser.RELATIONSHIP_TYPES, 0);
};

AlltokenContext.prototype.GROUP_TYPES = function() {
    return this.getToken(ToscaParser.GROUP_TYPES, 0);
};

AlltokenContext.prototype.GROUPS = function() {
    return this.getToken(ToscaParser.GROUPS, 0);
};

AlltokenContext.prototype.COPY = function() {
    return this.getToken(ToscaParser.COPY, 0);
};

AlltokenContext.prototype.POLICY_TYPES = function() {
    return this.getToken(ToscaParser.POLICY_TYPES, 0);
};

AlltokenContext.prototype.TOPOLOGY_TYPES = function() {
    return this.getToken(ToscaParser.TOPOLOGY_TYPES, 0);
};

AlltokenContext.prototype.RELATIONSHIP_TEMPLATES = function() {
    return this.getToken(ToscaParser.RELATIONSHIP_TEMPLATES, 0);
};

AlltokenContext.prototype.CONSTRAINTS = function() {
    return this.getToken(ToscaParser.CONSTRAINTS, 0);
};

AlltokenContext.prototype.EQUAL = function() {
    return this.getToken(ToscaParser.EQUAL, 0);
};

AlltokenContext.prototype.GREATER_THAN = function() {
    return this.getToken(ToscaParser.GREATER_THAN, 0);
};

AlltokenContext.prototype.GREATER_OR_EQUAL = function() {
    return this.getToken(ToscaParser.GREATER_OR_EQUAL, 0);
};

AlltokenContext.prototype.LESS_THAN = function() {
    return this.getToken(ToscaParser.LESS_THAN, 0);
};

AlltokenContext.prototype.LESS_OR_EQUAL = function() {
    return this.getToken(ToscaParser.LESS_OR_EQUAL, 0);
};

AlltokenContext.prototype.IN_RANGE = function() {
    return this.getToken(ToscaParser.IN_RANGE, 0);
};

AlltokenContext.prototype.VALID_VALUES = function() {
    return this.getToken(ToscaParser.VALID_VALUES, 0);
};

AlltokenContext.prototype.VALUE = function() {
    return this.getToken(ToscaParser.VALUE, 0);
};

AlltokenContext.prototype.LENGTH = function() {
    return this.getToken(ToscaParser.LENGTH, 0);
};

AlltokenContext.prototype.MIN_LENGTH = function() {
    return this.getToken(ToscaParser.MIN_LENGTH, 0);
};

AlltokenContext.prototype.MAX_LENGTH = function() {
    return this.getToken(ToscaParser.MAX_LENGTH, 0);
};

AlltokenContext.prototype.PATTERN = function() {
    return this.getToken(ToscaParser.PATTERN, 0);
};

AlltokenContext.prototype.ENTRY_SCHEMA = function() {
    return this.getToken(ToscaParser.ENTRY_SCHEMA, 0);
};

AlltokenContext.prototype.ATTRIBUTES = function() {
    return this.getToken(ToscaParser.ATTRIBUTES, 0);
};

AlltokenContext.prototype.VALID_SOURCE_TYPES = function() {
    return this.getToken(ToscaParser.VALID_SOURCE_TYPES, 0);
};

AlltokenContext.prototype.VALID_TARGET_TYPES = function() {
    return this.getToken(ToscaParser.VALID_TARGET_TYPES, 0);
};

AlltokenContext.prototype.INPUTS = function() {
    return this.getToken(ToscaParser.INPUTS, 0);
};

AlltokenContext.prototype.INTERFACES = function() {
    return this.getToken(ToscaParser.INTERFACES, 0);
};

AlltokenContext.prototype.RELATIONSHIP = function() {
    return this.getToken(ToscaParser.RELATIONSHIP, 0);
};

AlltokenContext.prototype.OCCURENCES = function() {
    return this.getToken(ToscaParser.OCCURENCES, 0);
};

AlltokenContext.prototype.DEPLOY_PATH = function() {
    return this.getToken(ToscaParser.DEPLOY_PATH, 0);
};

AlltokenContext.prototype.CAPABILITIES = function() {
    return this.getToken(ToscaParser.CAPABILITIES, 0);
};

AlltokenContext.prototype.NODE = function() {
    return this.getToken(ToscaParser.NODE, 0);
};

AlltokenContext.prototype.IMPLEMENTATION = function() {
    return this.getToken(ToscaParser.IMPLEMENTATION, 0);
};

AlltokenContext.prototype.DEPENDENCIES = function() {
    return this.getToken(ToscaParser.DEPENDENCIES, 0);
};

AlltokenContext.prototype.CAPABILITY = function() {
    return this.getToken(ToscaParser.CAPABILITY, 0);
};

AlltokenContext.prototype.REQUIREMENTS = function() {
    return this.getToken(ToscaParser.REQUIREMENTS, 0);
};

AlltokenContext.prototype.PRIMARY = function() {
    return this.getToken(ToscaParser.PRIMARY, 0);
};

AlltokenContext.prototype.K_SELF = function() {
    return this.getToken(ToscaParser.K_SELF, 0);
};

AlltokenContext.prototype.K_HOST = function() {
    return this.getToken(ToscaParser.K_HOST, 0);
};

AlltokenContext.prototype.K_SOURCE = function() {
    return this.getToken(ToscaParser.K_SOURCE, 0);
};

AlltokenContext.prototype.K_TARGET = function() {
    return this.getToken(ToscaParser.K_TARGET, 0);
};

AlltokenContext.prototype.LOCAL_FILE = function() {
    return this.getToken(ToscaParser.LOCAL_FILE, 0);
};

AlltokenContext.prototype.GET_INPUT = function() {
    return this.getToken(ToscaParser.GET_INPUT, 0);
};

AlltokenContext.prototype.GET_PROPERTY = function() {
    return this.getToken(ToscaParser.GET_PROPERTY, 0);
};

AlltokenContext.prototype.GET_ATTRIBUTE = function() {
    return this.getToken(ToscaParser.GET_ATTRIBUTE, 0);
};

AlltokenContext.prototype.GET_OPERATION_ATTRIBUTE = function() {
    return this.getToken(ToscaParser.GET_OPERATION_ATTRIBUTE, 0);
};

AlltokenContext.prototype.GET_NODES_OF_TYPES = function() {
    return this.getToken(ToscaParser.GET_NODES_OF_TYPES, 0);
};

AlltokenContext.prototype.GET_ARTIFACT = function() {
    return this.getToken(ToscaParser.GET_ARTIFACT, 0);
};

AlltokenContext.prototype.CONCAT = function() {
    return this.getToken(ToscaParser.CONCAT, 0);
};

AlltokenContext.prototype.DELEGATE = function() {
    return this.getToken(ToscaParser.DELEGATE, 0);
};

AlltokenContext.prototype.SET_STATE = function() {
    return this.getToken(ToscaParser.SET_STATE, 0);
};

AlltokenContext.prototype.CALL_OPERATION = function() {
    return this.getToken(ToscaParser.CALL_OPERATION, 0);
};

AlltokenContext.prototype.DIRECTIVES = function() {
    return this.getToken(ToscaParser.DIRECTIVES, 0);
};

AlltokenContext.prototype.INLINE = function() {
    return this.getToken(ToscaParser.INLINE, 0);
};

AlltokenContext.prototype.TARGET = function() {
    return this.getToken(ToscaParser.TARGET, 0);
};

AlltokenContext.prototype.TARGET_RELATIONSHIP = function() {
    return this.getToken(ToscaParser.TARGET_RELATIONSHIP, 0);
};

AlltokenContext.prototype.FILTER = function() {
    return this.getToken(ToscaParser.FILTER, 0);
};

AlltokenContext.prototype.ACTIVITIES = function() {
    return this.getToken(ToscaParser.ACTIVITIES, 0);
};

AlltokenContext.prototype.OPERATION_HOST = function() {
    return this.getToken(ToscaParser.OPERATION_HOST, 0);
};

AlltokenContext.prototype.ON_SUCCESS = function() {
    return this.getToken(ToscaParser.ON_SUCCESS, 0);
};

AlltokenContext.prototype.ON_FAILURE = function() {
    return this.getToken(ToscaParser.ON_FAILURE, 0);
};

AlltokenContext.prototype.ASSERT = function() {
    return this.getToken(ToscaParser.ASSERT, 0);
};

AlltokenContext.prototype.OR = function() {
    return this.getToken(ToscaParser.OR, 0);
};

AlltokenContext.prototype.AND = function() {
    return this.getToken(ToscaParser.AND, 0);
};

AlltokenContext.prototype.NOT = function() {
    return this.getToken(ToscaParser.NOT, 0);
};

AlltokenContext.prototype.AFTER = function() {
    return this.getToken(ToscaParser.AFTER, 0);
};

AlltokenContext.prototype.BEFORE = function() {
    return this.getToken(ToscaParser.BEFORE, 0);
};

AlltokenContext.prototype.WAIT_SOURCE = function() {
    return this.getToken(ToscaParser.WAIT_SOURCE, 0);
};

AlltokenContext.prototype.AFTER_SOURCE = function() {
    return this.getToken(ToscaParser.AFTER_SOURCE, 0);
};

AlltokenContext.prototype.WAIT_TARGET = function() {
    return this.getToken(ToscaParser.WAIT_TARGET, 0);
};

AlltokenContext.prototype.AFTER_TARGET = function() {
    return this.getToken(ToscaParser.AFTER_TARGET, 0);
};

AlltokenContext.prototype.ACTIVITY = function() {
    return this.getToken(ToscaParser.ACTIVITY, 0);
};

AlltokenContext.prototype.TARGET_WEAVING = function() {
    return this.getToken(ToscaParser.TARGET_WEAVING, 0);
};

AlltokenContext.prototype.SOURCE_WEAVING = function() {
    return this.getToken(ToscaParser.SOURCE_WEAVING, 0);
};

AlltokenContext.prototype.WORKFLOWS = function() {
    return this.getToken(ToscaParser.WORKFLOWS, 0);
};

AlltokenContext.prototype.MEMBERS = function() {
    return this.getToken(ToscaParser.MEMBERS, 0);
};

AlltokenContext.prototype.TRUE = function() {
    return this.getToken(ToscaParser.TRUE, 0);
};

AlltokenContext.prototype.FALSE = function() {
    return this.getToken(ToscaParser.FALSE, 0);
};

AlltokenContext.prototype.ID = function() {
    return this.getToken(ToscaParser.ID, 0);
};

AlltokenContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ToscaParser.STRING_LITERAL, 0);
};

AlltokenContext.prototype.DECIMAL_INTEGER = function() {
    return this.getToken(ToscaParser.DECIMAL_INTEGER, 0);
};

AlltokenContext.prototype.OCT_INTEGER = function() {
    return this.getToken(ToscaParser.OCT_INTEGER, 0);
};

AlltokenContext.prototype.HEX_INTEGER = function() {
    return this.getToken(ToscaParser.HEX_INTEGER, 0);
};

AlltokenContext.prototype.BIN_INTEGER = function() {
    return this.getToken(ToscaParser.BIN_INTEGER, 0);
};

AlltokenContext.prototype.FLOAT_NUMBER = function() {
    return this.getToken(ToscaParser.FLOAT_NUMBER, 0);
};

AlltokenContext.prototype.IMAG_NUMBER = function() {
    return this.getToken(ToscaParser.IMAG_NUMBER, 0);
};

AlltokenContext.prototype.STAR = function() {
    return this.getToken(ToscaParser.STAR, 0);
};

AlltokenContext.prototype.OPEN_PAREN = function() {
    return this.getToken(ToscaParser.OPEN_PAREN, 0);
};

AlltokenContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(ToscaParser.CLOSE_PAREN, 0);
};

AlltokenContext.prototype.COMMA = function() {
    return this.getToken(ToscaParser.COMMA, 0);
};

AlltokenContext.prototype.COLON = function() {
    return this.getToken(ToscaParser.COLON, 0);
};

AlltokenContext.prototype.SEMI_COLON = function() {
    return this.getToken(ToscaParser.SEMI_COLON, 0);
};

AlltokenContext.prototype.POWER = function() {
    return this.getToken(ToscaParser.POWER, 0);
};

AlltokenContext.prototype.ASSIGN = function() {
    return this.getToken(ToscaParser.ASSIGN, 0);
};

AlltokenContext.prototype.OPEN_BRACK = function() {
    return this.getToken(ToscaParser.OPEN_BRACK, 0);
};

AlltokenContext.prototype.CLOSE_BRACK = function() {
    return this.getToken(ToscaParser.CLOSE_BRACK, 0);
};

AlltokenContext.prototype.XOR = function() {
    return this.getToken(ToscaParser.XOR, 0);
};

AlltokenContext.prototype.LEFT_SHIFT = function() {
    return this.getToken(ToscaParser.LEFT_SHIFT, 0);
};

AlltokenContext.prototype.RIGHT_SHIFT = function() {
    return this.getToken(ToscaParser.RIGHT_SHIFT, 0);
};

AlltokenContext.prototype.ADD = function() {
    return this.getToken(ToscaParser.ADD, 0);
};

AlltokenContext.prototype.MINUS = function() {
    return this.getToken(ToscaParser.MINUS, 0);
};

AlltokenContext.prototype.DIV = function() {
    return this.getToken(ToscaParser.DIV, 0);
};

AlltokenContext.prototype.MOD = function() {
    return this.getToken(ToscaParser.MOD, 0);
};

AlltokenContext.prototype.IDIV = function() {
    return this.getToken(ToscaParser.IDIV, 0);
};

AlltokenContext.prototype.OPEN_BRACE = function() {
    return this.getToken(ToscaParser.OPEN_BRACE, 0);
};

AlltokenContext.prototype.CLOSE_BRACE = function() {
    return this.getToken(ToscaParser.CLOSE_BRACE, 0);
};

AlltokenContext.prototype.UNKNOWN_CHAR = function() {
    return this.getToken(ToscaParser.UNKNOWN_CHAR, 0);
};

AlltokenContext.prototype.INFINITY = function() {
    return this.getToken(ToscaParser.INFINITY, 0);
};

AlltokenContext.prototype.UNBOUNDED = function() {
    return this.getToken(ToscaParser.UNBOUNDED, 0);
};

AlltokenContext.prototype.NULL = function() {
    return this.getToken(ToscaParser.NULL, 0);
};

AlltokenContext.prototype.NAN = function() {
    return this.getToken(ToscaParser.NAN, 0);
};

AlltokenContext.prototype.TIMESTAMP = function() {
    return this.getToken(ToscaParser.TIMESTAMP, 0);
};

AlltokenContext.prototype.BASETYPE_NAMES = function() {
    return this.getToken(ToscaParser.BASETYPE_NAMES, 0);
};

AlltokenContext.prototype.DOT = function() {
    return this.getToken(ToscaParser.DOT, 0);
};

AlltokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.enterAlltoken(this);
	}
};

AlltokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof ToscaListener ) {
        listener.exitAlltoken(this);
	}
};




ToscaParser.AlltokenContext = AlltokenContext;

ToscaParser.prototype.alltoken = function() {

    var localctx = new AlltokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, ToscaParser.RULE_alltoken);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3439;
        _la = this._input.LA(1);
        if(!(((((_la - 27)) & ~0x1f) == 0 && ((1 << (_la - 27)) & ((1 << (ToscaParser.BASETYPE_NAMES - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_0 - 27)) | (1 << (ToscaParser.TOSCA_SIMPLE_YAML_1_1 - 27)) | (1 << (ToscaParser.SUPPORTED - 27)) | (1 << (ToscaParser.UNSUPPORTED - 27)) | (1 << (ToscaParser.EXPERIMENTAL - 27)) | (1 << (ToscaParser.DEPRECATED - 27)) | (1 << (ToscaParser.S_B - 27)) | (1 << (ToscaParser.S_KB - 27)) | (1 << (ToscaParser.S_KIB - 27)) | (1 << (ToscaParser.S_MB - 27)) | (1 << (ToscaParser.S_GB - 27)) | (1 << (ToscaParser.S_GIB - 27)) | (1 << (ToscaParser.S_TB - 27)) | (1 << (ToscaParser.S_TIB - 27)) | (1 << (ToscaParser.T_D - 27)) | (1 << (ToscaParser.T_H - 27)) | (1 << (ToscaParser.T_M - 27)) | (1 << (ToscaParser.T_S - 27)) | (1 << (ToscaParser.T_MS - 27)) | (1 << (ToscaParser.T_US - 27)) | (1 << (ToscaParser.T_NS - 27)) | (1 << (ToscaParser.F_HZ - 27)) | (1 << (ToscaParser.F_KHZ - 27)) | (1 << (ToscaParser.F_MHZ - 27)) | (1 << (ToscaParser.F_GHZ - 27)) | (1 << (ToscaParser.INITIAL - 27)) | (1 << (ToscaParser.CREATING - 27)) | (1 << (ToscaParser.CREATED - 27)) | (1 << (ToscaParser.CONFIGURING - 27)) | (1 << (ToscaParser.CONFIGURED - 27)))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (ToscaParser.STARTING - 59)) | (1 << (ToscaParser.STARTED - 59)) | (1 << (ToscaParser.STOPPING - 59)) | (1 << (ToscaParser.STOPPED - 59)) | (1 << (ToscaParser.DELETING - 59)) | (1 << (ToscaParser.ERROR - 59)) | (1 << (ToscaParser.AVAILABLE - 59)) | (1 << (ToscaParser.TOSCA_DEFINITION_VERSION - 59)) | (1 << (ToscaParser.METADATA - 59)) | (1 << (ToscaParser.TEMPLATE_NAME - 59)) | (1 << (ToscaParser.TEMPLATE_AUTHOR - 59)) | (1 << (ToscaParser.TEMPLATE_VERSION - 59)) | (1 << (ToscaParser.ARTIFACT_TYPES - 59)) | (1 << (ToscaParser.DERIVED_FROM - 59)) | (1 << (ToscaParser.MIME_TYPE - 59)) | (1 << (ToscaParser.FILE_EXT - 59)) | (1 << (ToscaParser.DATA_TYPES - 59)) | (1 << (ToscaParser.PROPERTIES - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (ToscaParser.TYPE - 91)) | (1 << (ToscaParser.REQUIRED - 91)) | (1 << (ToscaParser.STATUS - 91)) | (1 << (ToscaParser.DEFAULT - 91)) | (1 << (ToscaParser.REPOSITORIES - 91)) | (1 << (ToscaParser.URL - 91)) | (1 << (ToscaParser.DESCRIPTION - 91)) | (1 << (ToscaParser.CREDENTIAL - 91)) | (1 << (ToscaParser.TOKEN - 91)) | (1 << (ToscaParser.PROTOCOL - 91)) | (1 << (ToscaParser.TOKEN_TYPE - 91)) | (1 << (ToscaParser.USER - 91)) | (1 << (ToscaParser.IMPORTS - 91)) | (1 << (ToscaParser.FILE - 91)) | (1 << (ToscaParser.REPOSITORY - 91)) | (1 << (ToscaParser.NAMESPACE_PREFIX - 91)) | (1 << (ToscaParser.NAMESPACE_URI - 91)) | (1 << (ToscaParser.CAPABILITY_TYPES - 91)) | (1 << (ToscaParser.NODE_TYPES - 91)) | (1 << (ToscaParser.INTERFACE_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TYPES - 91)) | (1 << (ToscaParser.GROUP_TYPES - 91)) | (1 << (ToscaParser.GROUPS - 91)) | (1 << (ToscaParser.COPY - 91)) | (1 << (ToscaParser.POLICY_TYPES - 91)) | (1 << (ToscaParser.TOPOLOGY_TYPES - 91)) | (1 << (ToscaParser.RELATIONSHIP_TEMPLATES - 91)) | (1 << (ToscaParser.CONSTRAINTS - 91)) | (1 << (ToscaParser.EQUAL - 91)) | (1 << (ToscaParser.GREATER_THAN - 91)) | (1 << (ToscaParser.GREATER_OR_EQUAL - 91)) | (1 << (ToscaParser.LESS_THAN - 91)))) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (ToscaParser.LESS_OR_EQUAL - 123)) | (1 << (ToscaParser.IN_RANGE - 123)) | (1 << (ToscaParser.VALID_VALUES - 123)) | (1 << (ToscaParser.VALUE - 123)) | (1 << (ToscaParser.LENGTH - 123)) | (1 << (ToscaParser.MIN_LENGTH - 123)) | (1 << (ToscaParser.MAX_LENGTH - 123)) | (1 << (ToscaParser.PATTERN - 123)) | (1 << (ToscaParser.ENTRY_SCHEMA - 123)) | (1 << (ToscaParser.ATTRIBUTES - 123)) | (1 << (ToscaParser.VALID_SOURCE_TYPES - 123)) | (1 << (ToscaParser.VALID_TARGET_TYPES - 123)) | (1 << (ToscaParser.INPUTS - 123)) | (1 << (ToscaParser.INTERFACES - 123)) | (1 << (ToscaParser.RELATIONSHIP - 123)) | (1 << (ToscaParser.OCCURENCES - 123)) | (1 << (ToscaParser.DEPLOY_PATH - 123)) | (1 << (ToscaParser.CAPABILITIES - 123)) | (1 << (ToscaParser.NODE - 123)) | (1 << (ToscaParser.IMPLEMENTATION - 123)) | (1 << (ToscaParser.DEPENDENCIES - 123)) | (1 << (ToscaParser.CAPABILITY - 123)) | (1 << (ToscaParser.REQUIREMENTS - 123)) | (1 << (ToscaParser.PRIMARY - 123)) | (1 << (ToscaParser.K_SELF - 123)) | (1 << (ToscaParser.K_HOST - 123)) | (1 << (ToscaParser.K_SOURCE - 123)) | (1 << (ToscaParser.K_TARGET - 123)) | (1 << (ToscaParser.LOCAL_FILE - 123)) | (1 << (ToscaParser.GET_INPUT - 123)) | (1 << (ToscaParser.GET_PROPERTY - 123)) | (1 << (ToscaParser.GET_ATTRIBUTE - 123)))) !== 0) || ((((_la - 155)) & ~0x1f) == 0 && ((1 << (_la - 155)) & ((1 << (ToscaParser.GET_OPERATION_ATTRIBUTE - 155)) | (1 << (ToscaParser.GET_NODES_OF_TYPES - 155)) | (1 << (ToscaParser.GET_ARTIFACT - 155)) | (1 << (ToscaParser.CONCAT - 155)) | (1 << (ToscaParser.DELEGATE - 155)) | (1 << (ToscaParser.SET_STATE - 155)) | (1 << (ToscaParser.CALL_OPERATION - 155)) | (1 << (ToscaParser.DIRECTIVES - 155)) | (1 << (ToscaParser.INLINE - 155)) | (1 << (ToscaParser.TARGET - 155)) | (1 << (ToscaParser.TARGET_RELATIONSHIP - 155)) | (1 << (ToscaParser.FILTER - 155)) | (1 << (ToscaParser.ACTIVITIES - 155)) | (1 << (ToscaParser.OPERATION_HOST - 155)) | (1 << (ToscaParser.ON_SUCCESS - 155)) | (1 << (ToscaParser.ON_FAILURE - 155)) | (1 << (ToscaParser.ASSERT - 155)) | (1 << (ToscaParser.OR - 155)) | (1 << (ToscaParser.AND - 155)) | (1 << (ToscaParser.NOT - 155)) | (1 << (ToscaParser.AFTER - 155)) | (1 << (ToscaParser.BEFORE - 155)) | (1 << (ToscaParser.WAIT_SOURCE - 155)) | (1 << (ToscaParser.AFTER_SOURCE - 155)) | (1 << (ToscaParser.WAIT_TARGET - 155)) | (1 << (ToscaParser.AFTER_TARGET - 155)) | (1 << (ToscaParser.ACTIVITY - 155)) | (1 << (ToscaParser.TARGET_WEAVING - 155)) | (1 << (ToscaParser.SOURCE_WEAVING - 155)) | (1 << (ToscaParser.WORKFLOWS - 155)) | (1 << (ToscaParser.MEMBERS - 155)) | (1 << (ToscaParser.TRUE - 155)))) !== 0) || ((((_la - 187)) & ~0x1f) == 0 && ((1 << (_la - 187)) & ((1 << (ToscaParser.FALSE - 187)) | (1 << (ToscaParser.STRING_LITERAL - 187)) | (1 << (ToscaParser.DECIMAL_INTEGER - 187)) | (1 << (ToscaParser.OCT_INTEGER - 187)) | (1 << (ToscaParser.HEX_INTEGER - 187)) | (1 << (ToscaParser.BIN_INTEGER - 187)) | (1 << (ToscaParser.FLOAT_NUMBER - 187)) | (1 << (ToscaParser.IMAG_NUMBER - 187)) | (1 << (ToscaParser.DOT - 187)) | (1 << (ToscaParser.STAR - 187)) | (1 << (ToscaParser.OPEN_PAREN - 187)) | (1 << (ToscaParser.CLOSE_PAREN - 187)) | (1 << (ToscaParser.COMMA - 187)) | (1 << (ToscaParser.COLON - 187)) | (1 << (ToscaParser.SEMI_COLON - 187)) | (1 << (ToscaParser.POWER - 187)) | (1 << (ToscaParser.ASSIGN - 187)) | (1 << (ToscaParser.OPEN_BRACK - 187)) | (1 << (ToscaParser.CLOSE_BRACK - 187)) | (1 << (ToscaParser.XOR - 187)) | (1 << (ToscaParser.LEFT_SHIFT - 187)) | (1 << (ToscaParser.RIGHT_SHIFT - 187)) | (1 << (ToscaParser.ADD - 187)) | (1 << (ToscaParser.MINUS - 187)) | (1 << (ToscaParser.DIV - 187)) | (1 << (ToscaParser.MOD - 187)) | (1 << (ToscaParser.IDIV - 187)) | (1 << (ToscaParser.OPEN_BRACE - 187)))) !== 0) || ((((_la - 219)) & ~0x1f) == 0 && ((1 << (_la - 219)) & ((1 << (ToscaParser.CLOSE_BRACE - 219)) | (1 << (ToscaParser.INFINITY - 219)) | (1 << (ToscaParser.VERSION - 219)) | (1 << (ToscaParser.UNBOUNDED - 219)) | (1 << (ToscaParser.NULL - 219)) | (1 << (ToscaParser.NAN - 219)) | (1 << (ToscaParser.TIMESTAMP - 219)) | (1 << (ToscaParser.ID - 219)) | (1 << (ToscaParser.UNKNOWN_CHAR - 219)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.ToscaParser = ToscaParser;
